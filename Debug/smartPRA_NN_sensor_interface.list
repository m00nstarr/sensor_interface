
smartPRA_NN_sensor_interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc94  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e64  0800ff68  0800ff68  0001ff68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010dcc  08010dcc  00020dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010dd4  08010dd4  00020dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010dd8  08010dd8  00020dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000cc4  24000000  08010ddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004f0  24000cc4  08011aa0  00030cc4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240011b4  08011aa0  000311b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030cc4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00031d29  00000000  00000000  00030cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046b9  00000000  00000000  00062a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d10  00000000  00000000  000670d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001bb8  00000000  00000000  00068de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039155  00000000  00000000  0006a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024672  00000000  00000000  000a3af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00174983  00000000  00000000  000c8167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023caea  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008f88  00000000  00000000  0023cb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000cc4 	.word	0x24000cc4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ff4c 	.word	0x0800ff4c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000cc8 	.word	0x24000cc8
 800030c:	0800ff4c 	.word	0x0800ff4c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <sigmoid>:
typedef enum
{
	RELU, SIGMOID
}Activation;

float sigmoid(float x) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	ed87 0a01 	vstr	s0, [r7, #4]
	return 1.0f / (1.0f + exp(-x));
 80006c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c6:	eef1 7a67 	vneg.f32	s15, s15
 80006ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ce:	eeb0 0b47 	vmov.f64	d0, d7
 80006d2:	f00c fdf1 	bl	800d2b8 <exp>
 80006d6:	eeb0 7b40 	vmov.f64	d7, d0
 80006da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80006de:	ee37 6b06 	vadd.f64	d6, d7, d6
 80006e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80006e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80006ee:	eeb0 0a67 	vmov.f32	s0, s15
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <relu>:

float relu(float x) {
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	ed87 0a01 	vstr	s0, [r7, #4]
	return x > 0.0f ? x : 0.0f;
 8000702:	edd7 7a01 	vldr	s15, [r7, #4]
 8000706:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800070e:	dd01      	ble.n	8000714 <relu+0x1c>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	e001      	b.n	8000718 <relu+0x20>
 8000714:	f04f 0300 	mov.w	r3, #0
 8000718:	ee07 3a90 	vmov	s15, r3
}
 800071c:	eeb0 0a67 	vmov.f32	s0, s15
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <Linear_construct>:
	int module_num;
	Linear** modules;

}Model;

void Linear_construct(Linear* linear, int out_dim, int in_dim, float* bias, Activation act) {
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	603b      	str	r3, [r7, #0]
	//printf("%d, %d", out_dim, in_dim);
	linear->bias = bias;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	60da      	str	r2, [r3, #12]
	linear->in_dim = in_dim;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
	linear->out_dim = out_dim;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	605a      	str	r2, [r3, #4]
	if (act == RELU) {
 800074c:	7e3b      	ldrb	r3, [r7, #24]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <Linear_construct+0x2e>
		linear->activation = relu;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <Linear_construct+0x48>)
 8000756:	611a      	str	r2, [r3, #16]
	}
	else if (act == SIGMOID) {
		linear->activation = sigmoid;
	}
}
 8000758:	e005      	b.n	8000766 <Linear_construct+0x3a>
	else if (act == SIGMOID) {
 800075a:	7e3b      	ldrb	r3, [r7, #24]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d102      	bne.n	8000766 <Linear_construct+0x3a>
		linear->activation = sigmoid;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <Linear_construct+0x4c>)
 8000764:	611a      	str	r2, [r3, #16]
}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	080006f9 	.word	0x080006f9
 8000778:	080006b9 	.word	0x080006b9

0800077c <Model_construct>:

void Model_construct(Model* model, int module_num) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	model->module_num = module_num;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	601a      	str	r2, [r3, #0]
	model->modules = (Linear**)malloc(sizeof(Linear*) * module_num);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4618      	mov	r0, r3
 8000792:	f00c feff 	bl	800d594 <malloc>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	605a      	str	r2, [r3, #4]
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Model_append>:

void Model_append(Model* model, Linear* linear, int idx) {
 80007a6:	b480      	push	{r7}
 80007a8:	b085      	sub	sp, #20
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	60f8      	str	r0, [r7, #12]
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
	model->modules[idx - 1] = linear;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80007bc:	440b      	add	r3, r1
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	601a      	str	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr

080007d2 <forward>:

float* forward(Model* model, float *input) {
 80007d2:	b590      	push	{r4, r7, lr}
 80007d4:	b089      	sub	sp, #36	; 0x24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
	for (int m = 0; m < model->module_num; m++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	e063      	b.n	80008aa <forward+0xd8>
		Linear* linear = model->modules[m];
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	60fb      	str	r3, [r7, #12]
		float* output = (float*)calloc(linear->out_dim, sizeof(float));
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2104      	movs	r1, #4
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00c fe9a 	bl	800d530 <calloc>
 80007fc:	4603      	mov	r3, r0
 80007fe:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < linear->out_dim; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
 8000804:	e041      	b.n	800088a <forward+0xb8>
			float d = 0.0;
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
			for (int j = 0; j < linear->in_dim; j++) {
 800080c:	2300      	movs	r3, #0
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	e01b      	b.n	800084a <forward+0x78>
				d += linear->weight[i][j] * input[j];
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	ed93 7a00 	vldr	s14, [r3]
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	4413      	add	r3, r2
 8000830:	edd3 7a00 	vldr	s15, [r3]
 8000834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000838:	ed97 7a05 	vldr	s14, [r7, #20]
 800083c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000840:	edc7 7a05 	vstr	s15, [r7, #20]
			for (int j = 0; j < linear->in_dim; j++) {
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	3301      	adds	r3, #1
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	429a      	cmp	r2, r3
 8000852:	dbde      	blt.n	8000812 <forward+0x40>
			}
			output[i] = linear->activation(d + linear->bias[i]);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	68d1      	ldr	r1, [r2, #12]
 800085c:	69ba      	ldr	r2, [r7, #24]
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	440a      	add	r2, r1
 8000862:	ed92 7a00 	vldr	s14, [r2]
 8000866:	edd7 7a05 	vldr	s15, [r7, #20]
 800086a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086e:	69ba      	ldr	r2, [r7, #24]
 8000870:	0092      	lsls	r2, r2, #2
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	188c      	adds	r4, r1, r2
 8000876:	eeb0 0a67 	vmov.f32	s0, s15
 800087a:	4798      	blx	r3
 800087c:	eef0 7a40 	vmov.f32	s15, s0
 8000880:	edc4 7a00 	vstr	s15, [r4]
		for (int i = 0; i < linear->out_dim; i++) {
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3301      	adds	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbb8      	blt.n	8000806 <forward+0x34>
		}
		if(m!=0){
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <forward+0xce>
			free(input);
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f00c fe82 	bl	800d5a4 <free>
		}
		input = output;
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	603b      	str	r3, [r7, #0]
	for (int m = 0; m < model->module_num; m++) {
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	db96      	blt.n	80007e2 <forward+0x10>
	}
	return input;
 80008b4:	683b      	ldr	r3, [r7, #0]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	; 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd90      	pop	{r4, r7, pc}
	...

080008c0 <__io_putchar>:
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

PUTCHAR_PROTOTYPE
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80008c8:	1d39      	adds	r1, r7, #4
 80008ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ce:	2201      	movs	r2, #1
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <__io_putchar+0x20>)
 80008d2:	f00b f82f 	bl	800b934 <HAL_UART_Transmit>

  return ch;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	24000e4c 	.word	0x24000e4c

080008e4 <print_data>:
#define TIME_DEBUG 1
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print_data(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	printf("--------------------\r\n");
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <print_data+0x50>)
 80008ea:	f00d fbed 	bl	800e0c8 <puts>
	printf("Voltage : %f(V)\r\n", voltage_value);
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <print_data+0x54>)
 80008f0:	edd3 7a00 	vldr	s15, [r3]
 80008f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008f8:	ec53 2b17 	vmov	r2, r3, d7
 80008fc:	480f      	ldr	r0, [pc, #60]	; (800093c <print_data+0x58>)
 80008fe:	f00d fb5d 	bl	800dfbc <iprintf>
	printf("temperature : %f('C)\r\n", temp_value);
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <print_data+0x5c>)
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800090c:	ec53 2b17 	vmov	r2, r3, d7
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <print_data+0x60>)
 8000912:	f00d fb53 	bl	800dfbc <iprintf>
	printf("ADC value : %ld -> current : %f(mA)\r\n", adc_value2, current_value);
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <print_data+0x64>)
 8000918:	6819      	ldr	r1, [r3, #0]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <print_data+0x68>)
 800091c:	edd3 7a00 	vldr	s15, [r3]
 8000920:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000924:	ec53 2b17 	vmov	r2, r3, d7
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <print_data+0x6c>)
 800092a:	f00d fb47 	bl	800dfbc <iprintf>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	0800ff68 	.word	0x0800ff68
 8000938:	24000ce0 	.word	0x24000ce0
 800093c:	0800ff80 	.word	0x0800ff80
 8000940:	24000ce4 	.word	0x24000ce4
 8000944:	0800ff94 	.word	0x0800ff94
 8000948:	240010f0 	.word	0x240010f0
 800094c:	24000ce8 	.word	0x24000ce8
 8000950:	0800ffac 	.word	0x0800ffac
 8000954:	00000000 	.word	0x00000000

08000958 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI5_NSS1_GPIO_Port, SPI5_NSS1_Pin, GPIO_PIN_SET); // deactivate
 8000960:	2201      	movs	r2, #1
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <HAL_SPI_RxCpltCallback+0x58>)
 8000966:	f005 fb69 	bl	800603c <HAL_GPIO_WritePin>
	flag = 1;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_SPI_RxCpltCallback+0x5c>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
	current_value = (buffer_rx1 - 2048) * 1000 / 89.95;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_SPI_RxCpltCallback+0x60>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000988:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80009a8 <HAL_SPI_RxCpltCallback+0x50>
 800098c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000990:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_SPI_RxCpltCallback+0x64>)
 8000996:	edc3 7a00 	vstr	s15, [r3]
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	f3af 8000 	nop.w
 80009a8:	cccccccd 	.word	0xcccccccd
 80009ac:	40567ccc 	.word	0x40567ccc
 80009b0:	58021400 	.word	0x58021400
 80009b4:	24000fac 	.word	0x24000fac
 80009b8:	24001144 	.word	0x24001144
 80009bc:	24000ce8 	.word	0x24000ce8

080009c0 <HAL_TIM_PeriodElapsedCallback>:



//Timer interrupted every 1ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

	uint32_t adc_value;

	uint16_t print_interval = 100;
 80009c8:	2364      	movs	r3, #100	; 0x64
 80009ca:	847b      	strh	r3, [r7, #34]	; 0x22

	if (htim->Instance == TIM13)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a7f      	ldr	r2, [pc, #508]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	f040 81b9 	bne.w	8000d4a <HAL_TIM_PeriodElapsedCallback+0x38a>
	{
		start = htim->Instance->CNT;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009de:	4a7d      	ldr	r2, [pc, #500]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80009e0:	6013      	str	r3, [r2, #0]
		counter_for_timing++;
 80009e2:	4b7d      	ldr	r3, [pc, #500]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a7b      	ldr	r2, [pc, #492]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80009ea:	6013      	str	r3, [r2, #0]

		counter = (counter + 1) % print_interval;
 80009ec:	4b7b      	ldr	r3, [pc, #492]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80009f4:	fb93 f1f2 	sdiv	r1, r3, r2
 80009f8:	fb02 f201 	mul.w	r2, r2, r1
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b76      	ldr	r3, [pc, #472]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000a02:	801a      	strh	r2, [r3, #0]

		//Get Voltage sensor value
		start_ = htim->Instance->CNT;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0a:	4a75      	ldr	r2, [pc, #468]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a0c:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc1);
 8000a0e:	4875      	ldr	r0, [pc, #468]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a10:	f002 fee2 	bl	80037d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 8000a14:	2101      	movs	r1, #1
 8000a16:	4873      	ldr	r0, [pc, #460]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a18:	f002 ffdc 	bl	80039d4 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000a1c:	4871      	ldr	r0, [pc, #452]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a1e:	f003 f8cd 	bl	8003bbc <HAL_ADC_GetValue>
 8000a22:	61f8      	str	r0, [r7, #28]
		HAL_ADC_Stop(&hadc1);
 8000a24:	486f      	ldr	r0, [pc, #444]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000a26:	f002 ffa1 	bl	800396c <HAL_ADC_Stop>
		end_ = htim->Instance->CNT;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a30:	4a6d      	ldr	r2, [pc, #436]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a32:	6013      	str	r3, [r2, #0]

		voltage_exec += (end_ - start_);
 8000a34:	4b6c      	ldr	r3, [pc, #432]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	1ad2      	subs	r2, r2, r3
 8000a3e:	4b6b      	ldr	r3, [pc, #428]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a69      	ldr	r2, [pc, #420]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000a46:	6013      	str	r3, [r2, #0]

		voltage_value =  (float)(adc_value - 37) * 5 * 4 / 1024;
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	3b25      	subs	r3, #37	; 0x25
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a54:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000a60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a64:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000bf0 <HAL_TIM_PeriodElapsedCallback+0x230>
 8000a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6c:	4b61      	ldr	r3, [pc, #388]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000a6e:	edc3 7a00 	vstr	s15, [r3]

		//Get temperature sensor value
		start_ = htim->Instance->CNT;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	4a59      	ldr	r2, [pc, #356]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000a7a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc3);
 8000a7c:	485e      	ldr	r0, [pc, #376]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000a7e:	f002 feab 	bl	80037d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, 1);
 8000a82:	2101      	movs	r1, #1
 8000a84:	485c      	ldr	r0, [pc, #368]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000a86:	f002 ffa5 	bl	80039d4 <HAL_ADC_PollForConversion>
		adc_value = HAL_ADC_GetValue(&hadc3);
 8000a8a:	485b      	ldr	r0, [pc, #364]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000a8c:	f003 f896 	bl	8003bbc <HAL_ADC_GetValue>
 8000a90:	61f8      	str	r0, [r7, #28]
		HAL_ADC_Stop(&hadc3);
 8000a92:	4859      	ldr	r0, [pc, #356]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000a94:	f002 ff6a 	bl	800396c <HAL_ADC_Stop>
		end_ = htim->Instance->CNT;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9e:	4a52      	ldr	r2, [pc, #328]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000aa0:	6013      	str	r3, [r2, #0]
		temp_exec += (end_ - start_);
 8000aa2:	4b51      	ldr	r3, [pc, #324]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1ad2      	subs	r2, r2, r3
 8000aac:	4b53      	ldr	r3, [pc, #332]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a52      	ldr	r2, [pc, #328]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000ab4:	6013      	str	r3, [r2, #0]

		temp_value = (float)(adc_value *330) / 4095;
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000abc:	fb02 f303 	mul.w	r3, r2, r3
 8000ac0:	ee07 3a90 	vmov	s15, r3
 8000ac4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ac8:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x240>
 8000acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000ad2:	edc3 7a00 	vstr	s15, [r3]


		//Get current sensor value
		start_ = htim->Instance->CNT;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	4a40      	ldr	r2, [pc, #256]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ade:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start(&hadc2);
 8000ae0:	4849      	ldr	r0, [pc, #292]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000ae2:	f002 fe79 	bl	80037d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, 1);
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4847      	ldr	r0, [pc, #284]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000aea:	f002 ff73 	bl	80039d4 <HAL_ADC_PollForConversion>
		adc_value2 = HAL_ADC_GetValue(&hadc2);
 8000aee:	4846      	ldr	r0, [pc, #280]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000af0:	f003 f864 	bl	8003bbc <HAL_ADC_GetValue>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a45      	ldr	r2, [pc, #276]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000af8:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc2);
 8000afa:	4843      	ldr	r0, [pc, #268]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8000afc:	f002 ff36 	bl	800396c <HAL_ADC_Stop>
		current_value = (float)(adc_value2* 3.3) / 65535 ;
 8000b00:	4b42      	ldr	r3, [pc, #264]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	ee07 3a90 	vmov	s15, r3
 8000b08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b0c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8000bc8 <HAL_TIM_PeriodElapsedCallback+0x208>
 8000b10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b14:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8000b18:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000c10 <HAL_TIM_PeriodElapsedCallback+0x250>
 8000b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b20:	4b3c      	ldr	r3, [pc, #240]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_WritePin(SPI5_NSS1_GPIO_Port, SPI5_NSS1_Pin, GPIO_PIN_RESET); // activate
		flag = 0;
		HAL_SPI_Receive_IT(&hspi5, &buffer_rx1, 1);
		while(!flag){}
		*/
		end_ = htim->Instance->CNT;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2c:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000b2e:	6013      	str	r3, [r2, #0]
		current_exec += (end_ - start_);
 8000b30:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	1ad2      	subs	r2, r2, r3
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a35      	ldr	r2, [pc, #212]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8000b42:	6013      	str	r3, [r2, #0]


		start_ = htim->Instance->CNT;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b4c:	6013      	str	r3, [r2, #0]
		float sample[4] = {current_value, voltage_value, temp_value, 0 };
 8000b4e:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
		float* result = forward(model, sample);
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f107 0208 	add.w	r2, r7, #8
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe2e 	bl	80007d2 <forward>
 8000b76:	61b8      	str	r0, [r7, #24]
		end_ = htim->Instance->CNT;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7e:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000b80:	6013      	str	r3, [r2, #0]

		NN_exec += (end_ - start_);
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	1ad2      	subs	r2, r2, r3
 8000b8c:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a23      	ldr	r2, [pc, #140]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000b94:	6013      	str	r3, [r2, #0]

		Total_exec += (end_ - start);
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	1ad2      	subs	r2, r2, r3
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000ba8:	6013      	str	r3, [r2, #0]
		if(DATA_DEBUG){
			if(counter == 0){
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d156      	bne.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x2a0>
				print_data();
 8000bb2:	f7ff fe97 	bl	80008e4 <print_data>
				printf("NeuralNet Output : ");
 8000bb6:	481c      	ldr	r0, [pc, #112]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000bb8:	f00d fa00 	bl	800dfbc <iprintf>
				for (int i = 0; i < l3->out_dim; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc0:	e045      	b.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x28e>
 8000bc2:	bf00      	nop
 8000bc4:	f3af 8000 	nop.w
 8000bc8:	66666666 	.word	0x66666666
 8000bcc:	400a6666 	.word	0x400a6666
 8000bd0:	40001c00 	.word	0x40001c00
 8000bd4:	2400119c 	.word	0x2400119c
 8000bd8:	24000cf0 	.word	0x24000cf0
 8000bdc:	24000cec 	.word	0x24000cec
 8000be0:	24001140 	.word	0x24001140
 8000be4:	24001008 	.word	0x24001008
 8000be8:	24001004 	.word	0x24001004
 8000bec:	24000cf8 	.word	0x24000cf8
 8000bf0:	44800000 	.word	0x44800000
 8000bf4:	24000ce0 	.word	0x24000ce0
 8000bf8:	24001080 	.word	0x24001080
 8000bfc:	24000cf4 	.word	0x24000cf4
 8000c00:	457ff000 	.word	0x457ff000
 8000c04:	24000ce4 	.word	0x24000ce4
 8000c08:	24000edc 	.word	0x24000edc
 8000c0c:	240010f0 	.word	0x240010f0
 8000c10:	477fff00 	.word	0x477fff00
 8000c14:	24000ce8 	.word	0x24000ce8
 8000c18:	24000cfc 	.word	0x24000cfc
 8000c1c:	24000fb0 	.word	0x24000fb0
 8000c20:	24000d00 	.word	0x24000d00
 8000c24:	24000d04 	.word	0x24000d04
 8000c28:	0800ffd4 	.word	0x0800ffd4
					printf("%d : %f 	", i, result[i]);
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4413      	add	r3, r2
 8000c34:	edd3 7a00 	vldr	s15, [r3]
 8000c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c3c:	ec53 2b17 	vmov	r2, r3, d7
 8000c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c42:	4844      	ldr	r0, [pc, #272]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8000c44:	f00d f9ba 	bl	800dfbc <iprintf>
				for (int i = 0; i < l3->out_dim; i++) {
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c4e:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c56:	429a      	cmp	r2, r3
 8000c58:	dbe8      	blt.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x26c>
				}
				printf("\r\n--------------------\r\n\r\n");
 8000c5a:	4840      	ldr	r0, [pc, #256]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8000c5c:	f00d fa34 	bl	800e0c8 <puts>
			}
		}

		if(TIME_DEBUG){

			if(counter_for_timing == 1000){
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c68:	d16f      	bne.n	8000d4a <HAL_TIM_PeriodElapsedCallback+0x38a>

				printf("\r\n");
 8000c6a:	483e      	ldr	r0, [pc, #248]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8000c6c:	f00d fa2c 	bl	800e0c8 <puts>
				printf("-------------------------------------\r\n");
 8000c70:	483d      	ldr	r0, [pc, #244]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8000c72:	f00d fa29 	bl	800e0c8 <puts>
				printf("current sensor response time : %f(us)\r\n", (float)current_exec /1000 );
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c82:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8000c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8e:	ec53 2b17 	vmov	r2, r3, d7
 8000c92:	4838      	ldr	r0, [pc, #224]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8000c94:	f00d f992 	bl	800dfbc <iprintf>
				printf("ADC voltage sensor response time : %f(us)\r\n", (float)voltage_exec / 1000);
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	ee07 3a90 	vmov	s15, r3
 8000ca0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ca4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8000ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb0:	ec53 2b17 	vmov	r2, r3, d7
 8000cb4:	4831      	ldr	r0, [pc, #196]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000cb6:	f00d f981 	bl	800dfbc <iprintf>
				printf("ADC temperature sensor response time : %f(us)\r\n", (float)temp_exec / 1000);
 8000cba:	4b31      	ldr	r3, [pc, #196]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cc6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8000cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd2:	ec53 2b17 	vmov	r2, r3, d7
 8000cd6:	482b      	ldr	r0, [pc, #172]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000cd8:	f00d f970 	bl	800dfbc <iprintf>
				printf("Neural Net Processing response time : %f(us)\r\n", (float)NN_exec / 1000);
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	ee07 3a90 	vmov	s15, r3
 8000ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ce8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8000cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf4:	ec53 2b17 	vmov	r2, r3, d7
 8000cf8:	4824      	ldr	r0, [pc, #144]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8000cfa:	f00d f95f 	bl	800dfbc <iprintf>
				printf("Total response time : %f(us)\r\n", (float)Total_exec / 1000);
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	ee07 3a90 	vmov	s15, r3
 8000d06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d0a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8000d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d16:	ec53 2b17 	vmov	r2, r3, d7
 8000d1a:	481e      	ldr	r0, [pc, #120]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8000d1c:	f00d f94e 	bl	800dfbc <iprintf>
				printf("--------------------------------------\r\n\r\n");
 8000d20:	481d      	ldr	r0, [pc, #116]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8000d22:	f00d f9d1 	bl	800e0c8 <puts>

				current_exec = 0;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
				temp_exec = 0;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
				voltage_exec =0;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
				NN_exec =0 ;
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
				Total_exec = 0;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
				counter_for_timing =0;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
			}
		}
	}

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0800ffe8 	.word	0x0800ffe8
 8000d58:	24001194 	.word	0x24001194
 8000d5c:	0800fff4 	.word	0x0800fff4
 8000d60:	24000cf0 	.word	0x24000cf0
 8000d64:	08010010 	.word	0x08010010
 8000d68:	08010014 	.word	0x08010014
 8000d6c:	24000cfc 	.word	0x24000cfc
 8000d70:	447a0000 	.word	0x447a0000
 8000d74:	0801003c 	.word	0x0801003c
 8000d78:	24000cf8 	.word	0x24000cf8
 8000d7c:	08010064 	.word	0x08010064
 8000d80:	24000cf4 	.word	0x24000cf4
 8000d84:	08010090 	.word	0x08010090
 8000d88:	24000d00 	.word	0x24000d00
 8000d8c:	080100c0 	.word	0x080100c0
 8000d90:	24000d04 	.word	0x24000d04
 8000d94:	080100f0 	.word	0x080100f0
 8000d98:	08010110 	.word	0x08010110

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f001 ff59 	bl	8002c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 f909 	bl	8000fbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000daa:	f000 f97f 	bl	80010ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dae:	f000 fde7 	bl	8001980 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000db2:	f000 f9a7 	bl	8001104 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000db6:	f000 fa7f 	bl	80012b8 <MX_ADC3_Init>
  MX_DAC1_Init();
 8000dba:	f000 faf1 	bl	80013a0 <MX_DAC1_Init>
  MX_I2C4_Init();
 8000dbe:	f000 fb21 	bl	8001404 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 8000dc2:	f000 fb5f 	bl	8001484 <MX_OCTOSPI1_Init>
  MX_TIM1_Init();
 8000dc6:	f000 fc13 	bl	80015f0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000dca:	f000 fc9f 	bl	800170c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dce:	f000 fd0d 	bl	80017ec <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000dd2:	f000 fd89 	bl	80018e8 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000dd6:	f000 fbb3 	bl	8001540 <MX_SPI5_Init>
  MX_TIM13_Init();
 8000dda:	f000 fd61 	bl	80018a0 <MX_TIM13_Init>
  MX_ADC2_Init();
 8000dde:	f000 fa07 	bl	80011f0 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(SPI5_NSS1_GPIO_Port, SPI5_NSS1_Pin, GPIO_PIN_SET); // deactivate
 8000de2:	2201      	movs	r2, #1
 8000de4:	2140      	movs	r1, #64	; 0x40
 8000de6:	4862      	ldr	r0, [pc, #392]	; (8000f70 <main+0x1d4>)
 8000de8:	f005 f928 	bl	800603c <HAL_GPIO_WritePin>

  model = (Model*)malloc(sizeof(Model));
 8000dec:	2008      	movs	r0, #8
 8000dee:	f00c fbd1 	bl	800d594 <malloc>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b5f      	ldr	r3, [pc, #380]	; (8000f74 <main+0x1d8>)
 8000df8:	601a      	str	r2, [r3, #0]
  Model_construct(model, linear_num);
 8000dfa:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <main+0x1d8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a5e      	ldr	r2, [pc, #376]	; (8000f78 <main+0x1dc>)
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fcb9 	bl	800077c <Model_construct>

  l1 = (Linear*)malloc(sizeof(Linear));
 8000e0a:	2014      	movs	r0, #20
 8000e0c:	f00c fbc2 	bl	800d594 <malloc>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b59      	ldr	r3, [pc, #356]	; (8000f7c <main+0x1e0>)
 8000e16:	601a      	str	r2, [r3, #0]
  l2 = (Linear*)malloc(sizeof(Linear));
 8000e18:	2014      	movs	r0, #20
 8000e1a:	f00c fbbb 	bl	800d594 <malloc>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <main+0x1e4>)
 8000e24:	601a      	str	r2, [r3, #0]
  l3 = (Linear*)malloc(sizeof(Linear));
 8000e26:	2014      	movs	r0, #20
 8000e28:	f00c fbb4 	bl	800d594 <malloc>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <main+0x1e8>)
 8000e32:	601a      	str	r2, [r3, #0]

  Linear_construct(l1, linear1_out_dim, linear1_in_dim, linear1_bias, RELU);
 8000e34:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <main+0x1e0>)
 8000e36:	6818      	ldr	r0, [r3, #0]
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <main+0x1ec>)
 8000e3a:	6819      	ldr	r1, [r3, #0]
 8000e3c:	4b53      	ldr	r3, [pc, #332]	; (8000f8c <main+0x1f0>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2300      	movs	r3, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <main+0x1f4>)
 8000e46:	f7ff fc71 	bl	800072c <Linear_construct>
  l1->weight = (float**)malloc(sizeof(float*) * linear1_out_dim);
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <main+0x1ec>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <main+0x1e0>)
 8000e52:	6814      	ldr	r4, [r2, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f00c fb9d 	bl	800d594 <malloc>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60a3      	str	r3, [r4, #8]
  for (int i = 0; i < linear1_out_dim; i++) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e00d      	b.n	8000e80 <main+0xe4>
  	l1->weight[i] = linear1_weight[i];
 8000e64:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <main+0x1e0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	4947      	ldr	r1, [pc, #284]	; (8000f94 <main+0x1f8>)
 8000e76:	440a      	add	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < linear1_out_dim; i++) {
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <main+0x1ec>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	dbec      	blt.n	8000e64 <main+0xc8>
  }
  Model_append(model, l1, 1);
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <main+0x1d8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a3b      	ldr	r2, [pc, #236]	; (8000f7c <main+0x1e0>)
 8000e90:	6811      	ldr	r1, [r2, #0]
 8000e92:	2201      	movs	r2, #1
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fc86 	bl	80007a6 <Model_append>

  Linear_construct(l2, linear2_out_dim, linear2_in_dim, linear2_bias, RELU);
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <main+0x1e4>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <main+0x1fc>)
 8000ea0:	6819      	ldr	r1, [r3, #0]
 8000ea2:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <main+0x200>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <main+0x204>)
 8000eac:	f7ff fc3e 	bl	800072c <Linear_construct>
  l2->weight = (float**)malloc(sizeof(float*) * linear2_out_dim);
 8000eb0:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <main+0x1fc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <main+0x1e4>)
 8000eb8:	6814      	ldr	r4, [r2, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f00c fb6a 	bl	800d594 <malloc>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60a3      	str	r3, [r4, #8]
  for (int i = 0; i < linear2_out_dim; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	e00d      	b.n	8000ee6 <main+0x14a>
  	l2->weight[i] = linear2_weight[i];
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <main+0x1e4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	0192      	lsls	r2, r2, #6
 8000eda:	4932      	ldr	r1, [pc, #200]	; (8000fa4 <main+0x208>)
 8000edc:	440a      	add	r2, r1
 8000ede:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < linear2_out_dim; i++) {
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <main+0x1fc>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbec      	blt.n	8000eca <main+0x12e>
  }
  Model_append(model, l2, 2);
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <main+0x1d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <main+0x1e4>)
 8000ef6:	6811      	ldr	r1, [r2, #0]
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc53 	bl	80007a6 <Model_append>

  Linear_construct(l3, linear3_out_dim, linear3_in_dim, linear3_bias, SIGMOID);
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <main+0x1e8>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <main+0x20c>)
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	4b28      	ldr	r3, [pc, #160]	; (8000fac <main+0x210>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <main+0x214>)
 8000f12:	f7ff fc0b 	bl	800072c <Linear_construct>
  l3->weight = (float**)malloc(sizeof(float*) * linear3_out_dim);
 8000f16:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <main+0x20c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <main+0x1e8>)
 8000f1e:	6814      	ldr	r4, [r2, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00c fb37 	bl	800d594 <malloc>
 8000f26:	4603      	mov	r3, r0
 8000f28:	60a3      	str	r3, [r4, #8]
  for (int i = 0; i < linear3_out_dim; i++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e00d      	b.n	8000f4c <main+0x1b0>
	  l3->weight[i] = linear3_weight[i];
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <main+0x1e8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	01d2      	lsls	r2, r2, #7
 8000f40:	491c      	ldr	r1, [pc, #112]	; (8000fb4 <main+0x218>)
 8000f42:	440a      	add	r2, r1
 8000f44:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < linear3_out_dim; i++) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <main+0x20c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dbec      	blt.n	8000f30 <main+0x194>
  }
  Model_append(model, l3, 3);
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <main+0x1d8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <main+0x1e8>)
 8000f5c:	6811      	ldr	r1, [r2, #0]
 8000f5e:	2203      	movs	r2, #3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fc20 	bl	80007a6 <Model_append>

  HAL_TIM_Base_Start_IT(&htim13);
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <main+0x21c>)
 8000f68:	f009 fcb4 	bl	800a8d4 <HAL_TIM_Base_Start_IT>
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <main+0x1d0>
 8000f6e:	bf00      	nop
 8000f70:	58021400 	.word	0x58021400
 8000f74:	24000fb0 	.word	0x24000fb0
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	24001198 	.word	0x24001198
 8000f80:	24001000 	.word	0x24001000
 8000f84:	24001194 	.word	0x24001194
 8000f88:	24000008 	.word	0x24000008
 8000f8c:	24000004 	.word	0x24000004
 8000f90:	2400010c 	.word	0x2400010c
 8000f94:	2400000c 	.word	0x2400000c
 8000f98:	24000150 	.word	0x24000150
 8000f9c:	2400014c 	.word	0x2400014c
 8000fa0:	24000954 	.word	0x24000954
 8000fa4:	24000154 	.word	0x24000154
 8000fa8:	240009d8 	.word	0x240009d8
 8000fac:	240009d4 	.word	0x240009d4
 8000fb0:	24000adc 	.word	0x24000adc
 8000fb4:	240009dc 	.word	0x240009dc
 8000fb8:	240010f4 	.word	0x240010f4

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b09c      	sub	sp, #112	; 0x70
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	224c      	movs	r2, #76	; 0x4c
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f00c faf2 	bl	800d5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00c faec 	bl	800d5b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fdc:	2004      	movs	r0, #4
 8000fde:	f006 f847 	bl	8007070 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <SystemClock_Config+0xe8>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <SystemClock_Config+0xe8>)
 8000fec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <SystemClock_Config+0xe8>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ffe:	bf00      	nop
 8001000:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <SystemClock_Config+0xe8>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800100c:	d1f8      	bne.n	8001000 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <SystemClock_Config+0xec>)
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	4a24      	ldr	r2, [pc, #144]	; (80010a8 <SystemClock_Config+0xec>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101e:	2301      	movs	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	2302      	movs	r3, #2
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001030:	2305      	movs	r3, #5
 8001032:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001034:	236e      	movs	r3, #110	; 0x6e
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001040:	2302      	movs	r3, #2
 8001042:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001044:	2308      	movs	r3, #8
 8001046:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001048:	2300      	movs	r3, #0
 800104a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4618      	mov	r0, r3
 8001056:	f006 f865 	bl	8007124 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001060:	f000 ffde 	bl	8002020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	233f      	movs	r3, #63	; 0x3f
 8001066:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2303      	movs	r3, #3
 800106a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001070:	2308      	movs	r3, #8
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001074:	2340      	movs	r3, #64	; 0x40
 8001076:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800107c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001080:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001082:	2340      	movs	r3, #64	; 0x40
 8001084:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2103      	movs	r1, #3
 800108a:	4618      	mov	r0, r3
 800108c:	f006 fbd8 	bl	8007840 <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001096:	f000 ffc3 	bl	8002020 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3770      	adds	r7, #112	; 0x70
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	58024800 	.word	0x58024800
 80010a8:	58024400 	.word	0x58024400

080010ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0ae      	sub	sp, #184	; 0xb8
 80010b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	22b4      	movs	r2, #180	; 0xb4
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00c fa7b 	bl	800d5b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80010c2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80010c4:	2305      	movs	r3, #5
 80010c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80010c8:	2350      	movs	r3, #80	; 0x50
 80010ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80010cc:	2305      	movs	r3, #5
 80010ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4618      	mov	r0, r3
 80010ee:	f006 ff33 	bl	8007f58 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80010f8:	f000 ff92 	bl	8002020 <Error_Handler>
  }
}
 80010fc:	bf00      	nop
 80010fe:	37b8      	adds	r7, #184	; 0xb8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2224      	movs	r2, #36	; 0x24
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f00c fa49 	bl	800d5b4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001122:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001124:	4a31      	ldr	r2, [pc, #196]	; (80011ec <MX_ADC1_Init+0xe8>)
 8001126:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001128:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800112e:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001130:	220c      	movs	r2, #12
 8001132:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800113c:	2204      	movs	r2, #4
 800113e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001140:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001148:	2200      	movs	r2, #0
 800114a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800114e:	2201      	movs	r2, #1
 8001150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800115c:	2200      	movs	r2, #0
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001162:	2200      	movs	r2, #0
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001168:	2200      	movs	r2, #0
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800116e:	2200      	movs	r2, #0
 8001170:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001180:	4819      	ldr	r0, [pc, #100]	; (80011e8 <MX_ADC1_Init+0xe4>)
 8001182:	f002 f921 	bl	80033c8 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 ff48 	bl	8002020 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	4619      	mov	r1, r3
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_ADC1_Init+0xe4>)
 800119c:	f003 fd00 	bl	8004ba0 <HAL_ADCEx_MultiModeConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011a6:	f000 ff3b 	bl	8002020 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011aa:	2301      	movs	r3, #1
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ae:	2306      	movs	r3, #6
 80011b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011ba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011bc:	2304      	movs	r3, #4
 80011be:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_ADC1_Init+0xe4>)
 80011d0:	f002 fd02 	bl	8003bd8 <HAL_ADC_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80011da:	f000 ff21 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3730      	adds	r7, #48	; 0x30
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	24001008 	.word	0x24001008
 80011ec:	40022000 	.word	0x40022000

080011f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2224      	movs	r2, #36	; 0x24
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00c f9d9 	bl	800d5b4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001204:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <MX_ADC2_Init+0xc0>)
 8001206:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_ADC2_Init+0xbc>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_ADC2_Init+0xbc>)
 800121c:	2204      	movs	r2, #4
 800121e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ADC2_Init+0xbc>)
 800122e:	2201      	movs	r2, #1
 8001230:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ADC2_Init+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001242:	2200      	movs	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_ADC2_Init+0xbc>)
 800124e:	2200      	movs	r2, #0
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001254:	2200      	movs	r2, #0
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_ADC2_Init+0xbc>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001262:	f002 f8b1 	bl	80033c8 <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800126c:	f000 fed8 	bl	8002020 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_ADC2_Init+0xc4>)
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001274:	2306      	movs	r3, #6
 8001276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800127c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001280:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001282:	2304      	movs	r3, #4
 8001284:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_ADC2_Init+0xbc>)
 8001296:	f002 fc9f 	bl	8003bd8 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80012a0:	f000 febe 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24000edc 	.word	0x24000edc
 80012b0:	40022100 	.word	0x40022100
 80012b4:	04300002 	.word	0x04300002

080012b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2224      	movs	r2, #36	; 0x24
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f00c f975 	bl	800d5b4 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80012ca:	4b33      	ldr	r3, [pc, #204]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012cc:	4a33      	ldr	r2, [pc, #204]	; (800139c <MX_ADC3_Init+0xe4>)
 80012ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012d6:	4b30      	ldr	r3, [pc, #192]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012d8:	2208      	movs	r2, #8
 80012da:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80012dc:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e2:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <MX_ADC3_Init+0xe0>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = ENABLE;
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.NbrOfDiscConversion = 1;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <MX_ADC3_Init+0xe0>)
 800130a:	2201      	movs	r2, #1
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001310:	2200      	movs	r2, #0
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001316:	2200      	movs	r2, #0
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_ADC3_Init+0xe0>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001324:	2200      	movs	r2, #0
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_ADC3_Init+0xe0>)
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001330:	2200      	movs	r2, #0
 8001332:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001336:	2200      	movs	r2, #0
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_ADC3_Init+0xe0>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001342:	4815      	ldr	r0, [pc, #84]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001344:	f002 f840 	bl	80033c8 <HAL_ADC_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 800134e:	f000 fe67 	bl	8002020 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001352:	2301      	movs	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2306      	movs	r3, #6
 8001358:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_640CYCLES_5;
 800135a:	2307      	movs	r3, #7
 800135c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001362:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001364:	2304      	movs	r3, #4
 8001366:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_ADC3_Init+0xe0>)
 8001382:	f002 fc29 	bl	8003bd8 <HAL_ADC_ConfigChannel>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 800138c:	f000 fe48 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	24001080 	.word	0x24001080
 800139c:	58026000 	.word	0x58026000

080013a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2224      	movs	r2, #36	; 0x24
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00c f901 	bl	800d5b4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_DAC1_Init+0x5c>)
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <MX_DAC1_Init+0x60>)
 80013b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80013b8:	4810      	ldr	r0, [pc, #64]	; (80013fc <MX_DAC1_Init+0x5c>)
 80013ba:	f003 fde2 	bl	8004f82 <HAL_DAC_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80013c4:	f000 fe2c 	bl	8002020 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2210      	movs	r2, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_DAC1_Init+0x5c>)
 80013e4:	f003 fdf0 	bl	8004fc8 <HAL_DAC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013ee:	f000 fe17 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	24000e38 	.word	0x24000e38
 8001400:	40007400 	.word	0x40007400

08001404 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_I2C4_Init+0x74>)
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <MX_I2C4_Init+0x78>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_I2C4_Init+0x74>)
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <MX_I2C4_Init+0x7c>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_I2C4_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <MX_I2C4_Init+0x74>)
 800141c:	2201      	movs	r2, #1
 800141e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_I2C4_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_I2C4_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_I2C4_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_I2C4_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_I2C4_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <MX_I2C4_Init+0x74>)
 8001440:	f004 fe16 	bl	8006070 <HAL_I2C_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800144a:	f000 fde9 	bl	8002020 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144e:	2100      	movs	r1, #0
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <MX_I2C4_Init+0x74>)
 8001452:	f004 fe9d 	bl	8006190 <HAL_I2CEx_ConfigAnalogFilter>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800145c:	f000 fde0 	bl	8002020 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001460:	2100      	movs	r1, #0
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_I2C4_Init+0x74>)
 8001464:	f004 fedf 	bl	8006226 <HAL_I2CEx_ConfigDigitalFilter>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800146e:	f000 fdd7 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000d18 	.word	0x24000d18
 800147c:	58001c00 	.word	0x58001c00
 8001480:	60404e72 	.word	0x60404e72

08001484 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <MX_OCTOSPI1_Init+0xb8>)
 800149e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014b4:	2220      	movs	r2, #32
 80014b6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80014d6:	4b18      	ldr	r3, [pc, #96]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 1;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014f0:	2208      	movs	r2, #8
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 8001502:	f004 fedd 	bl	80062c0 <HAL_OSPI_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_OCTOSPI1_Init+0x8c>
  {
    Error_Handler();
 800150c:	f000 fd88 	bl	8002020 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001510:	2301      	movs	r3, #1
 8001512:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_OCTOSPI1_Init+0xb4>)
 8001522:	f004 ff9d 	bl	8006460 <HAL_OSPIM_Config>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_OCTOSPI1_Init+0xac>
  {
    Error_Handler();
 800152c:	f000 fd78 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	24000f4c 	.word	0x24000f4c
 800153c:	52005000 	.word	0x52005000

08001540 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001546:	4a29      	ldr	r2, [pc, #164]	; (80015ec <MX_SPI5_Init+0xac>)
 8001548:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_SPI5_Init+0xa8>)
 800154c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001550:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001554:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001558:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800155a:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_SPI5_Init+0xa8>)
 800155c:	220f      	movs	r2, #15
 800155e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_SPI5_Init+0xa8>)
 800156e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001572:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001576:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800157a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_SPI5_Init+0xa8>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI5_Init+0xa8>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001590:	2200      	movs	r2, #0
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI5_Init+0xa8>)
 8001596:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI5_Init+0xa8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_SPI5_Init+0xa8>)
 80015d4:	f008 fd52 	bl	800a07c <HAL_SPI_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SPI5_Init+0xa2>
  {
    Error_Handler();
 80015de:	f000 fd1f 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24000d64 	.word	0x24000d64
 80015ec:	40015000 	.word	0x40015000

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b096      	sub	sp, #88	; 0x58
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	222c      	movs	r2, #44	; 0x2c
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00b ffc9 	bl	800d5b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <MX_TIM1_Init+0x114>)
 8001624:	4a38      	ldr	r2, [pc, #224]	; (8001708 <MX_TIM1_Init+0x118>)
 8001626:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <MX_TIM1_Init+0x114>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <MX_TIM1_Init+0x114>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <MX_TIM1_Init+0x114>)
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <MX_TIM1_Init+0x114>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <MX_TIM1_Init+0x114>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <MX_TIM1_Init+0x114>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800164e:	482d      	ldr	r0, [pc, #180]	; (8001704 <MX_TIM1_Init+0x114>)
 8001650:	f009 f9c6 	bl	800a9e0 <HAL_TIM_PWM_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800165a:	f000 fce1 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800166e:	4619      	mov	r1, r3
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <MX_TIM1_Init+0x114>)
 8001672:	f009 ffd7 	bl	800b624 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800167c:	f000 fcd0 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	; 0x60
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800169c:	220c      	movs	r2, #12
 800169e:	4619      	mov	r1, r3
 80016a0:	4818      	ldr	r0, [pc, #96]	; (8001704 <MX_TIM1_Init+0x114>)
 80016a2:	f009 fb13 	bl	800accc <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80016ac:	f000 fcb8 	bl	8002020 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	; (8001704 <MX_TIM1_Init+0x114>)
 80016e6:	f00a f839 	bl	800b75c <HAL_TIMEx_ConfigBreakDeadTime>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80016f0:	f000 fc96 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <MX_TIM1_Init+0x114>)
 80016f6:	f000 ffdd 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 80016fa:	bf00      	nop
 80016fc:	3758      	adds	r7, #88	; 0x58
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	24001148 	.word	0x24001148
 8001708:	40010000 	.word	0x40010000

0800170c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08a      	sub	sp, #40	; 0x28
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <MX_TIM4_Init+0xd8>)
 8001732:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <MX_TIM4_Init+0xdc>)
 8001734:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_TIM4_Init+0xd8>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <MX_TIM4_Init+0xd8>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_TIM4_Init+0xd8>)
 8001744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001748:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <MX_TIM4_Init+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <MX_TIM4_Init+0xd8>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001756:	4823      	ldr	r0, [pc, #140]	; (80017e4 <MX_TIM4_Init+0xd8>)
 8001758:	f009 f942 	bl	800a9e0 <HAL_TIM_PWM_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001762:	f000 fc5d 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176e:	f107 031c 	add.w	r3, r7, #28
 8001772:	4619      	mov	r1, r3
 8001774:	481b      	ldr	r0, [pc, #108]	; (80017e4 <MX_TIM4_Init+0xd8>)
 8001776:	f009 ff55 	bl	800b624 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001780:	f000 fc4e 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001784:	2360      	movs	r3, #96	; 0x60
 8001786:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	2204      	movs	r2, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_TIM4_Init+0xd8>)
 800179c:	f009 fa96 	bl	800accc <HAL_TIM_PWM_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80017a6:	f000 fc3b 	bl	8002020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017aa:	463b      	mov	r3, r7
 80017ac:	2208      	movs	r2, #8
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <MX_TIM4_Init+0xd8>)
 80017b2:	f009 fa8b 	bl	800accc <HAL_TIM_PWM_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80017bc:	f000 fc30 	bl	8002020 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017c0:	463b      	mov	r3, r7
 80017c2:	220c      	movs	r2, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM4_Init+0xd8>)
 80017c8:	f009 fa80 	bl	800accc <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80017d2:	f000 fc25 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM4_Init+0xd8>)
 80017d8:	f000 ff6c 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24000dec 	.word	0x24000dec
 80017e8:	40000800 	.word	0x40000800

080017ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fe:	463b      	mov	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_TIM5_Init+0xac>)
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <MX_TIM5_Init+0xb0>)
 8001814:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <MX_TIM5_Init+0xac>)
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_TIM5_Init+0xac>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_TIM5_Init+0xac>)
 8001824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001828:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_TIM5_Init+0xac>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_TIM5_Init+0xac>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001836:	4818      	ldr	r0, [pc, #96]	; (8001898 <MX_TIM5_Init+0xac>)
 8001838:	f009 f8d2 	bl	800a9e0 <HAL_TIM_PWM_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001842:	f000 fbed 	bl	8002020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <MX_TIM5_Init+0xac>)
 8001856:	f009 fee5 	bl	800b624 <HAL_TIMEx_MasterConfigSynchronization>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001860:	f000 fbde 	bl	8002020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001864:	2360      	movs	r3, #96	; 0x60
 8001866:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001874:	463b      	mov	r3, r7
 8001876:	2200      	movs	r2, #0
 8001878:	4619      	mov	r1, r3
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <MX_TIM5_Init+0xac>)
 800187c:	f009 fa26 	bl	800accc <HAL_TIM_PWM_ConfigChannel>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001886:	f000 fbcb 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <MX_TIM5_Init+0xac>)
 800188c:	f000 ff12 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	24000fb4 	.word	0x24000fb4
 800189c:	40000c00 	.word	0x40000c00

080018a0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <MX_TIM13_Init+0x44>)
 80018a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275 - 1;
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018ac:	f44f 7289 	mov.w	r2, #274	; 0x112
 80018b0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018be:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018c8:	2280      	movs	r2, #128	; 0x80
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_TIM13_Init+0x40>)
 80018ce:	f008 ffaa 	bl	800a826 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80018d8:	f000 fba2 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	240010f4 	.word	0x240010f4
 80018e4:	40001c00 	.word	0x40001c00

080018e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MX_USART3_UART_Init+0x90>)
 80018ee:	4a23      	ldr	r2, [pc, #140]	; (800197c <MX_USART3_UART_Init+0x94>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_USART3_UART_Init+0x90>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_USART3_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_USART3_UART_Init+0x90>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_USART3_UART_Init+0x90>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_USART3_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001930:	4811      	ldr	r0, [pc, #68]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001932:	f009 ffaf 	bl	800b894 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800193c:	f000 fb70 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001940:	2100      	movs	r1, #0
 8001942:	480d      	ldr	r0, [pc, #52]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001944:	f00b fbeb 	bl	800d11e <HAL_UARTEx_SetTxFifoThreshold>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800194e:	f000 fb67 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4808      	ldr	r0, [pc, #32]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001956:	f00b fc20 	bl	800d19a <HAL_UARTEx_SetRxFifoThreshold>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001960:	f000 fb5e 	bl	8002020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_USART3_UART_Init+0x90>)
 8001966:	f00b fba1 	bl	800d0ac <HAL_UARTEx_DisableFifoMode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001970:	f000 fb56 	bl	8002020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	24000e4c 	.word	0x24000e4c
 800197c:	40004800 	.word	0x40004800

08001980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4bbf      	ldr	r3, [pc, #764]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	4abd      	ldr	r2, [pc, #756]	; (8001c94 <MX_GPIO_Init+0x314>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a6:	4bbb      	ldr	r3, [pc, #748]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b4:	4bb7      	ldr	r3, [pc, #732]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ba:	4ab6      	ldr	r2, [pc, #728]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c4:	4bb3      	ldr	r3, [pc, #716]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	4bb0      	ldr	r3, [pc, #704]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	4aae      	ldr	r2, [pc, #696]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019da:	f043 0308 	orr.w	r3, r3, #8
 80019de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e2:	4bac      	ldr	r3, [pc, #688]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	4ba8      	ldr	r3, [pc, #672]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	4aa7      	ldr	r2, [pc, #668]	; (8001c94 <MX_GPIO_Init+0x314>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a00:	4ba4      	ldr	r3, [pc, #656]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0e:	4ba1      	ldr	r3, [pc, #644]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	4a9f      	ldr	r2, [pc, #636]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a1e:	4b9d      	ldr	r3, [pc, #628]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	4b99      	ldr	r3, [pc, #612]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	4a98      	ldr	r2, [pc, #608]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a3c:	4b95      	ldr	r3, [pc, #596]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4a:	4b92      	ldr	r3, [pc, #584]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	4a90      	ldr	r2, [pc, #576]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a5a:	4b8e      	ldr	r3, [pc, #568]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a68:	4b8a      	ldr	r3, [pc, #552]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	4a89      	ldr	r2, [pc, #548]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a78:	4b86      	ldr	r3, [pc, #536]	; (8001c94 <MX_GPIO_Init+0x314>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f240 4102 	movw	r1, #1026	; 0x402
 8001a8c:	4882      	ldr	r0, [pc, #520]	; (8001c98 <MX_GPIO_Init+0x318>)
 8001a8e:	f004 fad5 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI5_NSS2_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 61d1 	mov.w	r1, #1672	; 0x688
 8001a98:	4880      	ldr	r0, [pc, #512]	; (8001c9c <MX_GPIO_Init+0x31c>)
 8001a9a:	f004 facf 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|SPI5_NSS3_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f248 1138 	movw	r1, #33080	; 0x8138
 8001aa4:	487e      	ldr	r0, [pc, #504]	; (8001ca0 <MX_GPIO_Init+0x320>)
 8001aa6:	f004 fac9 	bl	800603c <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_NSS1_Pin|STMOD_20_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8001ab0:	487c      	ldr	r0, [pc, #496]	; (8001ca4 <MX_GPIO_Init+0x324>)
 8001ab2:	f004 fac3 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_14, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001abc:	487a      	ldr	r0, [pc, #488]	; (8001ca8 <MX_GPIO_Init+0x328>)
 8001abe:	f004 fabd 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210c      	movs	r1, #12
 8001ac6:	4879      	ldr	r0, [pc, #484]	; (8001cac <MX_GPIO_Init+0x32c>)
 8001ac8:	f004 fab8 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2140      	movs	r1, #64	; 0x40
 8001ad0:	4877      	ldr	r0, [pc, #476]	; (8001cb0 <MX_GPIO_Init+0x330>)
 8001ad2:	f004 fab3 	bl	800603c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_B6_Pin LCD_B7_Pin LCD_G0_Pin LCD_G1_Pin */
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001ad6:	f240 3303 	movw	r3, #771	; 0x303
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ae8:	230e      	movs	r3, #14
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	4619      	mov	r1, r3
 8001af2:	486d      	ldr	r0, [pc, #436]	; (8001ca8 <MX_GPIO_Init+0x328>)
 8001af4:	f004 f8fa 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_TX_Pin FDCAN2_RX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001af8:	2360      	movs	r3, #96	; 0x60
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001b08:	2309      	movs	r3, #9
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	4865      	ldr	r0, [pc, #404]	; (8001ca8 <MX_GPIO_Init+0x328>)
 8001b14:	f004 f8ea 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO7_Pin OCSPI2_IO5_Pin OCSPI2_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8001b18:	f640 0303 	movw	r3, #2051	; 0x803
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b32:	4619      	mov	r1, r3
 8001b34:	485a      	ldr	r0, [pc, #360]	; (8001ca0 <MX_GPIO_Init+0x320>)
 8001b36:	f004 f8d9 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO6_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8001b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b54:	4619      	mov	r1, r3
 8001b56:	4852      	ldr	r0, [pc, #328]	; (8001ca0 <MX_GPIO_Init+0x320>)
 8001b58:	f004 f8c8 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G7_Pin LCD_B1_Pin LCD_B2_Pin */
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001b5c:	2349      	movs	r3, #73	; 0x49
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4848      	ldr	r0, [pc, #288]	; (8001c98 <MX_GPIO_Init+0x318>)
 8001b78:	f004 f8b8 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 8001b7c:	f240 4302 	movw	r3, #1026	; 0x402
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b92:	4619      	mov	r1, r3
 8001b94:	4840      	ldr	r0, [pc, #256]	; (8001c98 <MX_GPIO_Init+0x318>)
 8001b96:	f004 f8a9 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001b9a:	2330      	movs	r3, #48	; 0x30
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001baa:	230a      	movs	r3, #10
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4839      	ldr	r0, [pc, #228]	; (8001c9c <MX_GPIO_Init+0x31c>)
 8001bb6:	f004 f899 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_NSS2_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = SPI5_NSS2_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001bba:	f44f 63d1 	mov.w	r3, #1672	; 0x688
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4832      	ldr	r0, [pc, #200]	; (8001c9c <MX_GPIO_Init+0x31c>)
 8001bd4:	f004 f88a 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_R0_Pin LCD_R6_Pin LCD_B4_Pin LCD_DE_Pin
                           LCD_R7_Pin LCD_G3_Pin */
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001bd8:	f64b 0303 	movw	r3, #47107	; 0xb803
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R7_Pin|LCD_G3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bea:	230e      	movs	r3, #14
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4829      	ldr	r0, [pc, #164]	; (8001c9c <MX_GPIO_Init+0x31c>)
 8001bf6:	f004 f879 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_OVCR_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 8001bfa:	f242 0304 	movw	r3, #8196	; 0x2004
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <MX_GPIO_Init+0x334>)
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4824      	ldr	r0, [pc, #144]	; (8001ca0 <MX_GPIO_Init+0x320>)
 8001c10:	f004 f86c 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO7_Pin OCSPI1_IO5_Pin OCSPI1_IO4_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001c14:	23b0      	movs	r3, #176	; 0xb0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001c24:	230a      	movs	r3, #10
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481a      	ldr	r0, [pc, #104]	; (8001c98 <MX_GPIO_Init+0x318>)
 8001c30:	f004 f85c 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001c34:	2304      	movs	r3, #4
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c44:	230c      	movs	r3, #12
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4812      	ldr	r0, [pc, #72]	; (8001c98 <MX_GPIO_Init+0x318>)
 8001c50:	f004 f84c 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_CK_Pin SDIO1_D3_Pin SDIO1_D2_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin */
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 8001c54:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDIO1_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c66:	230c      	movs	r3, #12
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480e      	ldr	r0, [pc, #56]	; (8001cac <MX_GPIO_Init+0x32c>)
 8001c72:	f004 f83b 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001c76:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001c88:	2309      	movs	r3, #9
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c90:	e012      	b.n	8001cb8 <MX_GPIO_Init+0x338>
 8001c92:	bf00      	nop
 8001c94:	58024400 	.word	0x58024400
 8001c98:	58020c00 	.word	0x58020c00
 8001c9c:	58021000 	.word	0x58021000
 8001ca0:	58021800 	.word	0x58021800
 8001ca4:	58021400 	.word	0x58021400
 8001ca8:	58020400 	.word	0x58020400
 8001cac:	58020800 	.word	0x58020800
 8001cb0:	58021c00 	.word	0x58021c00
 8001cb4:	11110000 	.word	0x11110000
 8001cb8:	4619      	mov	r1, r3
 8001cba:	48bb      	ldr	r0, [pc, #748]	; (8001fa8 <MX_GPIO_Init+0x628>)
 8001cbc:	f004 f816 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B3_Pin */
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001cd2:	230d      	movs	r3, #13
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	48b3      	ldr	r0, [pc, #716]	; (8001fac <MX_GPIO_Init+0x62c>)
 8001cde:	f004 f805 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_DP_Pin USB_FS_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 8001ce2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	48ac      	ldr	r0, [pc, #688]	; (8001fac <MX_GPIO_Init+0x62c>)
 8001cfc:	f003 fff6 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_button_B2_used_for_wakeup_Pin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 8001d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	48a6      	ldr	r0, [pc, #664]	; (8001fb0 <MX_GPIO_Init+0x630>)
 8001d16:	f003 ffe9 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_IO2_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d32:	4619      	mov	r1, r3
 8001d34:	489f      	ldr	r0, [pc, #636]	; (8001fb4 <MX_GPIO_Init+0x634>)
 8001d36:	f003 ffd9 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001d3a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4c:	230e      	movs	r3, #14
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d54:	4619      	mov	r1, r3
 8001d56:	4898      	ldr	r0, [pc, #608]	; (8001fb8 <MX_GPIO_Init+0x638>)
 8001d58:	f003 ffc8 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO6_Pin OCSPI2_NCS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8001d5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	4619      	mov	r1, r3
 8001d78:	488f      	ldr	r0, [pc, #572]	; (8001fb8 <MX_GPIO_Init+0x638>)
 8001d7a:	f003 ffb7 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001d90:	230a      	movs	r3, #10
 8001d92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4884      	ldr	r0, [pc, #528]	; (8001fac <MX_GPIO_Init+0x62c>)
 8001d9c:	f003 ffa6 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin SPI5_NSS3_Pin MEMS_LED_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|SPI5_NSS3_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001da0:	f248 1338 	movw	r3, #33080	; 0x8138
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db6:	4619      	mov	r1, r3
 8001db8:	487f      	ldr	r0, [pc, #508]	; (8001fb8 <MX_GPIO_Init+0x638>)
 8001dba:	f003 ff97 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G4_Pin LCD_R5_Pin LCD_R3_Pin LCD_R2_Pin
                           LCD_R4_Pin LCD_R1_Pin */
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001dbe:	f648 7308 	movw	r3, #36616	; 0x8f08
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_R4_Pin|LCD_R1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd0:	230e      	movs	r3, #14
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4873      	ldr	r0, [pc, #460]	; (8001fa8 <MX_GPIO_Init+0x628>)
 8001ddc:	f003 ff86 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_G6_Pin LCD_HSYNC_Pin */
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 8001de0:	23c0      	movs	r3, #192	; 0xc0
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df0:	230e      	movs	r3, #14
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	486d      	ldr	r0, [pc, #436]	; (8001fb0 <MX_GPIO_Init+0x630>)
 8001dfc:	f003 ff76 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_SD_A_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 8001e00:	2340      	movs	r3, #64	; 0x40
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e10:	2306      	movs	r3, #6
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4866      	ldr	r0, [pc, #408]	; (8001fb4 <MX_GPIO_Init+0x634>)
 8001e1c:	f003 ff66 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI2_IO1_Pin OCSPI2_IO0_Pin OCSPI2_IO2_Pin OCSPI2_CLK_Pin
                           OCSPI2_IO3_Pin OCSPI2_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 8001e20:	f241 031f 	movw	r3, #4127	; 0x101f
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCSPI2_IO3_Pin|OCSPI2_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001e32:	2309      	movs	r3, #9
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	485f      	ldr	r0, [pc, #380]	; (8001fbc <MX_GPIO_Init+0x63c>)
 8001e3e:	f003 ff55 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_NSS1_Pin STMOD_20_Pin */
  GPIO_InitStruct.Pin = SPI5_NSS1_Pin|STMOD_20_Pin;
 8001e42:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4858      	ldr	r0, [pc, #352]	; (8001fbc <MX_GPIO_Init+0x63c>)
 8001e5c:	f003 ff46 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e60:	2320      	movs	r3, #32
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <MX_GPIO_Init+0x640>)
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	4852      	ldr	r0, [pc, #328]	; (8001fbc <MX_GPIO_Init+0x63c>)
 8001e74:	f003 ff3a 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OCSPI1_IO3_Pin OCSPI1_IO1_Pin */
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO1_Pin;
 8001e78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001e8a:	2309      	movs	r3, #9
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	484b      	ldr	r0, [pc, #300]	; (8001fc4 <MX_GPIO_Init+0x644>)
 8001e96:	f003 ff29 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001e9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4845      	ldr	r0, [pc, #276]	; (8001fc8 <MX_GPIO_Init+0x648>)
 8001eb4:	f003 ff1a 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD1_Pin RMII_RXD0_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8001eb8:	2332      	movs	r3, #50	; 0x32
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ec8:	230b      	movs	r3, #11
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4837      	ldr	r0, [pc, #220]	; (8001fb0 <MX_GPIO_Init+0x630>)
 8001ed4:	f003 ff0a 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_RX_ER_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8001ed8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eea:	230b      	movs	r3, #11
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4834      	ldr	r0, [pc, #208]	; (8001fc8 <MX_GPIO_Init+0x648>)
 8001ef6:	f003 fef9 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED2_Pin USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 8001efa:	230c      	movs	r3, #12
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <MX_GPIO_Init+0x630>)
 8001f12:	f003 feeb 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B5_Pin LCD_VSYNC_Pin LCD_G2_Pin */
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 8001f16:	2358      	movs	r3, #88	; 0x58
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f26:	230e      	movs	r3, #14
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	481e      	ldr	r0, [pc, #120]	; (8001fac <MX_GPIO_Init+0x62c>)
 8001f32:	f003 fedb 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_CRS_DV_Pin RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8001f36:	2386      	movs	r3, #134	; 0x86
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f46:	230b      	movs	r3, #11
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4816      	ldr	r0, [pc, #88]	; (8001fac <MX_GPIO_Init+0x62c>)
 8001f52:	f003 fecb 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_GPIO_Init+0x640>)
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4812      	ldr	r0, [pc, #72]	; (8001fb4 <MX_GPIO_Init+0x634>)
 8001f6c:	f003 febe 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f76:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_GPIO_Init+0x640>)
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <MX_GPIO_Init+0x628>)
 8001f86:	f003 feb1 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f9a:	2309      	movs	r3, #9
 8001f9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	e012      	b.n	8001fcc <MX_GPIO_Init+0x64c>
 8001fa6:	bf00      	nop
 8001fa8:	58021c00 	.word	0x58021c00
 8001fac:	58020000 	.word	0x58020000
 8001fb0:	58020800 	.word	0x58020800
 8001fb4:	58021000 	.word	0x58021000
 8001fb8:	58021800 	.word	0x58021800
 8001fbc:	58021400 	.word	0x58021400
 8001fc0:	11110000 	.word	0x11110000
 8001fc4:	58020c00 	.word	0x58020c00
 8001fc8:	58020400 	.word	0x58020400
 8001fcc:	4812      	ldr	r0, [pc, #72]	; (8002018 <MX_GPIO_Init+0x698>)
 8001fce:	f003 fe8d 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : OCSPI1_DQS_Pin */
  GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <MX_GPIO_Init+0x69c>)
 8001fee:	f003 fe7d 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001ff2:	2340      	movs	r3, #64	; 0x40
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffe:	2300      	movs	r3, #0
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <MX_GPIO_Init+0x698>)
 800200a:	f003 fe6f 	bl	8005cec <HAL_GPIO_Init>

}
 800200e:	bf00      	nop
 8002010:	3738      	adds	r7, #56	; 0x38
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	58021c00 	.word	0x58021c00
 800201c:	58020400 	.word	0x58020400

08002020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002024:	b672      	cpsid	i
}
 8002026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002028:	e7fe      	b.n	8002028 <Error_Handler+0x8>
	...

0800202c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_MspInit+0x30>)
 8002034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002038:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_MspInit+0x30>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_MspInit+0x30>)
 8002044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	58024400 	.word	0x58024400

08002060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b090      	sub	sp, #64	; 0x40
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a66      	ldr	r2, [pc, #408]	; (8002218 <HAL_ADC_MspInit+0x1b8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d148      	bne.n	8002114 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002082:	4b66      	ldr	r3, [pc, #408]	; (800221c <HAL_ADC_MspInit+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	4a64      	ldr	r2, [pc, #400]	; (800221c <HAL_ADC_MspInit+0x1bc>)
 800208a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800208c:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_ADC_MspInit+0x1bc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10e      	bne.n	80020b2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002094:	4b62      	ldr	r3, [pc, #392]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800209a:	4a61      	ldr	r2, [pc, #388]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020a4:	4b5e      	ldr	r3, [pc, #376]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	4a59      	ldr	r2, [pc, #356]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c2:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d6:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020e0:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	623b      	str	r3, [r7, #32]
 80020ec:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 80020ee:	2301      	movs	r3, #1
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020f2:	2303      	movs	r3, #3
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 80020fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fe:	4619      	mov	r1, r3
 8002100:	4848      	ldr	r0, [pc, #288]	; (8002224 <HAL_ADC_MspInit+0x1c4>)
 8002102:	f003 fdf3 	bl	8005cec <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8002106:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800210a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800210e:	f000 fe59 	bl	8002dc4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002112:	e07c      	b.n	800220e <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a43      	ldr	r2, [pc, #268]	; (8002228 <HAL_ADC_MspInit+0x1c8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d12d      	bne.n	800217a <HAL_ADC_MspInit+0x11a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800211e:	4b3f      	ldr	r3, [pc, #252]	; (800221c <HAL_ADC_MspInit+0x1bc>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_ADC_MspInit+0x1bc>)
 8002126:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <HAL_ADC_MspInit+0x1bc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10e      	bne.n	800214e <HAL_ADC_MspInit+0xee>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002132:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002136:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002138:	f043 0320 	orr.w	r3, r3, #32
 800213c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002140:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	4b34      	ldr	r3, [pc, #208]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002154:	4a32      	ldr	r2, [pc, #200]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800216c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002170:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002174:	f000 fe26 	bl	8002dc4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8002178:	e049      	b.n	800220e <HAL_ADC_MspInit+0x1ae>
  else if(hadc->Instance==ADC3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2b      	ldr	r2, [pc, #172]	; (800222c <HAL_ADC_MspInit+0x1cc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d144      	bne.n	800220e <HAL_ADC_MspInit+0x1ae>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218a:	4a25      	ldr	r2, [pc, #148]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 800218c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002190:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 8002196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <HAL_ADC_MspInit+0x1c0>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80021de:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80021e2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80021e6:	f000 fded 	bl	8002dc4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80021ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80021ee:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80021f2:	f000 fde7 	bl	8002dc4 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 80021f6:	2304      	movs	r3, #4
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fa:	2303      	movs	r3, #3
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002206:	4619      	mov	r1, r3
 8002208:	4809      	ldr	r0, [pc, #36]	; (8002230 <HAL_ADC_MspInit+0x1d0>)
 800220a:	f003 fd6f 	bl	8005cec <HAL_GPIO_Init>
}
 800220e:	bf00      	nop
 8002210:	3740      	adds	r7, #64	; 0x40
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	24000d08 	.word	0x24000d08
 8002220:	58024400 	.word	0x58024400
 8002224:	58020800 	.word	0x58020800
 8002228:	40022100 	.word	0x40022100
 800222c:	58026000 	.word	0x58026000
 8002230:	58021c00 	.word	0x58021c00

08002234 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <HAL_DAC_MspInit+0x80>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d129      	bne.n	80022aa <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <HAL_DAC_MspInit+0x84>)
 8002258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800225c:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_DAC_MspInit+0x84>)
 800225e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_DAC_MspInit+0x84>)
 8002268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800226c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <HAL_DAC_MspInit+0x84>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	4a0f      	ldr	r2, [pc, #60]	; (80022b8 <HAL_DAC_MspInit+0x84>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <HAL_DAC_MspInit+0x84>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8002292:	2320      	movs	r3, #32
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002296:	2303      	movs	r3, #3
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_DAC_MspInit+0x88>)
 80022a6:	f003 fd21 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3728      	adds	r7, #40	; 0x28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40007400 	.word	0x40007400
 80022b8:	58024400 	.word	0x58024400
 80022bc:	58020000 	.word	0x58020000

080022c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b0b6      	sub	sp, #216	; 0xd8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	22b4      	movs	r2, #180	; 0xb4
 80022de:	2100      	movs	r1, #0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f00b f967 	bl	800d5b4 <memset>
  if(hi2c->Instance==I2C4)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a25      	ldr	r2, [pc, #148]	; (8002380 <HAL_I2C_MspInit+0xc0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d142      	bne.n	8002376 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80022f0:	2310      	movs	r3, #16
 80022f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	4618      	mov	r0, r3
 8002300:	f005 fe2a 	bl	8007f58 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800230a:	f7ff fe89 	bl	8002020 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_I2C_MspInit+0xc4>)
 8002310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002314:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_I2C_MspInit+0xc4>)
 8002316:	f043 0320 	orr.w	r3, r3, #32
 800231a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_I2C_MspInit+0xc4>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 800232c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233a:	2301      	movs	r3, #1
 800233c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002346:	2304      	movs	r3, #4
 8002348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800234c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002350:	4619      	mov	r1, r3
 8002352:	480d      	ldr	r0, [pc, #52]	; (8002388 <HAL_I2C_MspInit+0xc8>)
 8002354:	f003 fcca 	bl	8005cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_I2C_MspInit+0xc4>)
 800235a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_I2C_MspInit+0xc4>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_I2C_MspInit+0xc4>)
 800236a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	37d8      	adds	r7, #216	; 0xd8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	58001c00 	.word	0x58001c00
 8002384:	58024400 	.word	0x58024400
 8002388:	58021400 	.word	0x58021400

0800238c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0b8      	sub	sp, #224	; 0xe0
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a4:	f107 0318 	add.w	r3, r7, #24
 80023a8:	22b4      	movs	r2, #180	; 0xb4
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f00b f901 	bl	800d5b4 <memset>
  if(hospi->Instance==OCTOSPI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3e      	ldr	r2, [pc, #248]	; (80024b0 <HAL_OSPI_MspInit+0x124>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d175      	bne.n	80024a8 <HAL_OSPI_MspInit+0x11c>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80023bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023c6:	f107 0318 	add.w	r3, r7, #24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f005 fdc4 	bl	8007f58 <HAL_RCCEx_PeriphCLKConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_OSPI_MspInit+0x4e>
    {
      Error_Handler();
 80023d6:	f7ff fe23 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80023da:	4b36      	ldr	r3, [pc, #216]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 80023dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023e0:	4a34      	ldr	r2, [pc, #208]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80023ea:	4b32      	ldr	r3, [pc, #200]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 80023ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 80023fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023fe:	4a2d      	ldr	r2, [pc, #180]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 800240a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 8002418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241c:	4a25      	ldr	r2, [pc, #148]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 800241e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 800243c:	f043 0320 	orr.w	r3, r3, #32
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_OSPI_MspInit+0x128>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    /**OCTOSPI1 GPIO Configuration
    PG6     ------> OCTOSPIM_P1_NCS
    PF10     ------> OCTOSPIM_P1_CLK
    */
    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8002452:	2340      	movs	r3, #64	; 0x40
 8002454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800246a:	230a      	movs	r3, #10
 800246c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002470:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002474:	4619      	mov	r1, r3
 8002476:	4810      	ldr	r0, [pc, #64]	; (80024b8 <HAL_OSPI_MspInit+0x12c>)
 8002478:	f003 fc38 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800247c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002490:	2303      	movs	r3, #3
 8002492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002496:	2309      	movs	r3, #9
 8002498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800249c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024a0:	4619      	mov	r1, r3
 80024a2:	4806      	ldr	r0, [pc, #24]	; (80024bc <HAL_OSPI_MspInit+0x130>)
 80024a4:	f003 fc22 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80024a8:	bf00      	nop
 80024aa:	37e0      	adds	r7, #224	; 0xe0
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	52005000 	.word	0x52005000
 80024b4:	58024400 	.word	0x58024400
 80024b8:	58021800 	.word	0x58021800
 80024bc:	58021400 	.word	0x58021400

080024c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0b6      	sub	sp, #216	; 0xd8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d8:	f107 0310 	add.w	r3, r7, #16
 80024dc:	22b4      	movs	r2, #180	; 0xb4
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00b f867 	bl	800d5b4 <memset>
  if(hspi->Instance==SPI5)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <HAL_SPI_MspInit+0xf8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d15f      	bne.n	80025b0 <HAL_SPI_MspInit+0xf0>
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	f107 0310 	add.w	r3, r7, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f005 fd2a 	bl	8007f58 <HAL_RCCEx_PeriphCLKConfig>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800250a:	f7ff fd89 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_SPI_MspInit+0xfc>)
 8002510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_SPI_MspInit+0xfc>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800251e:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_SPI_MspInit+0xfc>)
 8002520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800252c:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_SPI_MspInit+0xfc>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_SPI_MspInit+0xfc>)
 8002534:	f043 0320 	orr.w	r3, r3, #32
 8002538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_SPI_MspInit+0xfc>)
 800253e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF8     ------> SPI5_MISO
    PF7     ------> SPI5_SCK
    */
    GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 800254a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002564:	2305      	movs	r3, #5
 8002566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800256e:	4619      	mov	r1, r3
 8002570:	4813      	ldr	r0, [pc, #76]	; (80025c0 <HAL_SPI_MspInit+0x100>)
 8002572:	f003 fbbb 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002582:	2301      	movs	r3, #1
 8002584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800258e:	2305      	movs	r3, #5
 8002590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002594:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002598:	4619      	mov	r1, r3
 800259a:	4809      	ldr	r0, [pc, #36]	; (80025c0 <HAL_SPI_MspInit+0x100>)
 800259c:	f003 fba6 	bl	8005cec <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	2055      	movs	r0, #85	; 0x55
 80025a6:	f002 fcb8 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80025aa:	2055      	movs	r0, #85	; 0x55
 80025ac:	f002 fccf 	bl	8004f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80025b0:	bf00      	nop
 80025b2:	37d8      	adds	r7, #216	; 0xd8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40015000 	.word	0x40015000
 80025bc:	58024400 	.word	0x58024400
 80025c0:	58021400 	.word	0x58021400

080025c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a20      	ldr	r2, [pc, #128]	; (8002654 <HAL_TIM_PWM_MspInit+0x90>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10f      	bne.n	80025f6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 80025d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 80025e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025f4:	e028      	b.n	8002648 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <HAL_TIM_PWM_MspInit+0x98>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10f      	bne.n	8002620 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 8002602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 8002612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
}
 800261e:	e013      	b.n	8002648 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_TIM_PWM_MspInit+0x9c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 800262c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 8002632:	f043 0308 	orr.w	r3, r3, #8
 8002636:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_TIM_PWM_MspInit+0x94>)
 800263c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40010000 	.word	0x40010000
 8002658:	58024400 	.word	0x58024400
 800265c:	40000800 	.word	0x40000800
 8002660:	40000c00 	.word	0x40000c00

08002664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_TIM_Base_MspInit+0x48>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d116      	bne.n	80026a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <HAL_TIM_Base_MspInit+0x4c>)
 800267e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2101      	movs	r1, #1
 8002698:	202c      	movs	r0, #44	; 0x2c
 800269a:	f002 fc3e 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800269e:	202c      	movs	r0, #44	; 0x2c
 80026a0:	f002 fc55 	bl	8004f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40001c00 	.word	0x40001c00
 80026b0:	58024400 	.word	0x58024400

080026b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a48      	ldr	r2, [pc, #288]	; (80027f4 <HAL_TIM_MspPostInit+0x140>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d120      	bne.n	8002718 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 80026d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026dc:	4a46      	ldr	r2, [pc, #280]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 80026de:	f043 0310 	orr.w	r3, r3, #16
 80026e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e6:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	61bb      	str	r3, [r7, #24]
 80026f2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 80026f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002706:	2301      	movs	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	4619      	mov	r1, r3
 8002710:	483a      	ldr	r0, [pc, #232]	; (80027fc <HAL_TIM_MspPostInit+0x148>)
 8002712:	f003 faeb 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002716:	e068      	b.n	80027ea <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a38      	ldr	r2, [pc, #224]	; (8002800 <HAL_TIM_MspPostInit+0x14c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d13f      	bne.n	80027a2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002732:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002740:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	4a2c      	ldr	r2, [pc, #176]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 8002752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800276e:	2302      	movs	r3, #2
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	4822      	ldr	r0, [pc, #136]	; (8002804 <HAL_TIM_MspPostInit+0x150>)
 800277a:	f003 fab7 	bl	8005cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 800277e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2300      	movs	r3, #0
 800278e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002790:	2302      	movs	r3, #2
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	481b      	ldr	r0, [pc, #108]	; (8002808 <HAL_TIM_MspPostInit+0x154>)
 800279c:	f003 faa6 	bl	8005cec <HAL_GPIO_Init>
}
 80027a0:	e023      	b.n	80027ea <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_TIM_MspPostInit+0x158>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d11e      	bne.n	80027ea <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 80027ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027b2:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <HAL_TIM_MspPostInit+0x144>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027da:	2302      	movs	r3, #2
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	480a      	ldr	r0, [pc, #40]	; (8002810 <HAL_TIM_MspPostInit+0x15c>)
 80027e6:	f003 fa81 	bl	8005cec <HAL_GPIO_Init>
}
 80027ea:	bf00      	nop
 80027ec:	3730      	adds	r7, #48	; 0x30
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000
 80027f8:	58024400 	.word	0x58024400
 80027fc:	58021000 	.word	0x58021000
 8002800:	40000800 	.word	0x40000800
 8002804:	58020400 	.word	0x58020400
 8002808:	58020c00 	.word	0x58020c00
 800280c:	40000c00 	.word	0x40000c00
 8002810:	58020000 	.word	0x58020000

08002814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b0b6      	sub	sp, #216	; 0xd8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	22b4      	movs	r2, #180	; 0xb4
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f00a febd 	bl	800d5b4 <memset>
  if(huart->Instance==USART3)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_UART_MspInit+0xd0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d14a      	bne.n	80028da <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002844:	2302      	movs	r3, #2
 8002846:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	4618      	mov	r0, r3
 8002854:	f005 fb80 	bl	8007f58 <HAL_RCCEx_PeriphCLKConfig>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800285e:	f7ff fbdf 	bl	8002020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_UART_MspInit+0xd4>)
 8002864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <HAL_UART_MspInit+0xd4>)
 800286a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002872:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_UART_MspInit+0xd4>)
 8002874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002880:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_UART_MspInit+0xd4>)
 8002882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002886:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_UART_MspInit+0xd4>)
 8002888:	f043 0308 	orr.w	r3, r3, #8
 800288c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_UART_MspInit+0xd4>)
 8002892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD9     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800289e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028b8:	2307      	movs	r3, #7
 80028ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4809      	ldr	r0, [pc, #36]	; (80028ec <HAL_UART_MspInit+0xd8>)
 80028c6:	f003 fa11 	bl	8005cec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	2027      	movs	r0, #39	; 0x27
 80028d0:	f002 fb23 	bl	8004f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028d4:	2027      	movs	r0, #39	; 0x27
 80028d6:	f002 fb3a 	bl	8004f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028da:	bf00      	nop
 80028dc:	37d8      	adds	r7, #216	; 0xd8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40004800 	.word	0x40004800
 80028e8:	58024400 	.word	0x58024400
 80028ec:	58020c00 	.word	0x58020c00

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <NMI_Handler+0x4>

080028f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <MemManage_Handler+0x4>

08002902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <BusFault_Handler+0x4>

08002908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler+0x4>

0800290e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293c:	f000 f9fe 	bl	8002d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <USART3_IRQHandler+0x10>)
 800294a:	f009 f889 	bl	800ba60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	24000e4c 	.word	0x24000e4c

08002958 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800295e:	f008 f896 	bl	800aa8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	240010f4 	.word	0x240010f4

0800296c <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <SPI5_IRQHandler+0x10>)
 8002972:	f007 fc85 	bl	800a280 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	24000d64 	.word	0x24000d64

08002980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	return 1;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_kill>:

int _kill(int pid, int sig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800299a:	f00a fdd1 	bl	800d540 <__errno>
 800299e:	4603      	mov	r3, r0
 80029a0:	2216      	movs	r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
	return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_exit>:

void _exit (int status)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffe7 	bl	8002990 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029c2:	e7fe      	b.n	80029c2 <_exit+0x12>

080029c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e00a      	b.n	80029ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029d6:	f3af 8000 	nop.w
 80029da:	4601      	mov	r1, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf0      	blt.n	80029d6 <_read+0x12>
	}

return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e009      	b.n	8002a24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	60ba      	str	r2, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fd ff51 	bl	80008c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf1      	blt.n	8002a10 <_write+0x12>
	}
	return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_close>:

int _close(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <_isatty>:

int _isatty(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad0:	f00a fd36 	bl	800d540 <__errno>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ade:	e009      	b.n	8002af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <_sbrk+0x64>)
 8002af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	24050000 	.word	0x24050000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	24000d0c 	.word	0x24000d0c
 8002b08:	240011b8 	.word	0x240011b8

08002b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b10:	4b34      	ldr	r3, [pc, #208]	; (8002be4 <SystemInit+0xd8>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	4a33      	ldr	r2, [pc, #204]	; (8002be4 <SystemInit+0xd8>)
 8002b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b20:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <SystemInit+0xdc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d807      	bhi.n	8002b3c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b2c:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <SystemInit+0xdc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 030f 	bic.w	r3, r3, #15
 8002b34:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <SystemInit+0xdc>)
 8002b36:	f043 0307 	orr.w	r3, r3, #7
 8002b3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <SystemInit+0xe0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <SystemInit+0xe0>)
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <SystemInit+0xe0>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b4e:	4b27      	ldr	r3, [pc, #156]	; (8002bec <SystemInit+0xe0>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4926      	ldr	r1, [pc, #152]	; (8002bec <SystemInit+0xe0>)
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <SystemInit+0xe4>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <SystemInit+0xdc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d007      	beq.n	8002b76 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <SystemInit+0xdc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 030f 	bic.w	r3, r3, #15
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <SystemInit+0xdc>)
 8002b70:	f043 0307 	orr.w	r3, r3, #7
 8002b74:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <SystemInit+0xe0>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <SystemInit+0xe0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <SystemInit+0xe0>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <SystemInit+0xe0>)
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <SystemInit+0xe8>)
 8002b8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <SystemInit+0xe0>)
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <SystemInit+0xec>)
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b94:	4b15      	ldr	r3, [pc, #84]	; (8002bec <SystemInit+0xe0>)
 8002b96:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <SystemInit+0xf0>)
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <SystemInit+0xe0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ba0:	4b12      	ldr	r3, [pc, #72]	; (8002bec <SystemInit+0xe0>)
 8002ba2:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <SystemInit+0xf0>)
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ba6:	4b11      	ldr	r3, [pc, #68]	; (8002bec <SystemInit+0xe0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002bac:	4b0f      	ldr	r3, [pc, #60]	; (8002bec <SystemInit+0xe0>)
 8002bae:	4a13      	ldr	r2, [pc, #76]	; (8002bfc <SystemInit+0xf0>)
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <SystemInit+0xe0>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <SystemInit+0xe0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <SystemInit+0xe0>)
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <SystemInit+0xe0>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <SystemInit+0xf4>)
 8002bcc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002bd0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SystemInit+0xd8>)
 8002bd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bd8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00
 8002be8:	52002000 	.word	0x52002000
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002bf4:	02020200 	.word	0x02020200
 8002bf8:	01ff0000 	.word	0x01ff0000
 8002bfc:	01010280 	.word	0x01010280
 8002c00:	52004000 	.word	0x52004000

08002c04 <Reset_Handler>:
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c3c <LoopFillZerobss+0xe>
 8002c08:	f7ff ff80 	bl	8002b0c <SystemInit>
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <LoopFillZerobss+0x12>)
 8002c0e:	490d      	ldr	r1, [pc, #52]	; (8002c44 <LoopFillZerobss+0x16>)
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <LoopFillZerobss+0x1a>)
 8002c12:	2300      	movs	r3, #0
 8002c14:	e002      	b.n	8002c1c <LoopCopyDataInit>

08002c16 <CopyDataInit>:
 8002c16:	58d4      	ldr	r4, [r2, r3]
 8002c18:	50c4      	str	r4, [r0, r3]
 8002c1a:	3304      	adds	r3, #4

08002c1c <LoopCopyDataInit>:
 8002c1c:	18c4      	adds	r4, r0, r3
 8002c1e:	428c      	cmp	r4, r1
 8002c20:	d3f9      	bcc.n	8002c16 <CopyDataInit>
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <LoopFillZerobss+0x1e>)
 8002c24:	4c0a      	ldr	r4, [pc, #40]	; (8002c50 <LoopFillZerobss+0x22>)
 8002c26:	2300      	movs	r3, #0
 8002c28:	e001      	b.n	8002c2e <LoopFillZerobss>

08002c2a <FillZerobss>:
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	3204      	adds	r2, #4

08002c2e <LoopFillZerobss>:
 8002c2e:	42a2      	cmp	r2, r4
 8002c30:	d3fb      	bcc.n	8002c2a <FillZerobss>
 8002c32:	f00a fc8b 	bl	800d54c <__libc_init_array>
 8002c36:	f7fe f8b1 	bl	8000d9c <main>
 8002c3a:	4770      	bx	lr
 8002c3c:	24050000 	.word	0x24050000
 8002c40:	24000000 	.word	0x24000000
 8002c44:	24000cc4 	.word	0x24000cc4
 8002c48:	08010ddc 	.word	0x08010ddc
 8002c4c:	24000cc4 	.word	0x24000cc4
 8002c50:	240011b4 	.word	0x240011b4

08002c54 <ADC3_IRQHandler>:
 8002c54:	e7fe      	b.n	8002c54 <ADC3_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c5e:	2003      	movs	r0, #3
 8002c60:	f002 f950 	bl	8004f04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c64:	f004 ffa2 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_Init+0x68>)
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	4913      	ldr	r1, [pc, #76]	; (8002cc4 <HAL_Init+0x6c>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c82:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <HAL_Init+0x68>)
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <HAL_Init+0x6c>)
 8002c8c:	5cd3      	ldrb	r3, [r2, r3]
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	fa22 f303 	lsr.w	r3, r2, r3
 8002c98:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <HAL_Init+0x70>)
 8002c9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_Init+0x74>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f000 f814 	bl	8002cd0 <HAL_InitTick>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e002      	b.n	8002cb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb2:	f7ff f9bb 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	0801013c 	.word	0x0801013c
 8002cc8:	24000ae8 	.word	0x24000ae8
 8002ccc:	24000ae4 	.word	0x24000ae4

08002cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002cd8:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_InitTick+0x60>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e021      	b.n	8002d28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ce4:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_InitTick+0x64>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_InitTick+0x60>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f002 f935 	bl	8004f6a <HAL_SYSTICK_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00e      	b.n	8002d28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d80a      	bhi.n	8002d26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d10:	2200      	movs	r2, #0
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d18:	f002 f8ff 	bl	8004f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d1c:	4a06      	ldr	r2, [pc, #24]	; (8002d38 <HAL_InitTick+0x68>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	24000af0 	.word	0x24000af0
 8002d34:	24000ae4 	.word	0x24000ae4
 8002d38:	24000aec 	.word	0x24000aec

08002d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d40:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_IncTick+0x20>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <HAL_IncTick+0x24>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <HAL_IncTick+0x24>)
 8002d4e:	6013      	str	r3, [r2, #0]
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	24000af0 	.word	0x24000af0
 8002d60:	240011a0 	.word	0x240011a0

08002d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return uwTick;
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <HAL_GetTick+0x14>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	240011a0 	.word	0x240011a0

08002d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7ff ffee 	bl	8002d64 <HAL_GetTick>
 8002d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d94:	d005      	beq.n	8002da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_Delay+0x44>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002da2:	bf00      	nop
 8002da4:	f7ff ffde 	bl	8002d64 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d8f7      	bhi.n	8002da4 <HAL_Delay+0x28>
  {
  }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	24000af0 	.word	0x24000af0

08002dc4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	58000400 	.word	0x58000400

08002df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3360      	adds	r3, #96	; 0x60
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <LL_ADC_SetOffset+0x60>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d10b      	bne.n	8002e94 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e92:	e00b      	b.n	8002eac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	58026000 	.word	0x58026000

08002ebc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3360      	adds	r3, #96	; 0x60
 8002eca:	461a      	mov	r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	611a      	str	r2, [r3, #16]
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00e      	beq.n	8002f4e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	461a      	mov	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	601a      	str	r2, [r3, #0]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	58026000 	.word	0x58026000

08002f60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <LL_ADC_SetOffsetSaturation+0x40>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10e      	bne.n	8002f92 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3360      	adds	r3, #96	; 0x60
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	58026000 	.word	0x58026000

08002fa4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <LL_ADC_SetOffsetSign+0x40>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10e      	bne.n	8002fd6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	58026000 	.word	0x58026000

08002fe8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	3360      	adds	r3, #96	; 0x60
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <LL_ADC_SetOffsetState+0x50>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800301a:	e007      	b.n	800302c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	431a      	orrs	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	371c      	adds	r7, #28
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	58026000 	.word	0x58026000

0800303c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003062:	b480      	push	{r7}
 8003064:	b087      	sub	sp, #28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3330      	adds	r3, #48	; 0x30
 8003072:	461a      	mov	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	4413      	add	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	211f      	movs	r1, #31
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	401a      	ands	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	f003 011f 	and.w	r1, r3, #31
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	431a      	orrs	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3314      	adds	r3, #20
 80030ca:	461a      	mov	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	0e5b      	lsrs	r3, r3, #25
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	4413      	add	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0d1b      	lsrs	r3, r3, #20
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2107      	movs	r1, #7
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	401a      	ands	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0d1b      	lsrs	r3, r3, #20
 80030f4:	f003 031f 	and.w	r3, r3, #31
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	431a      	orrs	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003104:	bf00      	nop
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d115      	bne.n	8003150 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003130:	43db      	mvns	r3, r3
 8003132:	401a      	ands	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0318 	and.w	r3, r3, #24
 800313a:	4914      	ldr	r1, [pc, #80]	; (800318c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800313c:	40d9      	lsrs	r1, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	400b      	ands	r3, r1
 8003142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003146:	431a      	orrs	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800314e:	e014      	b.n	800317a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0318 	and.w	r3, r3, #24
 8003166:	4909      	ldr	r1, [pc, #36]	; (800318c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003168:	40d9      	lsrs	r1, r3
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	400b      	ands	r3, r1
 800316e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003172:	431a      	orrs	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	58026000 	.word	0x58026000
 800318c:	000fffff 	.word	0x000fffff

08003190 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 031f 	and.w	r3, r3, #31
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6093      	str	r3, [r2, #8]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	5fffffc0 	.word	0x5fffffc0

080031ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003200:	d101      	bne.n	8003206 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <LL_ADC_EnableInternalRegulator+0x24>)
 8003222:	4013      	ands	r3, r2
 8003224:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	6fffffc0 	.word	0x6fffffc0

0800323c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003250:	d101      	bne.n	8003256 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <LL_ADC_Enable+0x24>)
 8003272:	4013      	ands	r3, r2
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	7fffffc0 	.word	0x7fffffc0

0800328c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <LL_ADC_Disable+0x24>)
 800329a:	4013      	ands	r3, r2
 800329c:	f043 0202 	orr.w	r2, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	7fffffc0 	.word	0x7fffffc0

080032b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <LL_ADC_IsEnabled+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_IsEnabled+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d101      	bne.n	80032f2 <LL_ADC_IsDisableOngoing+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_ADC_IsDisableOngoing+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <LL_ADC_REG_StartConversion+0x24>)
 800330e:	4013      	ands	r3, r2
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	7fffffc0 	.word	0x7fffffc0

08003328 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <LL_ADC_REG_StopConversion+0x24>)
 8003336:	4013      	ands	r3, r2
 8003338:	f043 0210 	orr.w	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	7fffffc0 	.word	0x7fffffc0

08003350 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d101      	bne.n	8003368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <LL_ADC_INJ_StopConversion+0x24>)
 8003386:	4013      	ands	r3, r2
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	7fffffc0 	.word	0x7fffffc0

080033a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d101      	bne.n	80033b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033c8:	b590      	push	{r4, r7, lr}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1ee      	b.n	80037c0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fe fe35 	bl	8002060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff feef 	bl	80031ec <LL_ADC_IsDeepPowerDownEnabled>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fed5 	bl	80031c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff0a 	bl	800323c <LL_ADC_IsInternalRegulatorEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d114      	bne.n	8003458 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff feee 	bl	8003214 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003438:	4b8e      	ldr	r3, [pc, #568]	; (8003674 <HAL_ADC_Init+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	4a8e      	ldr	r2, [pc, #568]	; (8003678 <HAL_ADC_Init+0x2b0>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	3301      	adds	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800344a:	e002      	b.n	8003452 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	3b01      	subs	r3, #1
 8003450:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f9      	bne.n	800344c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff feed 	bl	800323c <LL_ADC_IsInternalRegulatorEnabled>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	f043 0210 	orr.w	r2, r3, #16
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff61 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 800348e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	f040 8188 	bne.w	80037ae <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 8184 	bne.w	80037ae <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034ae:	f043 0202 	orr.w	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff fefa 	bl	80032b4 <LL_ADC_IsEnabled>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d136      	bne.n	8003534 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6c      	ldr	r2, [pc, #432]	; (800367c <HAL_ADC_Init+0x2b4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_ADC_Init+0x112>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6a      	ldr	r2, [pc, #424]	; (8003680 <HAL_ADC_Init+0x2b8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10e      	bne.n	80034f8 <HAL_ADC_Init+0x130>
 80034da:	4868      	ldr	r0, [pc, #416]	; (800367c <HAL_ADC_Init+0x2b4>)
 80034dc:	f7ff feea 	bl	80032b4 <LL_ADC_IsEnabled>
 80034e0:	4604      	mov	r4, r0
 80034e2:	4867      	ldr	r0, [pc, #412]	; (8003680 <HAL_ADC_Init+0x2b8>)
 80034e4:	f7ff fee6 	bl	80032b4 <LL_ADC_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	4323      	orrs	r3, r4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e008      	b.n	800350a <HAL_ADC_Init+0x142>
 80034f8:	4862      	ldr	r0, [pc, #392]	; (8003684 <HAL_ADC_Init+0x2bc>)
 80034fa:	f7ff fedb 	bl	80032b4 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d012      	beq.n	8003534 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a5a      	ldr	r2, [pc, #360]	; (800367c <HAL_ADC_Init+0x2b4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d004      	beq.n	8003522 <HAL_ADC_Init+0x15a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_ADC_Init+0x2b8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Init+0x15e>
 8003522:	4a59      	ldr	r2, [pc, #356]	; (8003688 <HAL_ADC_Init+0x2c0>)
 8003524:	e000      	b.n	8003528 <HAL_ADC_Init+0x160>
 8003526:	4a59      	ldr	r2, [pc, #356]	; (800368c <HAL_ADC_Init+0x2c4>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f7ff fc5e 	bl	8002df0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_ADC_Init+0x2bc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d129      	bne.n	8003592 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7e5b      	ldrb	r3, [r3, #25]
 8003542:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003548:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800354e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d013      	beq.n	8003580 <HAL_ADC_Init+0x1b8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d00d      	beq.n	800357c <HAL_ADC_Init+0x1b4>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b1c      	cmp	r3, #28
 8003566:	d007      	beq.n	8003578 <HAL_ADC_Init+0x1b0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b18      	cmp	r3, #24
 800356e:	d101      	bne.n	8003574 <HAL_ADC_Init+0x1ac>
 8003570:	2318      	movs	r3, #24
 8003572:	e006      	b.n	8003582 <HAL_ADC_Init+0x1ba>
 8003574:	2300      	movs	r3, #0
 8003576:	e004      	b.n	8003582 <HAL_ADC_Init+0x1ba>
 8003578:	2310      	movs	r3, #16
 800357a:	e002      	b.n	8003582 <HAL_ADC_Init+0x1ba>
 800357c:	2308      	movs	r3, #8
 800357e:	e000      	b.n	8003582 <HAL_ADC_Init+0x1ba>
 8003580:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003582:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e00e      	b.n	80035b0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	7e5b      	ldrb	r3, [r3, #25]
 8003596:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800359c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d106      	bne.n	80035c8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	3b01      	subs	r3, #1
 80035c0:	045b      	lsls	r3, r3, #17
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <HAL_ADC_Init+0x2bc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d115      	bne.n	800361a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_ADC_Init+0x2c8>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	430b      	orrs	r3, r1
 8003600:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	611a      	str	r2, [r3, #16]
 8003618:	e009      	b.n	800362e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b1c      	ldr	r3, [pc, #112]	; (8003694 <HAL_ADC_Init+0x2cc>)
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	430b      	orrs	r3, r1
 800362c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fe8c 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 8003638:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff feae 	bl	80033a0 <LL_ADC_INJ_IsConversionOngoing>
 8003644:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 808e 	bne.w	800376a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 808a 	bne.w	800376a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <HAL_ADC_Init+0x2bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d11b      	bne.n	8003698 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7e1b      	ldrb	r3, [r3, #24]
 8003664:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800366c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e018      	b.n	80036a6 <HAL_ADC_Init+0x2de>
 8003674:	24000ae4 	.word	0x24000ae4
 8003678:	053e2d63 	.word	0x053e2d63
 800367c:	40022000 	.word	0x40022000
 8003680:	40022100 	.word	0x40022100
 8003684:	58026000 	.word	0x58026000
 8003688:	40022300 	.word	0x40022300
 800368c:	58026300 	.word	0x58026300
 8003690:	fff04007 	.word	0xfff04007
 8003694:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7e1b      	ldrb	r3, [r3, #24]
 800369c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <HAL_ADC_Init+0x400>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d137      	bne.n	8003734 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3f      	ldr	r2, [pc, #252]	; (80037cc <HAL_ADC_Init+0x404>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d116      	bne.n	8003702 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	4b3d      	ldr	r3, [pc, #244]	; (80037d0 <HAL_ADC_Init+0x408>)
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036f2:	430a      	orrs	r2, r1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	611a      	str	r2, [r3, #16]
 8003700:	e020      	b.n	8003744 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_ADC_Init+0x40c>)
 800370a:	4013      	ands	r3, r2
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003710:	3a01      	subs	r2, #1
 8003712:	0411      	lsls	r1, r2, #16
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003718:	4311      	orrs	r1, r2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003724:	430a      	orrs	r2, r1
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e007      	b.n	8003744 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_ADC_Init+0x404>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d002      	beq.n	800376a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f001 f909 	bl	800497c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10c      	bne.n	800378c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f023 010f 	bic.w	r1, r3, #15
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
 800378a:	e007      	b.n	800379c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 020f 	bic.w	r2, r2, #15
 800379a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	f023 0303 	bic.w	r3, r3, #3
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	661a      	str	r2, [r3, #96]	; 0x60
 80037ac:	e007      	b.n	80037be <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	f043 0210 	orr.w	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037be:	7ffb      	ldrb	r3, [r7, #31]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3724      	adds	r7, #36	; 0x24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd90      	pop	{r4, r7, pc}
 80037c8:	ffffbffc 	.word	0xffffbffc
 80037cc:	58026000 	.word	0x58026000
 80037d0:	fc00f81f 	.word	0xfc00f81f
 80037d4:	fc00f81e 	.word	0xfc00f81e

080037d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5c      	ldr	r2, [pc, #368]	; (8003958 <HAL_ADC_Start+0x180>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_ADC_Start+0x1c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5b      	ldr	r2, [pc, #364]	; (800395c <HAL_ADC_Start+0x184>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_ADC_Start+0x20>
 80037f4:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_ADC_Start+0x188>)
 80037f6:	e000      	b.n	80037fa <HAL_ADC_Start+0x22>
 80037f8:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <HAL_ADC_Start+0x18c>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fcc8 	bl	8003190 <LL_ADC_GetMultimode>
 8003800:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fda2 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 809a 	bne.w	8003948 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_ADC_Start+0x4a>
 800381e:	2302      	movs	r3, #2
 8003820:	e095      	b.n	800394e <HAL_ADC_Start+0x176>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 ffbc 	bl	80047a8 <ADC_Enable>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8081 	bne.w	800393e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003840:	4b49      	ldr	r3, [pc, #292]	; (8003968 <HAL_ADC_Start+0x190>)
 8003842:	4013      	ands	r3, r2
 8003844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a42      	ldr	r2, [pc, #264]	; (800395c <HAL_ADC_Start+0x184>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d002      	beq.n	800385c <HAL_ADC_Start+0x84>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	e000      	b.n	800385e <HAL_ADC_Start+0x86>
 800385c:	4b3e      	ldr	r3, [pc, #248]	; (8003958 <HAL_ADC_Start+0x180>)
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	4293      	cmp	r3, r2
 8003864:	d002      	beq.n	800386c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003870:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003884:	d106      	bne.n	8003894 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388a:	f023 0206 	bic.w	r2, r3, #6
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	665a      	str	r2, [r3, #100]	; 0x64
 8003892:	e002      	b.n	800389a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	221c      	movs	r2, #28
 80038a0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2b      	ldr	r2, [pc, #172]	; (800395c <HAL_ADC_Start+0x184>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d002      	beq.n	80038ba <HAL_ADC_Start+0xe2>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	e000      	b.n	80038bc <HAL_ADC_Start+0xe4>
 80038ba:	4b27      	ldr	r3, [pc, #156]	; (8003958 <HAL_ADC_Start+0x180>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d008      	beq.n	80038d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d002      	beq.n	80038d6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b09      	cmp	r3, #9
 80038d4:	d114      	bne.n	8003900 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fd01 	bl	8003300 <LL_ADC_REG_StartConversion>
 80038fe:	e025      	b.n	800394c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <HAL_ADC_Start+0x184>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d002      	beq.n	800391c <HAL_ADC_Start+0x144>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e000      	b.n	800391e <HAL_ADC_Start+0x146>
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <HAL_ADC_Start+0x180>)
 800391e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00f      	beq.n	800394c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	661a      	str	r2, [r3, #96]	; 0x60
 800393c:	e006      	b.n	800394c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003946:	e001      	b.n	800394c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003948:	2302      	movs	r3, #2
 800394a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800394c:	7dfb      	ldrb	r3, [r7, #23]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40022000 	.word	0x40022000
 800395c:	40022100 	.word	0x40022100
 8003960:	40022300 	.word	0x40022300
 8003964:	58026300 	.word	0x58026300
 8003968:	fffff0fe 	.word	0xfffff0fe

0800396c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADC_Stop+0x16>
 800397e:	2302      	movs	r3, #2
 8003980:	e021      	b.n	80039c6 <HAL_ADC_Stop+0x5a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800398a:	2103      	movs	r1, #3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fe4f 	bl	8004630 <ADC_ConversionStop>
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 ff8d 	bl	80048bc <ADC_Disable>
 80039a2:	4603      	mov	r3, r0
 80039a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d107      	bne.n	80039bc <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <HAL_ADC_Stop+0x64>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	f043 0201 	orr.w	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	ffffeefe 	.word	0xffffeefe

080039d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a72      	ldr	r2, [pc, #456]	; (8003bac <HAL_ADC_PollForConversion+0x1d8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_ADC_PollForConversion+0x1e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a70      	ldr	r2, [pc, #448]	; (8003bb0 <HAL_ADC_PollForConversion+0x1dc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_PollForConversion+0x22>
 80039f2:	4b70      	ldr	r3, [pc, #448]	; (8003bb4 <HAL_ADC_PollForConversion+0x1e0>)
 80039f4:	e000      	b.n	80039f8 <HAL_ADC_PollForConversion+0x24>
 80039f6:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_ADC_PollForConversion+0x1e4>)
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fbc9 	bl	8003190 <LL_ADC_GetMultimode>
 80039fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d102      	bne.n	8003a0e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a08:	2308      	movs	r3, #8
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e037      	b.n	8003a7e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d002      	beq.n	8003a20 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b09      	cmp	r3, #9
 8003a1e:	d111      	bne.n	8003a44 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0b1      	b.n	8003ba2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a3e:	2304      	movs	r3, #4
 8003a40:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003a42:	e01c      	b.n	8003a7e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_ADC_PollForConversion+0x1d8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d004      	beq.n	8003a58 <HAL_ADC_PollForConversion+0x84>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a57      	ldr	r2, [pc, #348]	; (8003bb0 <HAL_ADC_PollForConversion+0x1dc>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d101      	bne.n	8003a5c <HAL_ADC_PollForConversion+0x88>
 8003a58:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <HAL_ADC_PollForConversion+0x1e0>)
 8003a5a:	e000      	b.n	8003a5e <HAL_ADC_PollForConversion+0x8a>
 8003a5c:	4b56      	ldr	r3, [pc, #344]	; (8003bb8 <HAL_ADC_PollForConversion+0x1e4>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff fba4 	bl	80031ac <LL_ADC_GetMultiDMATransfer>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e093      	b.n	8003ba2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a7e:	f7ff f971 	bl	8002d64 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a84:	e021      	b.n	8003aca <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8c:	d01d      	beq.n	8003aca <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a8e:	f7ff f969 	bl	8002d64 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <HAL_ADC_PollForConversion+0xd0>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d112      	bne.n	8003aca <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10b      	bne.n	8003aca <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e06b      	b.n	8003ba2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0d6      	beq.n	8003a86 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff faa7 	bl	800303c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01c      	beq.n	8003b2e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7e5b      	ldrb	r3, [r3, #25]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d118      	bne.n	8003b2e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d111      	bne.n	8003b2e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1f      	ldr	r2, [pc, #124]	; (8003bb0 <HAL_ADC_PollForConversion+0x1dc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d002      	beq.n	8003b3e <HAL_ADC_PollForConversion+0x16a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	e000      	b.n	8003b40 <HAL_ADC_PollForConversion+0x16c>
 8003b3e:	4b1b      	ldr	r3, [pc, #108]	; (8003bac <HAL_ADC_PollForConversion+0x1d8>)
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6812      	ldr	r2, [r2, #0]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d008      	beq.n	8003b5a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b05      	cmp	r3, #5
 8003b52:	d002      	beq.n	8003b5a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d104      	bne.n	8003b64 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e00c      	b.n	8003b7e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <HAL_ADC_PollForConversion+0x1dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d002      	beq.n	8003b74 <HAL_ADC_PollForConversion+0x1a0>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	e000      	b.n	8003b76 <HAL_ADC_PollForConversion+0x1a2>
 8003b74:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_ADC_PollForConversion+0x1d8>)
 8003b76:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d104      	bne.n	8003b8e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e008      	b.n	8003ba0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	220c      	movs	r2, #12
 8003b9e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40022000 	.word	0x40022000
 8003bb0:	40022100 	.word	0x40022100
 8003bb4:	40022300 	.word	0x40022300
 8003bb8:	58026300 	.word	0x58026300

08003bbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b0b9      	sub	sp, #228	; 0xe4
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	4ab3      	ldr	r2, [pc, #716]	; (8003ec8 <HAL_ADC_ConfigChannel+0x2f0>)
 8003bfa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x34>
 8003c06:	2302      	movs	r3, #2
 8003c08:	f000 bcfa 	b.w	8004600 <HAL_ADC_ConfigChannel+0xa28>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fb99 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 84de 	bne.w	80045e2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4aa8      	ldr	r2, [pc, #672]	; (8003ecc <HAL_ADC_ConfigChannel+0x2f4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d033      	beq.n	8003c98 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x76>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0e9b      	lsrs	r3, r3, #26
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	e01d      	b.n	8003c8a <HAL_ADC_ConfigChannel+0xb2>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e004      	b.n	8003c80 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2201      	movs	r2, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	69d1      	ldr	r1, [r2, #28]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f7ff f9dc 	bl	8003062 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fb4e 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 8003cb4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fb6f 	bl	80033a0 <LL_ADC_INJ_IsConversionOngoing>
 8003cc2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 8270 	bne.w	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 826b 	bne.w	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	f7ff f9e7 	bl	80030ba <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a76      	ldr	r2, [pc, #472]	; (8003ecc <HAL_ADC_ConfigChannel+0x2f4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10d      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d10:	e032      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_ADC_ConfigChannel+0x2f8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x160>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	e01d      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x19c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x186>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	e00a      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x19c>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	d048      	beq.n	8003e12 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6919      	ldr	r1, [r3, #16]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d90:	f7ff f862 	bl	8002e58 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4c      	ldr	r2, [pc, #304]	; (8003ecc <HAL_ADC_ConfigChannel+0x2f4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d119      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6919      	ldr	r1, [r3, #16]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f7ff f8fa 	bl	8002fa4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6919      	ldr	r1, [r3, #16]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d102      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x1f0>
 8003dc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dc6:	e000      	b.n	8003dca <HAL_ADC_ConfigChannel+0x1f2>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7ff f8c8 	bl	8002f60 <LL_ADC_SetOffsetSaturation>
 8003dd0:	e1ee      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6919      	ldr	r1, [r3, #16]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d102      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x212>
 8003de4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003de8:	e000      	b.n	8003dec <HAL_ADC_ConfigChannel+0x214>
 8003dea:	2300      	movs	r3, #0
 8003dec:	461a      	mov	r2, r3
 8003dee:	f7ff f895 	bl	8002f1c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6919      	ldr	r1, [r3, #16]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	7e1b      	ldrb	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d102      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x230>
 8003e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e06:	e000      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x232>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f7ff f86c 	bl	8002ee8 <LL_ADC_SetDataRightShift>
 8003e10:	e1ce      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2d      	ldr	r2, [pc, #180]	; (8003ecc <HAL_ADC_ConfigChannel+0x2f4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	f040 8181 	bne.w	8004120 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff f849 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_ADC_ConfigChannel+0x272>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff f83e 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003e40:	4603      	mov	r3, r0
 8003e42:	0e9b      	lsrs	r3, r3, #26
 8003e44:	f003 021f 	and.w	r2, r3, #31
 8003e48:	e01e      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x2b0>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff f833 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e60:	fa93 f3a3 	rbit	r3, r3
 8003e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003e78:	2320      	movs	r3, #32
 8003e7a:	e004      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003e7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2c8>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	e01e      	b.n	8003ede <HAL_ADC_ConfigChannel+0x306>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eac:	fa93 f3a3 	rbit	r3, r3
 8003eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d107      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003ec4:	2320      	movs	r3, #32
 8003ec6:	e00a      	b.n	8003ede <HAL_ADC_ConfigChannel+0x306>
 8003ec8:	47ff0000 	.word	0x47ff0000
 8003ecc:	58026000 	.word	0x58026000
 8003ed0:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8003ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d106      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f87c 	bl	8002fe8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe ffe0 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x344>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe ffd5 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	f003 021f 	and.w	r2, r3, #31
 8003f1a:	e01e      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x382>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe ffca 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	e004      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003f4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x39a>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	0e9b      	lsrs	r3, r3, #26
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	e018      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x3cc>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e004      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f819 	bl	8002fe8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe ff7d 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x40a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe ff72 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	0e9b      	lsrs	r3, r3, #26
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	e01e      	b.n	8004020 <HAL_ADC_ConfigChannel+0x448>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe ff67 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004004:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e004      	b.n	800401e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004014:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x460>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	e014      	b.n	8004062 <HAL_ADC_ConfigChannel+0x48a>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004040:	fa93 f3a3 	rbit	r3, r3
 8004044:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004048:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800404c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e004      	b.n	8004062 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004058:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	429a      	cmp	r2, r3
 8004064:	d106      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2200      	movs	r2, #0
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe ffba 	bl	8002fe8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2103      	movs	r1, #3
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ff1e 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x4c8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2103      	movs	r1, #3
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ff13 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	0e9b      	lsrs	r3, r3, #26
 800409a:	f003 021f 	and.w	r2, r3, #31
 800409e:	e017      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x4f8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2103      	movs	r1, #3
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe ff08 	bl	8002ebc <LL_ADC_GetOffsetChannel>
 80040ac:	4603      	mov	r3, r0
 80040ae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ba:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80040bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80040c2:	2320      	movs	r3, #32
 80040c4:	e003      	b.n	80040ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80040c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c8:	fab3 f383 	clz	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x510>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0e9b      	lsrs	r3, r3, #26
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	e011      	b.n	800410c <HAL_ADC_ConfigChannel+0x534>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040f0:	fa93 f3a3 	rbit	r3, r3
 80040f4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80040f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040f8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80040fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004100:	2320      	movs	r3, #32
 8004102:	e003      	b.n	800410c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	429a      	cmp	r2, r3
 800410e:	d14f      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2200      	movs	r2, #0
 8004116:	2103      	movs	r1, #3
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe ff65 	bl	8002fe8 <LL_ADC_SetOffsetState>
 800411e:	e047      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	069b      	lsls	r3, r3, #26
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004142:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	069b      	lsls	r3, r3, #26
 8004154:	429a      	cmp	r2, r3
 8004156:	d107      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004166:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800416e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	069b      	lsls	r3, r3, #26
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800418a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	069b      	lsls	r3, r3, #26
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f87d 	bl	80032b4 <LL_ADC_IsEnabled>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8219 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7fe ff9e 	bl	8003110 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4aa1      	ldr	r2, [pc, #644]	; (8004460 <HAL_ADC_ConfigChannel+0x888>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	f040 812e 	bne.w	800443c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x630>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	3301      	adds	r3, #1
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	bf94      	ite	ls
 8004200:	2301      	movls	r3, #1
 8004202:	2300      	movhi	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e019      	b.n	800423c <HAL_ADC_ConfigChannel+0x664>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2b09      	cmp	r3, #9
 8004234:	bf94      	ite	ls
 8004236:	2301      	movls	r3, #1
 8004238:	2300      	movhi	r3, #0
 800423a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800423c:	2b00      	cmp	r3, #0
 800423e:	d079      	beq.n	8004334 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_ADC_ConfigChannel+0x684>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	3301      	adds	r3, #1
 8004254:	069b      	lsls	r3, r3, #26
 8004256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425a:	e015      	b.n	8004288 <HAL_ADC_ConfigChannel+0x6b0>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800426a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800426c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800426e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004274:	2320      	movs	r3, #32
 8004276:	e003      	b.n	8004280 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	069b      	lsls	r3, r3, #26
 8004284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x6d0>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	3301      	adds	r3, #1
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2101      	movs	r1, #1
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	e017      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x700>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80042ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80042c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2101      	movs	r1, #1
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	ea42 0103 	orr.w	r1, r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x726>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	3301      	adds	r3, #1
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	051b      	lsls	r3, r3, #20
 80042fc:	e018      	b.n	8004330 <HAL_ADC_ConfigChannel+0x758>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004316:	2320      	movs	r3, #32
 8004318:	e003      	b.n	8004322 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004330:	430b      	orrs	r3, r1
 8004332:	e07e      	b.n	8004432 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x778>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	3301      	adds	r3, #1
 8004348:	069b      	lsls	r3, r3, #26
 800434a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800434e:	e015      	b.n	800437c <HAL_ADC_ConfigChannel+0x7a4>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e003      	b.n	8004374 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	069b      	lsls	r3, r3, #26
 8004378:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_ADC_ConfigChannel+0x7c4>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	3301      	adds	r3, #1
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	e017      	b.n	80043cc <HAL_ADC_ConfigChannel+0x7f4>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	61bb      	str	r3, [r7, #24]
  return result;
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	ea42 0103 	orr.w	r1, r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x820>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	3b1e      	subs	r3, #30
 80043f0:	051b      	lsls	r3, r3, #20
 80043f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043f6:	e01b      	b.n	8004430 <HAL_ADC_ConfigChannel+0x858>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	60fb      	str	r3, [r7, #12]
  return result;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f003 021f 	and.w	r2, r3, #31
 8004422:	4613      	mov	r3, r2
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	4413      	add	r3, r2
 8004428:	3b1e      	subs	r3, #30
 800442a:	051b      	lsls	r3, r3, #20
 800442c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004430:	430b      	orrs	r3, r1
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	6892      	ldr	r2, [r2, #8]
 8004436:	4619      	mov	r1, r3
 8004438:	f7fe fe3f 	bl	80030ba <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f280 80d7 	bge.w	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a06      	ldr	r2, [pc, #24]	; (8004464 <HAL_ADC_ConfigChannel+0x88c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_ADC_ConfigChannel+0x882>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a04      	ldr	r2, [pc, #16]	; (8004468 <HAL_ADC_ConfigChannel+0x890>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10a      	bne.n	8004470 <HAL_ADC_ConfigChannel+0x898>
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <HAL_ADC_ConfigChannel+0x894>)
 800445c:	e009      	b.n	8004472 <HAL_ADC_ConfigChannel+0x89a>
 800445e:	bf00      	nop
 8004460:	47ff0000 	.word	0x47ff0000
 8004464:	40022000 	.word	0x40022000
 8004468:	40022100 	.word	0x40022100
 800446c:	40022300 	.word	0x40022300
 8004470:	4b65      	ldr	r3, [pc, #404]	; (8004608 <HAL_ADC_ConfigChannel+0xa30>)
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fce2 	bl	8002e3c <LL_ADC_GetCommonPathInternalCh>
 8004478:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a62      	ldr	r2, [pc, #392]	; (800460c <HAL_ADC_ConfigChannel+0xa34>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <HAL_ADC_ConfigChannel+0x8b8>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a61      	ldr	r2, [pc, #388]	; (8004610 <HAL_ADC_ConfigChannel+0xa38>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10e      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x8d6>
 8004490:	485e      	ldr	r0, [pc, #376]	; (800460c <HAL_ADC_ConfigChannel+0xa34>)
 8004492:	f7fe ff0f 	bl	80032b4 <LL_ADC_IsEnabled>
 8004496:	4604      	mov	r4, r0
 8004498:	485d      	ldr	r0, [pc, #372]	; (8004610 <HAL_ADC_ConfigChannel+0xa38>)
 800449a:	f7fe ff0b 	bl	80032b4 <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	4323      	orrs	r3, r4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf0c      	ite	eq
 80044a6:	2301      	moveq	r3, #1
 80044a8:	2300      	movne	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e008      	b.n	80044c0 <HAL_ADC_ConfigChannel+0x8e8>
 80044ae:	4859      	ldr	r0, [pc, #356]	; (8004614 <HAL_ADC_ConfigChannel+0xa3c>)
 80044b0:	f7fe ff00 	bl	80032b4 <LL_ADC_IsEnabled>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8084 	beq.w	80045ce <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a53      	ldr	r2, [pc, #332]	; (8004618 <HAL_ADC_ConfigChannel+0xa40>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d132      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x95e>
 80044d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12c      	bne.n	8004536 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a4c      	ldr	r2, [pc, #304]	; (8004614 <HAL_ADC_ConfigChannel+0xa3c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	f040 8086 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a47      	ldr	r2, [pc, #284]	; (800460c <HAL_ADC_ConfigChannel+0xa34>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_ADC_ConfigChannel+0x924>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a46      	ldr	r2, [pc, #280]	; (8004610 <HAL_ADC_ConfigChannel+0xa38>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x928>
 80044fc:	4a47      	ldr	r2, [pc, #284]	; (800461c <HAL_ADC_ConfigChannel+0xa44>)
 80044fe:	e000      	b.n	8004502 <HAL_ADC_ConfigChannel+0x92a>
 8004500:	4a41      	ldr	r2, [pc, #260]	; (8004608 <HAL_ADC_ConfigChannel+0xa30>)
 8004502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004506:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7fe fc82 	bl	8002e16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004512:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_ADC_ConfigChannel+0xa48>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	4a42      	ldr	r2, [pc, #264]	; (8004624 <HAL_ADC_ConfigChannel+0xa4c>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	099b      	lsrs	r3, r3, #6
 8004520:	3301      	adds	r3, #1
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004526:	e002      	b.n	800452e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	3b01      	subs	r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f9      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004534:	e05e      	b.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <HAL_ADC_ConfigChannel+0xa50>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d120      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x9aa>
 8004540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d11a      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a30      	ldr	r2, [pc, #192]	; (8004614 <HAL_ADC_ConfigChannel+0xa3c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d14e      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a2c      	ldr	r2, [pc, #176]	; (800460c <HAL_ADC_ConfigChannel+0xa34>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_ADC_ConfigChannel+0x992>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_ADC_ConfigChannel+0xa38>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_ADC_ConfigChannel+0x996>
 800456a:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_ADC_ConfigChannel+0xa44>)
 800456c:	e000      	b.n	8004570 <HAL_ADC_ConfigChannel+0x998>
 800456e:	4a26      	ldr	r2, [pc, #152]	; (8004608 <HAL_ADC_ConfigChannel+0xa30>)
 8004570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7fe fc4b 	bl	8002e16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004580:	e038      	b.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_ADC_ConfigChannel+0xa54>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d133      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
 800458c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d12d      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a1d      	ldr	r2, [pc, #116]	; (8004614 <HAL_ADC_ConfigChannel+0xa3c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d128      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a19      	ldr	r2, [pc, #100]	; (800460c <HAL_ADC_ConfigChannel+0xa34>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d004      	beq.n	80045b6 <HAL_ADC_ConfigChannel+0x9de>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a17      	ldr	r2, [pc, #92]	; (8004610 <HAL_ADC_ConfigChannel+0xa38>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_ADC_ConfigChannel+0x9e2>
 80045b6:	4a19      	ldr	r2, [pc, #100]	; (800461c <HAL_ADC_ConfigChannel+0xa44>)
 80045b8:	e000      	b.n	80045bc <HAL_ADC_ConfigChannel+0x9e4>
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <HAL_ADC_ConfigChannel+0xa30>)
 80045bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80045c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fe fc25 	bl	8002e16 <LL_ADC_SetCommonPathInternalCh>
 80045cc:	e012      	b.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80045e0:	e008      	b.n	80045f4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045fc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004600:	4618      	mov	r0, r3
 8004602:	37e4      	adds	r7, #228	; 0xe4
 8004604:	46bd      	mov	sp, r7
 8004606:	bd90      	pop	{r4, r7, pc}
 8004608:	58026300 	.word	0x58026300
 800460c:	40022000 	.word	0x40022000
 8004610:	40022100 	.word	0x40022100
 8004614:	58026000 	.word	0x58026000
 8004618:	c7520000 	.word	0xc7520000
 800461c:	40022300 	.word	0x40022300
 8004620:	24000ae4 	.word	0x24000ae4
 8004624:	053e2d63 	.word	0x053e2d63
 8004628:	c3210000 	.word	0xc3210000
 800462c:	cb840000 	.word	0xcb840000

08004630 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fe82 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 800464c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fea4 	bl	80033a0 <LL_ADC_INJ_IsConversionOngoing>
 8004658:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8098 	beq.w	8004798 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02a      	beq.n	80046cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	7e5b      	ldrb	r3, [r3, #25]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d126      	bne.n	80046cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	7e1b      	ldrb	r3, [r3, #24]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d122      	bne.n	80046cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004686:	2301      	movs	r3, #1
 8004688:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800468a:	e014      	b.n	80046b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <ADC_ConversionStop+0x174>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d90d      	bls.n	80046b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004698:	f043 0210 	orr.w	r2, r3, #16
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e074      	b.n	800479a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d1e3      	bne.n	800468c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2240      	movs	r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d014      	beq.n	80046fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fe3a 	bl	8003350 <LL_ADC_REG_IsConversionOngoing>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fdf7 	bl	80032da <LL_ADC_IsDisableOngoing>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe fe16 	bl	8003328 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d014      	beq.n	800472c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fe fe4a 	bl	80033a0 <LL_ADC_INJ_IsConversionOngoing>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00c      	beq.n	800472c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fddf 	bl	80032da <LL_ADC_IsDisableOngoing>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe fe26 	bl	8003378 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d005      	beq.n	800473e <ADC_ConversionStop+0x10e>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d105      	bne.n	8004744 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004738:	230c      	movs	r3, #12
 800473a:	617b      	str	r3, [r7, #20]
        break;
 800473c:	e005      	b.n	800474a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800473e:	2308      	movs	r3, #8
 8004740:	617b      	str	r3, [r7, #20]
        break;
 8004742:	e002      	b.n	800474a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004744:	2304      	movs	r3, #4
 8004746:	617b      	str	r3, [r7, #20]
        break;
 8004748:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800474a:	f7fe fb0b 	bl	8002d64 <HAL_GetTick>
 800474e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004750:	e01b      	b.n	800478a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004752:	f7fe fb07 	bl	8002d64 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b05      	cmp	r3, #5
 800475e:	d914      	bls.n	800478a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4013      	ands	r3, r2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00d      	beq.n	800478a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004772:	f043 0210 	orr.w	r2, r3, #16
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800477e:	f043 0201 	orr.w	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e007      	b.n	800479a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1dc      	bne.n	8004752 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	000cdbff 	.word	0x000cdbff

080047a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe fd7d 	bl	80032b4 <LL_ADC_IsEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d16e      	bne.n	800489e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <ADC_Enable+0x100>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d2:	f043 0210 	orr.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e05a      	b.n	80048a0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fd38 	bl	8003264 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047f4:	f7fe fab6 	bl	8002d64 <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2b      	ldr	r2, [pc, #172]	; (80048ac <ADC_Enable+0x104>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <ADC_Enable+0x66>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <ADC_Enable+0x108>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <ADC_Enable+0x6a>
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <ADC_Enable+0x10c>)
 8004810:	e000      	b.n	8004814 <ADC_Enable+0x6c>
 8004812:	4b29      	ldr	r3, [pc, #164]	; (80048b8 <ADC_Enable+0x110>)
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe fcbb 	bl	8003190 <LL_ADC_GetMultimode>
 800481a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <ADC_Enable+0x108>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d002      	beq.n	800482c <ADC_Enable+0x84>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	e000      	b.n	800482e <ADC_Enable+0x86>
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <ADC_Enable+0x104>)
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	4293      	cmp	r3, r2
 8004834:	d02c      	beq.n	8004890 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d130      	bne.n	800489e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800483c:	e028      	b.n	8004890 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fd36 	bl	80032b4 <LL_ADC_IsEnabled>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d104      	bne.n	8004858 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fd06 	bl	8003264 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004858:	f7fe fa84 	bl	8002d64 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d914      	bls.n	8004890 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d00d      	beq.n	8004890 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004878:	f043 0210 	orr.w	r2, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	f043 0201 	orr.w	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e007      	b.n	80048a0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b01      	cmp	r3, #1
 800489c:	d1cf      	bne.n	800483e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	8000003f 	.word	0x8000003f
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40022100 	.word	0x40022100
 80048b4:	40022300 	.word	0x40022300
 80048b8:	58026300 	.word	0x58026300

080048bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe fd06 	bl	80032da <LL_ADC_IsDisableOngoing>
 80048ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fe fced 	bl	80032b4 <LL_ADC_IsEnabled>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d047      	beq.n	8004970 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d144      	bne.n	8004970 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 030d 	and.w	r3, r3, #13
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10c      	bne.n	800490e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe fcc7 	bl	800328c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2203      	movs	r2, #3
 8004904:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004906:	f7fe fa2d 	bl	8002d64 <HAL_GetTick>
 800490a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800490c:	e029      	b.n	8004962 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	f043 0210 	orr.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e023      	b.n	8004972 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800492a:	f7fe fa1b 	bl	8002d64 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d914      	bls.n	8004962 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	f043 0210 	orr.w	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e007      	b.n	8004972 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1dc      	bne.n	800492a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a6b      	ldr	r2, [pc, #428]	; (8004b38 <ADC_ConfigureBoostMode+0x1bc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <ADC_ConfigureBoostMode+0x1c>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <ADC_ConfigureBoostMode+0x1c0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <ADC_ConfigureBoostMode+0x30>
 8004998:	4b69      	ldr	r3, [pc, #420]	; (8004b40 <ADC_ConfigureBoostMode+0x1c4>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf14      	ite	ne
 80049a4:	2301      	movne	r3, #1
 80049a6:	2300      	moveq	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e008      	b.n	80049be <ADC_ConfigureBoostMode+0x42>
 80049ac:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <ADC_ConfigureBoostMode+0x1c8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01c      	beq.n	80049fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80049c2:	f003 fa6d 	bl	8007ea0 <HAL_RCC_GetHCLKFreq>
 80049c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049d0:	d010      	beq.n	80049f4 <ADC_ConfigureBoostMode+0x78>
 80049d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80049d6:	d871      	bhi.n	8004abc <ADC_ConfigureBoostMode+0x140>
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d002      	beq.n	80049e4 <ADC_ConfigureBoostMode+0x68>
 80049de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e2:	d16b      	bne.n	8004abc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	60fb      	str	r3, [r7, #12]
        break;
 80049f2:	e066      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	60fb      	str	r3, [r7, #12]
        break;
 80049fa:	e062      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80049fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004a00:	f004 f9a4 	bl	8008d4c <HAL_RCCEx_GetPeriphCLKFreq>
 8004a04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a0e:	d051      	beq.n	8004ab4 <ADC_ConfigureBoostMode+0x138>
 8004a10:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004a14:	d854      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a16:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a1a:	d047      	beq.n	8004aac <ADC_ConfigureBoostMode+0x130>
 8004a1c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004a20:	d84e      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a22:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a26:	d03d      	beq.n	8004aa4 <ADC_ConfigureBoostMode+0x128>
 8004a28:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004a2c:	d848      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a32:	d033      	beq.n	8004a9c <ADC_ConfigureBoostMode+0x120>
 8004a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a38:	d842      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004a3e:	d029      	beq.n	8004a94 <ADC_ConfigureBoostMode+0x118>
 8004a40:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004a44:	d83c      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a46:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004a4a:	d01a      	beq.n	8004a82 <ADC_ConfigureBoostMode+0x106>
 8004a4c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004a50:	d836      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a52:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004a56:	d014      	beq.n	8004a82 <ADC_ConfigureBoostMode+0x106>
 8004a58:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004a5c:	d830      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a62:	d00e      	beq.n	8004a82 <ADC_ConfigureBoostMode+0x106>
 8004a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a68:	d82a      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a6e:	d008      	beq.n	8004a82 <ADC_ConfigureBoostMode+0x106>
 8004a70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a74:	d824      	bhi.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
 8004a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a7a:	d002      	beq.n	8004a82 <ADC_ConfigureBoostMode+0x106>
 8004a7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a80:	d11e      	bne.n	8004ac0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	0c9b      	lsrs	r3, r3, #18
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	60fb      	str	r3, [r7, #12]
        break;
 8004a92:	e016      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	091b      	lsrs	r3, r3, #4
 8004a98:	60fb      	str	r3, [r7, #12]
        break;
 8004a9a:	e012      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	60fb      	str	r3, [r7, #12]
        break;
 8004aa2:	e00e      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	60fb      	str	r3, [r7, #12]
        break;
 8004aaa:	e00a      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	09db      	lsrs	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
        break;
 8004ab2:	e006      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	60fb      	str	r3, [r7, #12]
        break;
 8004aba:	e002      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
        break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004ac0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <ADC_ConfigureBoostMode+0x1cc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d808      	bhi.n	8004ae2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ade:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ae0:	e025      	b.n	8004b2e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	; (8004b4c <ADC_ConfigureBoostMode+0x1d0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d80a      	bhi.n	8004b00 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	609a      	str	r2, [r3, #8]
}
 8004afe:	e016      	b.n	8004b2e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <ADC_ConfigureBoostMode+0x1d4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d80a      	bhi.n	8004b1e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b1a:	609a      	str	r2, [r3, #8]
}
 8004b1c:	e007      	b.n	8004b2e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b2c:	609a      	str	r2, [r3, #8]
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40022000 	.word	0x40022000
 8004b3c:	40022100 	.word	0x40022100
 8004b40:	40022300 	.word	0x40022300
 8004b44:	58026300 	.word	0x58026300
 8004b48:	005f5e10 	.word	0x005f5e10
 8004b4c:	00bebc20 	.word	0x00bebc20
 8004b50:	017d7840 	.word	0x017d7840

08004b54 <LL_ADC_IsEnabled>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <LL_ADC_IsEnabled+0x18>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e000      	b.n	8004b6e <LL_ADC_IsEnabled+0x1a>
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_ADC_REG_IsConversionOngoing>:
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d101      	bne.n	8004b92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b0a3      	sub	sp, #140	; 0x8c
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e0c1      	b.n	8004d42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d102      	bne.n	8004bde <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bd8:	4b5d      	ldr	r3, [pc, #372]	; (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e001      	b.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bec:	f043 0220 	orr.w	r2, r3, #32
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0a0      	b.n	8004d42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff ffb9 	bl	8004b7a <LL_ADC_REG_IsConversionOngoing>
 8004c08:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff ffb2 	bl	8004b7a <LL_ADC_REG_IsConversionOngoing>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f040 8081 	bne.w	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004c1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d17c      	bne.n	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a48      	ldr	r2, [pc, #288]	; (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a46      	ldr	r2, [pc, #280]	; (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d101      	bne.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004c3a:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004c3c:	e000      	b.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004c3e:	4b46      	ldr	r3, [pc, #280]	; (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004c40:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d039      	beq.n	8004cbe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004c4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a39      	ldr	r2, [pc, #228]	; (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10e      	bne.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004c70:	4836      	ldr	r0, [pc, #216]	; (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004c72:	f7ff ff6f 	bl	8004b54 <LL_ADC_IsEnabled>
 8004c76:	4604      	mov	r4, r0
 8004c78:	4835      	ldr	r0, [pc, #212]	; (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004c7a:	f7ff ff6b 	bl	8004b54 <LL_ADC_IsEnabled>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	4323      	orrs	r3, r4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e008      	b.n	8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004c8e:	4833      	ldr	r0, [pc, #204]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004c90:	f7ff ff60 	bl	8004b54 <LL_ADC_IsEnabled>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d047      	beq.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	6811      	ldr	r1, [r2, #0]
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	6892      	ldr	r2, [r2, #8]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cbc:	e03a      	b.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004cbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cc8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d10e      	bne.n	8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004cde:	481b      	ldr	r0, [pc, #108]	; (8004d4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ce0:	f7ff ff38 	bl	8004b54 <LL_ADC_IsEnabled>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	481a      	ldr	r0, [pc, #104]	; (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ce8:	f7ff ff34 	bl	8004b54 <LL_ADC_IsEnabled>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4323      	orrs	r3, r4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e008      	b.n	8004d0e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004cfc:	4817      	ldr	r0, [pc, #92]	; (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004cfe:	f7ff ff29 	bl	8004b54 <LL_ADC_IsEnabled>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d010      	beq.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d1e:	e009      	b.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004d32:	e000      	b.n	8004d36 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d3e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	378c      	adds	r7, #140	; 0x8c
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd90      	pop	{r4, r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40022000 	.word	0x40022000
 8004d50:	40022100 	.word	0x40022100
 8004d54:	40022300 	.word	0x40022300
 8004d58:	58026300 	.word	0x58026300
 8004d5c:	58026000 	.word	0x58026000
 8004d60:	fffff0e0 	.word	0xfffff0e0

08004d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d74:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d80:	4013      	ands	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d8c:	4b06      	ldr	r3, [pc, #24]	; (8004da8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d92:	4a04      	ldr	r2, [pc, #16]	; (8004da4 <__NVIC_SetPriorityGrouping+0x40>)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	60d3      	str	r3, [r2, #12]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000ed00 	.word	0xe000ed00
 8004da8:	05fa0000 	.word	0x05fa0000

08004dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 0307 	and.w	r3, r3, #7
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	db0b      	blt.n	8004df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	f003 021f 	and.w	r2, r3, #31
 8004de0:	4907      	ldr	r1, [pc, #28]	; (8004e00 <__NVIC_EnableIRQ+0x38>)
 8004de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2001      	movs	r0, #1
 8004dea:	fa00 f202 	lsl.w	r2, r0, r2
 8004dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e100 	.word	0xe000e100

08004e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	db0a      	blt.n	8004e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	490c      	ldr	r1, [pc, #48]	; (8004e50 <__NVIC_SetPriority+0x4c>)
 8004e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	440b      	add	r3, r1
 8004e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e2c:	e00a      	b.n	8004e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4908      	ldr	r1, [pc, #32]	; (8004e54 <__NVIC_SetPriority+0x50>)
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	0112      	lsls	r2, r2, #4
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	440b      	add	r3, r1
 8004e42:	761a      	strb	r2, [r3, #24]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b089      	sub	sp, #36	; 0x24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f1c3 0307 	rsb	r3, r3, #7
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	bf28      	it	cs
 8004e76:	2304      	movcs	r3, #4
 8004e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d902      	bls.n	8004e88 <NVIC_EncodePriority+0x30>
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3b03      	subs	r3, #3
 8004e86:	e000      	b.n	8004e8a <NVIC_EncodePriority+0x32>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	43d9      	mvns	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	4313      	orrs	r3, r2
         );
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3724      	adds	r7, #36	; 0x24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
	...

08004ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed0:	d301      	bcc.n	8004ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e00f      	b.n	8004ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ed6:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <SysTick_Config+0x40>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ede:	210f      	movs	r1, #15
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee4:	f7ff ff8e 	bl	8004e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <SysTick_Config+0x40>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <SysTick_Config+0x40>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000e010 	.word	0xe000e010

08004f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff29 	bl	8004d64 <__NVIC_SetPriorityGrouping>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	4603      	mov	r3, r0
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f28:	f7ff ff40 	bl	8004dac <__NVIC_GetPriorityGrouping>
 8004f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f7ff ff90 	bl	8004e58 <NVIC_EncodePriority>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff ff5f 	bl	8004e04 <__NVIC_SetPriority>
}
 8004f46:	bf00      	nop
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	4603      	mov	r3, r0
 8004f56:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff ff33 	bl	8004dc8 <__NVIC_EnableIRQ>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff ffa4 	bl	8004ec0 <SysTick_Config>
 8004f78:	4603      	mov	r3, r0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e014      	b.n	8004fbe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	791b      	ldrb	r3, [r3, #4]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d105      	bne.n	8004faa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fd f945 	bl	8002234 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	795b      	ldrb	r3, [r3, #5]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <HAL_DAC_ConfigChannel+0x18>
 8004fdc:	2302      	movs	r3, #2
 8004fde:	e11d      	b.n	800521c <HAL_DAC_ConfigChannel+0x254>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d174      	bne.n	80050de <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ff4:	f7fd feb6 	bl	8002d64 <HAL_GetTick>
 8004ff8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d134      	bne.n	800506a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005000:	e011      	b.n	8005026 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005002:	f7fd feaf 	bl	8002d64 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d90a      	bls.n	8005026 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f043 0208 	orr.w	r2, r3, #8
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2203      	movs	r2, #3
 8005020:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e0fa      	b.n	800521c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800502c:	4b7d      	ldr	r3, [pc, #500]	; (8005224 <HAL_DAC_ConfigChannel+0x25c>)
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e6      	bne.n	8005002 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005034:	2001      	movs	r0, #1
 8005036:	f7fd fea1 	bl	8002d7c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	6992      	ldr	r2, [r2, #24]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
 8005044:	e01e      	b.n	8005084 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005046:	f7fd fe8d 	bl	8002d64 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d90a      	bls.n	800506a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f043 0208 	orr.w	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2203      	movs	r2, #3
 8005064:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0d8      	b.n	800521c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	2b00      	cmp	r3, #0
 8005072:	dbe8      	blt.n	8005046 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005074:	2001      	movs	r0, #1
 8005076:	f7fd fe81 	bl	8002d7c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	6992      	ldr	r2, [r2, #24]
 8005082:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005094:	fa01 f303 	lsl.w	r3, r1, r3
 8005098:	43db      	mvns	r3, r3
 800509a:	ea02 0103 	and.w	r1, r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	409a      	lsls	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	21ff      	movs	r1, #255	; 0xff
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	43db      	mvns	r3, r3
 80050c6:	ea02 0103 	and.w	r1, r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	409a      	lsls	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d11d      	bne.n	8005122 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	221f      	movs	r2, #31
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4013      	ands	r3, r2
 8005100:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005128:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2207      	movs	r2, #7
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4013      	ands	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d102      	bne.n	800514c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
 800514a:	e00f      	b.n	800516c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d102      	bne.n	800515a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005154:	2301      	movs	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e008      	b.n	800516c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005162:	2301      	movs	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e001      	b.n	800516c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4313      	orrs	r3, r2
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6819      	ldr	r1, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	43da      	mvns	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	400a      	ands	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4013      	ands	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	22c0      	movs	r2, #192	; 0xc0
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43da      	mvns	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	400a      	ands	r2, r1
 800520c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3720      	adds	r7, #32
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20008000 	.word	0x20008000

08005228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005230:	f7fd fd98 	bl	8002d64 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e2dc      	b.n	80057fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d008      	beq.n	800525e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e2cd      	b.n	80057fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a76      	ldr	r2, [pc, #472]	; (800543c <HAL_DMA_Abort+0x214>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d04a      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a74      	ldr	r2, [pc, #464]	; (8005440 <HAL_DMA_Abort+0x218>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a73      	ldr	r2, [pc, #460]	; (8005444 <HAL_DMA_Abort+0x21c>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d040      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a71      	ldr	r2, [pc, #452]	; (8005448 <HAL_DMA_Abort+0x220>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d03b      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a70      	ldr	r2, [pc, #448]	; (800544c <HAL_DMA_Abort+0x224>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d036      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a6e      	ldr	r2, [pc, #440]	; (8005450 <HAL_DMA_Abort+0x228>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a6d      	ldr	r2, [pc, #436]	; (8005454 <HAL_DMA_Abort+0x22c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d02c      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a6b      	ldr	r2, [pc, #428]	; (8005458 <HAL_DMA_Abort+0x230>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d027      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6a      	ldr	r2, [pc, #424]	; (800545c <HAL_DMA_Abort+0x234>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a68      	ldr	r2, [pc, #416]	; (8005460 <HAL_DMA_Abort+0x238>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01d      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a67      	ldr	r2, [pc, #412]	; (8005464 <HAL_DMA_Abort+0x23c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d018      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a65      	ldr	r2, [pc, #404]	; (8005468 <HAL_DMA_Abort+0x240>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a64      	ldr	r2, [pc, #400]	; (800546c <HAL_DMA_Abort+0x244>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a62      	ldr	r2, [pc, #392]	; (8005470 <HAL_DMA_Abort+0x248>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a61      	ldr	r2, [pc, #388]	; (8005474 <HAL_DMA_Abort+0x24c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_DMA_Abort+0xd6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a5f      	ldr	r2, [pc, #380]	; (8005478 <HAL_DMA_Abort+0x250>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <HAL_DMA_Abort+0xda>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_DMA_Abort+0xdc>
 8005302:	2300      	movs	r3, #0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 021e 	bic.w	r2, r2, #30
 8005316:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005326:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	e00a      	b.n	8005346 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 020e 	bic.w	r2, r2, #14
 800533e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a3c      	ldr	r2, [pc, #240]	; (800543c <HAL_DMA_Abort+0x214>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d072      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3a      	ldr	r2, [pc, #232]	; (8005440 <HAL_DMA_Abort+0x218>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d06d      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a39      	ldr	r2, [pc, #228]	; (8005444 <HAL_DMA_Abort+0x21c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d068      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a37      	ldr	r2, [pc, #220]	; (8005448 <HAL_DMA_Abort+0x220>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d063      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a36      	ldr	r2, [pc, #216]	; (800544c <HAL_DMA_Abort+0x224>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d05e      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a34      	ldr	r2, [pc, #208]	; (8005450 <HAL_DMA_Abort+0x228>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d059      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a33      	ldr	r2, [pc, #204]	; (8005454 <HAL_DMA_Abort+0x22c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d054      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a31      	ldr	r2, [pc, #196]	; (8005458 <HAL_DMA_Abort+0x230>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d04f      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a30      	ldr	r2, [pc, #192]	; (800545c <HAL_DMA_Abort+0x234>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2e      	ldr	r2, [pc, #184]	; (8005460 <HAL_DMA_Abort+0x238>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a2d      	ldr	r2, [pc, #180]	; (8005464 <HAL_DMA_Abort+0x23c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <HAL_DMA_Abort+0x240>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2a      	ldr	r2, [pc, #168]	; (800546c <HAL_DMA_Abort+0x244>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a28      	ldr	r2, [pc, #160]	; (8005470 <HAL_DMA_Abort+0x248>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a27      	ldr	r2, [pc, #156]	; (8005474 <HAL_DMA_Abort+0x24c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a25      	ldr	r2, [pc, #148]	; (8005478 <HAL_DMA_Abort+0x250>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a24      	ldr	r2, [pc, #144]	; (800547c <HAL_DMA_Abort+0x254>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <HAL_DMA_Abort+0x258>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <HAL_DMA_Abort+0x25c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1f      	ldr	r2, [pc, #124]	; (8005488 <HAL_DMA_Abort+0x260>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_DMA_Abort+0x264>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1c      	ldr	r2, [pc, #112]	; (8005490 <HAL_DMA_Abort+0x268>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a1b      	ldr	r2, [pc, #108]	; (8005494 <HAL_DMA_Abort+0x26c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_Abort+0x20e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a19      	ldr	r2, [pc, #100]	; (8005498 <HAL_DMA_Abort+0x270>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d132      	bne.n	800549c <HAL_DMA_Abort+0x274>
 8005436:	2301      	movs	r3, #1
 8005438:	e031      	b.n	800549e <HAL_DMA_Abort+0x276>
 800543a:	bf00      	nop
 800543c:	40020010 	.word	0x40020010
 8005440:	40020028 	.word	0x40020028
 8005444:	40020040 	.word	0x40020040
 8005448:	40020058 	.word	0x40020058
 800544c:	40020070 	.word	0x40020070
 8005450:	40020088 	.word	0x40020088
 8005454:	400200a0 	.word	0x400200a0
 8005458:	400200b8 	.word	0x400200b8
 800545c:	40020410 	.word	0x40020410
 8005460:	40020428 	.word	0x40020428
 8005464:	40020440 	.word	0x40020440
 8005468:	40020458 	.word	0x40020458
 800546c:	40020470 	.word	0x40020470
 8005470:	40020488 	.word	0x40020488
 8005474:	400204a0 	.word	0x400204a0
 8005478:	400204b8 	.word	0x400204b8
 800547c:	58025408 	.word	0x58025408
 8005480:	5802541c 	.word	0x5802541c
 8005484:	58025430 	.word	0x58025430
 8005488:	58025444 	.word	0x58025444
 800548c:	58025458 	.word	0x58025458
 8005490:	5802546c 	.word	0x5802546c
 8005494:	58025480 	.word	0x58025480
 8005498:	58025494 	.word	0x58025494
 800549c:	2300      	movs	r3, #0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a6d      	ldr	r2, [pc, #436]	; (800566c <HAL_DMA_Abort+0x444>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d04a      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a6b      	ldr	r2, [pc, #428]	; (8005670 <HAL_DMA_Abort+0x448>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d045      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a6a      	ldr	r2, [pc, #424]	; (8005674 <HAL_DMA_Abort+0x44c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d040      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a68      	ldr	r2, [pc, #416]	; (8005678 <HAL_DMA_Abort+0x450>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d03b      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a67      	ldr	r2, [pc, #412]	; (800567c <HAL_DMA_Abort+0x454>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d036      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a65      	ldr	r2, [pc, #404]	; (8005680 <HAL_DMA_Abort+0x458>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d031      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a64      	ldr	r2, [pc, #400]	; (8005684 <HAL_DMA_Abort+0x45c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d02c      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a62      	ldr	r2, [pc, #392]	; (8005688 <HAL_DMA_Abort+0x460>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d027      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a61      	ldr	r2, [pc, #388]	; (800568c <HAL_DMA_Abort+0x464>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <HAL_DMA_Abort+0x468>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a5e      	ldr	r2, [pc, #376]	; (8005694 <HAL_DMA_Abort+0x46c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a5c      	ldr	r2, [pc, #368]	; (8005698 <HAL_DMA_Abort+0x470>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a5b      	ldr	r2, [pc, #364]	; (800569c <HAL_DMA_Abort+0x474>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a59      	ldr	r2, [pc, #356]	; (80056a0 <HAL_DMA_Abort+0x478>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a58      	ldr	r2, [pc, #352]	; (80056a4 <HAL_DMA_Abort+0x47c>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_DMA_Abort+0x32a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a56      	ldr	r2, [pc, #344]	; (80056a8 <HAL_DMA_Abort+0x480>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d108      	bne.n	8005564 <HAL_DMA_Abort+0x33c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0201 	bic.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	e007      	b.n	8005574 <HAL_DMA_Abort+0x34c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005574:	e013      	b.n	800559e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005576:	f7fd fbf5 	bl	8002d64 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b05      	cmp	r3, #5
 8005582:	d90c      	bls.n	800559e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e12d      	b.n	80057fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2f      	ldr	r2, [pc, #188]	; (800566c <HAL_DMA_Abort+0x444>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2d      	ldr	r2, [pc, #180]	; (8005670 <HAL_DMA_Abort+0x448>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2c      	ldr	r2, [pc, #176]	; (8005674 <HAL_DMA_Abort+0x44c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2a      	ldr	r2, [pc, #168]	; (8005678 <HAL_DMA_Abort+0x450>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a29      	ldr	r2, [pc, #164]	; (800567c <HAL_DMA_Abort+0x454>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a27      	ldr	r2, [pc, #156]	; (8005680 <HAL_DMA_Abort+0x458>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a26      	ldr	r2, [pc, #152]	; (8005684 <HAL_DMA_Abort+0x45c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a24      	ldr	r2, [pc, #144]	; (8005688 <HAL_DMA_Abort+0x460>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_Abort+0x422>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a23      	ldr	r2, [pc, #140]	; (800568c <HAL_DMA_Abort+0x464>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_Abort+0x422>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a21      	ldr	r2, [pc, #132]	; (8005690 <HAL_DMA_Abort+0x468>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_Abort+0x422>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a20      	ldr	r2, [pc, #128]	; (8005694 <HAL_DMA_Abort+0x46c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_Abort+0x422>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a1e      	ldr	r2, [pc, #120]	; (8005698 <HAL_DMA_Abort+0x470>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_Abort+0x422>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1d      	ldr	r2, [pc, #116]	; (800569c <HAL_DMA_Abort+0x474>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Abort+0x422>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1b      	ldr	r2, [pc, #108]	; (80056a0 <HAL_DMA_Abort+0x478>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_Abort+0x422>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1a      	ldr	r2, [pc, #104]	; (80056a4 <HAL_DMA_Abort+0x47c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_Abort+0x422>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <HAL_DMA_Abort+0x480>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_DMA_Abort+0x426>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_DMA_Abort+0x428>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d02b      	beq.n	80056ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005658:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	223f      	movs	r2, #63	; 0x3f
 8005664:	409a      	lsls	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	e02a      	b.n	80056c2 <HAL_DMA_Abort+0x49a>
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2201      	movs	r2, #1
 80056bc:	409a      	lsls	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a4f      	ldr	r2, [pc, #316]	; (8005804 <HAL_DMA_Abort+0x5dc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d072      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a4d      	ldr	r2, [pc, #308]	; (8005808 <HAL_DMA_Abort+0x5e0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d06d      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a4c      	ldr	r2, [pc, #304]	; (800580c <HAL_DMA_Abort+0x5e4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d068      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4a      	ldr	r2, [pc, #296]	; (8005810 <HAL_DMA_Abort+0x5e8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d063      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a49      	ldr	r2, [pc, #292]	; (8005814 <HAL_DMA_Abort+0x5ec>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d05e      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a47      	ldr	r2, [pc, #284]	; (8005818 <HAL_DMA_Abort+0x5f0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d059      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a46      	ldr	r2, [pc, #280]	; (800581c <HAL_DMA_Abort+0x5f4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d054      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a44      	ldr	r2, [pc, #272]	; (8005820 <HAL_DMA_Abort+0x5f8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d04f      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a43      	ldr	r2, [pc, #268]	; (8005824 <HAL_DMA_Abort+0x5fc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04a      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a41      	ldr	r2, [pc, #260]	; (8005828 <HAL_DMA_Abort+0x600>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d045      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a40      	ldr	r2, [pc, #256]	; (800582c <HAL_DMA_Abort+0x604>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d040      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a3e      	ldr	r2, [pc, #248]	; (8005830 <HAL_DMA_Abort+0x608>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d03b      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <HAL_DMA_Abort+0x60c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d036      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3b      	ldr	r2, [pc, #236]	; (8005838 <HAL_DMA_Abort+0x610>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a3a      	ldr	r2, [pc, #232]	; (800583c <HAL_DMA_Abort+0x614>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d02c      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a38      	ldr	r2, [pc, #224]	; (8005840 <HAL_DMA_Abort+0x618>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d027      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a37      	ldr	r2, [pc, #220]	; (8005844 <HAL_DMA_Abort+0x61c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a35      	ldr	r2, [pc, #212]	; (8005848 <HAL_DMA_Abort+0x620>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a34      	ldr	r2, [pc, #208]	; (800584c <HAL_DMA_Abort+0x624>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a32      	ldr	r2, [pc, #200]	; (8005850 <HAL_DMA_Abort+0x628>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a31      	ldr	r2, [pc, #196]	; (8005854 <HAL_DMA_Abort+0x62c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2f      	ldr	r2, [pc, #188]	; (8005858 <HAL_DMA_Abort+0x630>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2e      	ldr	r2, [pc, #184]	; (800585c <HAL_DMA_Abort+0x634>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_DMA_Abort+0x58a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2c      	ldr	r2, [pc, #176]	; (8005860 <HAL_DMA_Abort+0x638>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <HAL_DMA_Abort+0x58e>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_DMA_Abort+0x590>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00c      	beq.n	80057e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40020010 	.word	0x40020010
 8005808:	40020028 	.word	0x40020028
 800580c:	40020040 	.word	0x40020040
 8005810:	40020058 	.word	0x40020058
 8005814:	40020070 	.word	0x40020070
 8005818:	40020088 	.word	0x40020088
 800581c:	400200a0 	.word	0x400200a0
 8005820:	400200b8 	.word	0x400200b8
 8005824:	40020410 	.word	0x40020410
 8005828:	40020428 	.word	0x40020428
 800582c:	40020440 	.word	0x40020440
 8005830:	40020458 	.word	0x40020458
 8005834:	40020470 	.word	0x40020470
 8005838:	40020488 	.word	0x40020488
 800583c:	400204a0 	.word	0x400204a0
 8005840:	400204b8 	.word	0x400204b8
 8005844:	58025408 	.word	0x58025408
 8005848:	5802541c 	.word	0x5802541c
 800584c:	58025430 	.word	0x58025430
 8005850:	58025444 	.word	0x58025444
 8005854:	58025458 	.word	0x58025458
 8005858:	5802546c 	.word	0x5802546c
 800585c:	58025480 	.word	0x58025480
 8005860:	58025494 	.word	0x58025494

08005864 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e205      	b.n	8005c82 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d004      	beq.n	800588c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e1fa      	b.n	8005c82 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a8c      	ldr	r2, [pc, #560]	; (8005ac4 <HAL_DMA_Abort_IT+0x260>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d04a      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a8b      	ldr	r2, [pc, #556]	; (8005ac8 <HAL_DMA_Abort_IT+0x264>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d045      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a89      	ldr	r2, [pc, #548]	; (8005acc <HAL_DMA_Abort_IT+0x268>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d040      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a88      	ldr	r2, [pc, #544]	; (8005ad0 <HAL_DMA_Abort_IT+0x26c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d03b      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a86      	ldr	r2, [pc, #536]	; (8005ad4 <HAL_DMA_Abort_IT+0x270>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d036      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a85      	ldr	r2, [pc, #532]	; (8005ad8 <HAL_DMA_Abort_IT+0x274>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d031      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a83      	ldr	r2, [pc, #524]	; (8005adc <HAL_DMA_Abort_IT+0x278>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d02c      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a82      	ldr	r2, [pc, #520]	; (8005ae0 <HAL_DMA_Abort_IT+0x27c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d027      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a80      	ldr	r2, [pc, #512]	; (8005ae4 <HAL_DMA_Abort_IT+0x280>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d022      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a7f      	ldr	r2, [pc, #508]	; (8005ae8 <HAL_DMA_Abort_IT+0x284>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d01d      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a7d      	ldr	r2, [pc, #500]	; (8005aec <HAL_DMA_Abort_IT+0x288>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d018      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7c      	ldr	r2, [pc, #496]	; (8005af0 <HAL_DMA_Abort_IT+0x28c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a7a      	ldr	r2, [pc, #488]	; (8005af4 <HAL_DMA_Abort_IT+0x290>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00e      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a79      	ldr	r2, [pc, #484]	; (8005af8 <HAL_DMA_Abort_IT+0x294>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d009      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a77      	ldr	r2, [pc, #476]	; (8005afc <HAL_DMA_Abort_IT+0x298>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_DMA_Abort_IT+0xc8>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <HAL_DMA_Abort_IT+0x29c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d101      	bne.n	8005930 <HAL_DMA_Abort_IT+0xcc>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <HAL_DMA_Abort_IT+0xce>
 8005930:	2300      	movs	r3, #0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d065      	beq.n	8005a02 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2204      	movs	r2, #4
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a60      	ldr	r2, [pc, #384]	; (8005ac4 <HAL_DMA_Abort_IT+0x260>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04a      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a5e      	ldr	r2, [pc, #376]	; (8005ac8 <HAL_DMA_Abort_IT+0x264>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d045      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a5d      	ldr	r2, [pc, #372]	; (8005acc <HAL_DMA_Abort_IT+0x268>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d040      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a5b      	ldr	r2, [pc, #364]	; (8005ad0 <HAL_DMA_Abort_IT+0x26c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d03b      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a5a      	ldr	r2, [pc, #360]	; (8005ad4 <HAL_DMA_Abort_IT+0x270>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d036      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a58      	ldr	r2, [pc, #352]	; (8005ad8 <HAL_DMA_Abort_IT+0x274>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d031      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a57      	ldr	r2, [pc, #348]	; (8005adc <HAL_DMA_Abort_IT+0x278>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d02c      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a55      	ldr	r2, [pc, #340]	; (8005ae0 <HAL_DMA_Abort_IT+0x27c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d027      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a54      	ldr	r2, [pc, #336]	; (8005ae4 <HAL_DMA_Abort_IT+0x280>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d022      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a52      	ldr	r2, [pc, #328]	; (8005ae8 <HAL_DMA_Abort_IT+0x284>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01d      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a51      	ldr	r2, [pc, #324]	; (8005aec <HAL_DMA_Abort_IT+0x288>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d018      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a4f      	ldr	r2, [pc, #316]	; (8005af0 <HAL_DMA_Abort_IT+0x28c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a4e      	ldr	r2, [pc, #312]	; (8005af4 <HAL_DMA_Abort_IT+0x290>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00e      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a4c      	ldr	r2, [pc, #304]	; (8005af8 <HAL_DMA_Abort_IT+0x294>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a4b      	ldr	r2, [pc, #300]	; (8005afc <HAL_DMA_Abort_IT+0x298>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_DMA_Abort_IT+0x17a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a49      	ldr	r2, [pc, #292]	; (8005b00 <HAL_DMA_Abort_IT+0x29c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <HAL_DMA_Abort_IT+0x18c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0201 	bic.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e147      	b.n	8005c80 <HAL_DMA_Abort_IT+0x41c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	e13e      	b.n	8005c80 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 020e 	bic.w	r2, r2, #14
 8005a10:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2b      	ldr	r2, [pc, #172]	; (8005ac4 <HAL_DMA_Abort_IT+0x260>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d04a      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <HAL_DMA_Abort_IT+0x264>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d045      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a28      	ldr	r2, [pc, #160]	; (8005acc <HAL_DMA_Abort_IT+0x268>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d040      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <HAL_DMA_Abort_IT+0x26c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d03b      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a25      	ldr	r2, [pc, #148]	; (8005ad4 <HAL_DMA_Abort_IT+0x270>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d036      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a23      	ldr	r2, [pc, #140]	; (8005ad8 <HAL_DMA_Abort_IT+0x274>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d031      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a22      	ldr	r2, [pc, #136]	; (8005adc <HAL_DMA_Abort_IT+0x278>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d02c      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <HAL_DMA_Abort_IT+0x27c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d027      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1f      	ldr	r2, [pc, #124]	; (8005ae4 <HAL_DMA_Abort_IT+0x280>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d022      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <HAL_DMA_Abort_IT+0x284>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d01d      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <HAL_DMA_Abort_IT+0x288>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d018      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <HAL_DMA_Abort_IT+0x28c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <HAL_DMA_Abort_IT+0x290>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00e      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a17      	ldr	r2, [pc, #92]	; (8005af8 <HAL_DMA_Abort_IT+0x294>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d009      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	; (8005afc <HAL_DMA_Abort_IT+0x298>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d004      	beq.n	8005ab2 <HAL_DMA_Abort_IT+0x24e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_DMA_Abort_IT+0x29c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d128      	bne.n	8005b04 <HAL_DMA_Abort_IT+0x2a0>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e027      	b.n	8005b14 <HAL_DMA_Abort_IT+0x2b0>
 8005ac4:	40020010 	.word	0x40020010
 8005ac8:	40020028 	.word	0x40020028
 8005acc:	40020040 	.word	0x40020040
 8005ad0:	40020058 	.word	0x40020058
 8005ad4:	40020070 	.word	0x40020070
 8005ad8:	40020088 	.word	0x40020088
 8005adc:	400200a0 	.word	0x400200a0
 8005ae0:	400200b8 	.word	0x400200b8
 8005ae4:	40020410 	.word	0x40020410
 8005ae8:	40020428 	.word	0x40020428
 8005aec:	40020440 	.word	0x40020440
 8005af0:	40020458 	.word	0x40020458
 8005af4:	40020470 	.word	0x40020470
 8005af8:	40020488 	.word	0x40020488
 8005afc:	400204a0 	.word	0x400204a0
 8005b00:	400204b8 	.word	0x400204b8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0201 	bic.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a5c      	ldr	r2, [pc, #368]	; (8005c8c <HAL_DMA_Abort_IT+0x428>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d072      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5b      	ldr	r2, [pc, #364]	; (8005c90 <HAL_DMA_Abort_IT+0x42c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d06d      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a59      	ldr	r2, [pc, #356]	; (8005c94 <HAL_DMA_Abort_IT+0x430>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d068      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a58      	ldr	r2, [pc, #352]	; (8005c98 <HAL_DMA_Abort_IT+0x434>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d063      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a56      	ldr	r2, [pc, #344]	; (8005c9c <HAL_DMA_Abort_IT+0x438>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d05e      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a55      	ldr	r2, [pc, #340]	; (8005ca0 <HAL_DMA_Abort_IT+0x43c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d059      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a53      	ldr	r2, [pc, #332]	; (8005ca4 <HAL_DMA_Abort_IT+0x440>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d054      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a52      	ldr	r2, [pc, #328]	; (8005ca8 <HAL_DMA_Abort_IT+0x444>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d04f      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a50      	ldr	r2, [pc, #320]	; (8005cac <HAL_DMA_Abort_IT+0x448>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d04a      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a4f      	ldr	r2, [pc, #316]	; (8005cb0 <HAL_DMA_Abort_IT+0x44c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d045      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a4d      	ldr	r2, [pc, #308]	; (8005cb4 <HAL_DMA_Abort_IT+0x450>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d040      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a4c      	ldr	r2, [pc, #304]	; (8005cb8 <HAL_DMA_Abort_IT+0x454>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d03b      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a4a      	ldr	r2, [pc, #296]	; (8005cbc <HAL_DMA_Abort_IT+0x458>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d036      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a49      	ldr	r2, [pc, #292]	; (8005cc0 <HAL_DMA_Abort_IT+0x45c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d031      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a47      	ldr	r2, [pc, #284]	; (8005cc4 <HAL_DMA_Abort_IT+0x460>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d02c      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a46      	ldr	r2, [pc, #280]	; (8005cc8 <HAL_DMA_Abort_IT+0x464>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d027      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a44      	ldr	r2, [pc, #272]	; (8005ccc <HAL_DMA_Abort_IT+0x468>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d022      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a43      	ldr	r2, [pc, #268]	; (8005cd0 <HAL_DMA_Abort_IT+0x46c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d01d      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a41      	ldr	r2, [pc, #260]	; (8005cd4 <HAL_DMA_Abort_IT+0x470>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d018      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a40      	ldr	r2, [pc, #256]	; (8005cd8 <HAL_DMA_Abort_IT+0x474>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a3e      	ldr	r2, [pc, #248]	; (8005cdc <HAL_DMA_Abort_IT+0x478>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a3d      	ldr	r2, [pc, #244]	; (8005ce0 <HAL_DMA_Abort_IT+0x47c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a3b      	ldr	r2, [pc, #236]	; (8005ce4 <HAL_DMA_Abort_IT+0x480>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x3a0>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ce8 <HAL_DMA_Abort_IT+0x484>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d101      	bne.n	8005c08 <HAL_DMA_Abort_IT+0x3a4>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_DMA_Abort_IT+0x3a6>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d028      	beq.n	8005c60 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00c      	beq.n	8005c60 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40020010 	.word	0x40020010
 8005c90:	40020028 	.word	0x40020028
 8005c94:	40020040 	.word	0x40020040
 8005c98:	40020058 	.word	0x40020058
 8005c9c:	40020070 	.word	0x40020070
 8005ca0:	40020088 	.word	0x40020088
 8005ca4:	400200a0 	.word	0x400200a0
 8005ca8:	400200b8 	.word	0x400200b8
 8005cac:	40020410 	.word	0x40020410
 8005cb0:	40020428 	.word	0x40020428
 8005cb4:	40020440 	.word	0x40020440
 8005cb8:	40020458 	.word	0x40020458
 8005cbc:	40020470 	.word	0x40020470
 8005cc0:	40020488 	.word	0x40020488
 8005cc4:	400204a0 	.word	0x400204a0
 8005cc8:	400204b8 	.word	0x400204b8
 8005ccc:	58025408 	.word	0x58025408
 8005cd0:	5802541c 	.word	0x5802541c
 8005cd4:	58025430 	.word	0x58025430
 8005cd8:	58025444 	.word	0x58025444
 8005cdc:	58025458 	.word	0x58025458
 8005ce0:	5802546c 	.word	0x5802546c
 8005ce4:	58025480 	.word	0x58025480
 8005ce8:	58025494 	.word	0x58025494

08005cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005cfa:	4b86      	ldr	r3, [pc, #536]	; (8005f14 <HAL_GPIO_Init+0x228>)
 8005cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cfe:	e18c      	b.n	800601a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	2101      	movs	r1, #1
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 817e 	beq.w	8006014 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d00b      	beq.n	8005d38 <HAL_GPIO_Init+0x4c>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d007      	beq.n	8005d38 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d2c:	2b11      	cmp	r3, #17
 8005d2e:	d003      	beq.n	8005d38 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b12      	cmp	r3, #18
 8005d36:	d130      	bne.n	8005d9a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	2203      	movs	r2, #3
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43db      	mvns	r3, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d6e:	2201      	movs	r2, #1
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	fa02 f303 	lsl.w	r3, r2, r3
 8005d76:	43db      	mvns	r3, r3
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	f003 0201 	and.w	r2, r3, #1
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	2203      	movs	r2, #3
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43db      	mvns	r3, r3
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	4013      	ands	r3, r2
 8005db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_Init+0xee>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b12      	cmp	r3, #18
 8005dd8:	d123      	bne.n	8005e22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	08da      	lsrs	r2, r3, #3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3208      	adds	r2, #8
 8005de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	220f      	movs	r2, #15
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	08da      	lsrs	r2, r3, #3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3208      	adds	r2, #8
 8005e1c:	69b9      	ldr	r1, [r7, #24]
 8005e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4013      	ands	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0203 	and.w	r2, r3, #3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80d8 	beq.w	8006014 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e64:	4b2c      	ldr	r3, [pc, #176]	; (8005f18 <HAL_GPIO_Init+0x22c>)
 8005e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e6a:	4a2b      	ldr	r2, [pc, #172]	; (8005f18 <HAL_GPIO_Init+0x22c>)
 8005e6c:	f043 0302 	orr.w	r3, r3, #2
 8005e70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e74:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <HAL_GPIO_Init+0x22c>)
 8005e76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e82:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <HAL_GPIO_Init+0x230>)
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	3302      	adds	r3, #2
 8005e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	220f      	movs	r2, #15
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	; (8005f20 <HAL_GPIO_Init+0x234>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d04a      	beq.n	8005f44 <HAL_GPIO_Init+0x258>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a1c      	ldr	r2, [pc, #112]	; (8005f24 <HAL_GPIO_Init+0x238>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d02b      	beq.n	8005f0e <HAL_GPIO_Init+0x222>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <HAL_GPIO_Init+0x23c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d025      	beq.n	8005f0a <HAL_GPIO_Init+0x21e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <HAL_GPIO_Init+0x240>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d01f      	beq.n	8005f06 <HAL_GPIO_Init+0x21a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a19      	ldr	r2, [pc, #100]	; (8005f30 <HAL_GPIO_Init+0x244>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d019      	beq.n	8005f02 <HAL_GPIO_Init+0x216>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_GPIO_Init+0x248>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_GPIO_Init+0x212>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <HAL_GPIO_Init+0x24c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00d      	beq.n	8005efa <HAL_GPIO_Init+0x20e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	; (8005f3c <HAL_GPIO_Init+0x250>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <HAL_GPIO_Init+0x20a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a15      	ldr	r2, [pc, #84]	; (8005f40 <HAL_GPIO_Init+0x254>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d101      	bne.n	8005ef2 <HAL_GPIO_Init+0x206>
 8005eee:	2309      	movs	r3, #9
 8005ef0:	e029      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005ef2:	230a      	movs	r3, #10
 8005ef4:	e027      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005ef6:	2307      	movs	r3, #7
 8005ef8:	e025      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005efa:	2306      	movs	r3, #6
 8005efc:	e023      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005efe:	2305      	movs	r3, #5
 8005f00:	e021      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005f02:	2304      	movs	r3, #4
 8005f04:	e01f      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005f06:	2303      	movs	r3, #3
 8005f08:	e01d      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	e01b      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e019      	b.n	8005f46 <HAL_GPIO_Init+0x25a>
 8005f12:	bf00      	nop
 8005f14:	58000080 	.word	0x58000080
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	58000400 	.word	0x58000400
 8005f20:	58020000 	.word	0x58020000
 8005f24:	58020400 	.word	0x58020400
 8005f28:	58020800 	.word	0x58020800
 8005f2c:	58020c00 	.word	0x58020c00
 8005f30:	58021000 	.word	0x58021000
 8005f34:	58021400 	.word	0x58021400
 8005f38:	58021800 	.word	0x58021800
 8005f3c:	58021c00 	.word	0x58021c00
 8005f40:	58022400 	.word	0x58022400
 8005f44:	2300      	movs	r3, #0
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	f002 0203 	and.w	r2, r2, #3
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	4093      	lsls	r3, r2
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f56:	4938      	ldr	r1, [pc, #224]	; (8006038 <HAL_GPIO_Init+0x34c>)
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	43db      	mvns	r3, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800600c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f ae6b 	bne.w	8005d00 <HAL_GPIO_Init+0x14>
  }
}
 800602a:	bf00      	nop
 800602c:	bf00      	nop
 800602e:	3724      	adds	r7, #36	; 0x24
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	58000400 	.word	0x58000400

0800603c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
 8006048:	4613      	mov	r3, r2
 800604a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800604c:	787b      	ldrb	r3, [r7, #1]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006052:	887a      	ldrh	r2, [r7, #2]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006058:	e003      	b.n	8006062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800605a:	887b      	ldrh	r3, [r7, #2]
 800605c:	041a      	lsls	r2, r3, #16
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	619a      	str	r2, [r3, #24]
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e07f      	b.n	8006182 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc f912 	bl	80022c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d107      	bne.n	80060ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060e6:	609a      	str	r2, [r3, #8]
 80060e8:	e006      	b.n	80060f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d104      	bne.n	800610a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6859      	ldr	r1, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_I2C_Init+0x11c>)
 8006116:	430b      	orrs	r3, r1
 8006118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	ea42 0103 	orr.w	r1, r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	021a      	lsls	r2, r3, #8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69d9      	ldr	r1, [r3, #28]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2220      	movs	r2, #32
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	02008000 	.word	0x02008000

08006190 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d138      	bne.n	8006218 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e032      	b.n	800621a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2224      	movs	r2, #36	; 0x24
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b20      	cmp	r3, #32
 800623a:	d139      	bne.n	80062b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006246:	2302      	movs	r3, #2
 8006248:	e033      	b.n	80062b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2224      	movs	r2, #36	; 0x24
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006278:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e000      	b.n	80062b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80062cc:	f7fc fd4a 	bl	8002d64 <HAL_GetTick>
 80062d0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
 80062dc:	e0a9      	b.n	8006432 <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 80a2 	bne.w	8006432 <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc f84c 	bl	800238c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80062f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f8a1 	bl	8006440 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4b4d      	ldr	r3, [pc, #308]	; (800643c <HAL_OSPI_Init+0x17c>)
 8006306:	4013      	ands	r3, r2
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	68d1      	ldr	r1, [r2, #12]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6912      	ldr	r2, [r2, #16]
 8006310:	3a01      	subs	r2, #1
 8006312:	0412      	lsls	r2, r2, #16
 8006314:	4311      	orrs	r1, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6952      	ldr	r2, [r2, #20]
 800631a:	3a01      	subs	r2, #1
 800631c:	0212      	lsls	r2, r2, #8
 800631e:	4311      	orrs	r1, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006324:	0112      	lsls	r2, r2, #4
 8006326:	4311      	orrs	r1, r2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800632c:	4311      	orrs	r1, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	69d2      	ldr	r2, [r2, #28]
 8006332:	4311      	orrs	r1, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	430b      	orrs	r3, r1
 800633a:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a1a      	ldr	r2, [r3, #32]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800636c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	3b01      	subs	r3, #1
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2200      	movs	r2, #0
 8006392:	2120      	movs	r1, #32
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fd79 	bl	8006e8c <OSPI_WaitFlagStateUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d146      	bne.n	8006432 <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1e5a      	subs	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063da:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d107      	bne.n	800641a <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f042 0202 	orr.w	r2, r2, #2
 8006418:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006422:	d103      	bne.n	800642c <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	655a      	str	r2, [r3, #84]	; 0x54
 800642a:	e002      	b.n	8006432 <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	f8e0f884 	.word	0xf8e0f884

08006440 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b094      	sub	sp, #80	; 0x50
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4aa3      	ldr	r2, [pc, #652]	; (800670c <HAL_OSPIM_Config+0x2ac>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d105      	bne.n	800648e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800648c:	e004      	b.n	8006498 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800648e:	2301      	movs	r3, #1
 8006490:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006498:	2300      	movs	r3, #0
 800649a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800649e:	e01d      	b.n	80064dc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80064a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064a4:	3301      	adds	r3, #1
 80064a6:	b2d8      	uxtb	r0, r3
 80064a8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80064ac:	f107 0114 	add.w	r1, r7, #20
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	440b      	add	r3, r1
 80064ba:	4619      	mov	r1, r3
 80064bc:	f000 fd1e 	bl	8006efc <OSPIM_GetConfig>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d005      	beq.n	80064d2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2208      	movs	r2, #8
 80064d0:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80064d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064d6:	3301      	adds	r3, #1
 80064d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80064dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d9dd      	bls.n	80064a0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80064e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f040 84c3 	bne.w	8006e74 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80064ee:	4b87      	ldr	r3, [pc, #540]	; (800670c <HAL_OSPIM_Config+0x2ac>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80064fa:	4b84      	ldr	r3, [pc, #528]	; (800670c <HAL_OSPIM_Config+0x2ac>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a83      	ldr	r2, [pc, #524]	; (800670c <HAL_OSPIM_Config+0x2ac>)
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006506:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006512:	4b7f      	ldr	r3, [pc, #508]	; (8006710 <HAL_OSPIM_Config+0x2b0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800651e:	4b7c      	ldr	r3, [pc, #496]	; (8006710 <HAL_OSPIM_Config+0x2b0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7b      	ldr	r2, [pc, #492]	; (8006710 <HAL_OSPIM_Config+0x2b0>)
 8006524:	f023 0301 	bic.w	r3, r3, #1
 8006528:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800652a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800652e:	f043 0302 	orr.w	r3, r3, #2
 8006532:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006536:	4977      	ldr	r1, [pc, #476]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 8006538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800653a:	4613      	mov	r3, r2
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006546:	4413      	add	r3, r2
 8006548:	3b34      	subs	r3, #52	; 0x34
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3b01      	subs	r3, #1
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	486f      	ldr	r0, [pc, #444]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 8006556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006558:	4613      	mov	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4413      	add	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006564:	4413      	add	r3, r2
 8006566:	3b34      	subs	r3, #52	; 0x34
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3b01      	subs	r3, #1
 800656c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4403      	add	r3, r0
 8006574:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006576:	4b67      	ldr	r3, [pc, #412]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80ca 	beq.w	8006718 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006584:	4b63      	ldr	r3, [pc, #396]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a62      	ldr	r2, [pc, #392]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006590:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006594:	2b01      	cmp	r3, #1
 8006596:	f040 8178 	bne.w	800688a <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800659a:	495e      	ldr	r1, [pc, #376]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 800659c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065a0:	4613      	mov	r3, r2
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80065ac:	4413      	add	r3, r2
 80065ae:	3b3c      	subs	r3, #60	; 0x3c
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	6859      	ldr	r1, [r3, #4]
 80065ba:	4856      	ldr	r0, [pc, #344]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 80065bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065c0:	4613      	mov	r3, r2
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	4413      	add	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80065cc:	4413      	add	r3, r2
 80065ce:	3b3c      	subs	r3, #60	; 0x3c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	f041 0202 	orr.w	r2, r1, #2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4403      	add	r3, r0
 80065dc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80065de:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065e2:	4613      	mov	r3, r2
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80065ee:	4413      	add	r3, r2
 80065f0:	3b38      	subs	r3, #56	; 0x38
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d021      	beq.n	800663c <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80065f8:	4946      	ldr	r1, [pc, #280]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 80065fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800660a:	4413      	add	r3, r2
 800660c:	3b38      	subs	r3, #56	; 0x38
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3b01      	subs	r3, #1
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	483e      	ldr	r0, [pc, #248]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 800661a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800662a:	4413      	add	r3, r2
 800662c:	3b38      	subs	r3, #56	; 0x38
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	f041 0220 	orr.w	r2, r1, #32
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4403      	add	r3, r0
 800663a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800663c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800664c:	4413      	add	r3, r2
 800664e:	3b30      	subs	r3, #48	; 0x30
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d025      	beq.n	80066a2 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 8006656:	492f      	ldr	r1, [pc, #188]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 8006658:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800665c:	4613      	mov	r3, r2
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	4413      	add	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006668:	4413      	add	r3, r2
 800666a:	3b30      	subs	r3, #48	; 0x30
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3b01      	subs	r3, #1
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	4826      	ldr	r0, [pc, #152]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 800667c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006680:	4613      	mov	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4413      	add	r3, r2
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800668c:	4413      	add	r3, r2
 800668e:	3b30      	subs	r3, #48	; 0x30
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3b01      	subs	r3, #1
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4403      	add	r3, r0
 80066a0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80066a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80066a6:	4613      	mov	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80066b2:	4413      	add	r3, r2
 80066b4:	3b2c      	subs	r3, #44	; 0x2c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80e6 	beq.w	800688a <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80066be:	4915      	ldr	r1, [pc, #84]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 80066c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80066c4:	4613      	mov	r3, r2
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	4413      	add	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80066d0:	4413      	add	r3, r2
 80066d2:	3b2c      	subs	r3, #44	; 0x2c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	440b      	add	r3, r1
 80066e0:	6859      	ldr	r1, [r3, #4]
 80066e2:	480c      	ldr	r0, [pc, #48]	; (8006714 <HAL_OSPIM_Config+0x2b4>)
 80066e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80066e8:	4613      	mov	r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80066f4:	4413      	add	r3, r2
 80066f6:	3b2c      	subs	r3, #44	; 0x2c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4403      	add	r3, r0
 8006708:	605a      	str	r2, [r3, #4]
 800670a:	e0be      	b.n	800688a <HAL_OSPIM_Config+0x42a>
 800670c:	52005000 	.word	0x52005000
 8006710:	5200a000 	.word	0x5200a000
 8006714:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800671a:	4613      	mov	r3, r2
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4413      	add	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006726:	4413      	add	r3, r2
 8006728:	3b3c      	subs	r3, #60	; 0x3c
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80ac 	beq.w	800688a <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006732:	499d      	ldr	r1, [pc, #628]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 8006734:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006736:	4613      	mov	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	4413      	add	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006742:	4413      	add	r3, r2
 8006744:	3b3c      	subs	r3, #60	; 0x3c
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	440b      	add	r3, r1
 800674e:	6859      	ldr	r1, [r3, #4]
 8006750:	4895      	ldr	r0, [pc, #596]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 8006752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006754:	4613      	mov	r3, r2
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	4413      	add	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006760:	4413      	add	r3, r2
 8006762:	3b3c      	subs	r3, #60	; 0x3c
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3b01      	subs	r3, #1
 8006768:	f021 0201 	bic.w	r2, r1, #1
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4403      	add	r3, r0
 8006770:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006772:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006774:	4613      	mov	r3, r2
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4413      	add	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006780:	4413      	add	r3, r2
 8006782:	3b38      	subs	r3, #56	; 0x38
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01f      	beq.n	80067ca <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800678a:	4987      	ldr	r1, [pc, #540]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 800678c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678e:	4613      	mov	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800679a:	4413      	add	r3, r2
 800679c:	3b38      	subs	r3, #56	; 0x38
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	440b      	add	r3, r1
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	487f      	ldr	r0, [pc, #508]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 80067aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067ac:	4613      	mov	r3, r2
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	4413      	add	r3, r2
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80067b8:	4413      	add	r3, r2
 80067ba:	3b38      	subs	r3, #56	; 0x38
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3b01      	subs	r3, #1
 80067c0:	f021 0210 	bic.w	r2, r1, #16
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4403      	add	r3, r0
 80067c8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80067ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067cc:	4613      	mov	r3, r2
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	4413      	add	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80067d8:	4413      	add	r3, r2
 80067da:	3b30      	subs	r3, #48	; 0x30
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d023      	beq.n	800682a <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80067e2:	4971      	ldr	r1, [pc, #452]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 80067e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e6:	4613      	mov	r3, r2
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4413      	add	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80067f2:	4413      	add	r3, r2
 80067f4:	3b30      	subs	r3, #48	; 0x30
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	4868      	ldr	r0, [pc, #416]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 8006806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006808:	4613      	mov	r3, r2
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	4413      	add	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006814:	4413      	add	r3, r2
 8006816:	3b30      	subs	r3, #48	; 0x30
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3b01      	subs	r3, #1
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4403      	add	r3, r0
 8006828:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800682a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682c:	4613      	mov	r3, r2
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	4413      	add	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006838:	4413      	add	r3, r2
 800683a:	3b2c      	subs	r3, #44	; 0x2c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d023      	beq.n	800688a <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006842:	4959      	ldr	r1, [pc, #356]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 8006844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006846:	4613      	mov	r3, r2
 8006848:	005b      	lsls	r3, r3, #1
 800684a:	4413      	add	r3, r2
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006852:	4413      	add	r3, r2
 8006854:	3b2c      	subs	r3, #44	; 0x2c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	6859      	ldr	r1, [r3, #4]
 8006864:	4850      	ldr	r0, [pc, #320]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 8006866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006868:	4613      	mov	r3, r2
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4413      	add	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006874:	4413      	add	r3, r2
 8006876:	3b2c      	subs	r3, #44	; 0x2c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3b01      	subs	r3, #1
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4403      	add	r3, r0
 8006888:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800689e:	4413      	add	r3, r2
 80068a0:	3b3c      	subs	r3, #60	; 0x3c
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4299      	cmp	r1, r3
 80068a6:	d03c      	beq.n	8006922 <HAL_OSPIM_Config+0x4c2>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6859      	ldr	r1, [r3, #4]
 80068ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068bc:	4413      	add	r3, r2
 80068be:	3b38      	subs	r3, #56	; 0x38
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4299      	cmp	r1, r3
 80068c4:	d02d      	beq.n	8006922 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	6899      	ldr	r1, [r3, #8]
 80068ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80068ce:	4613      	mov	r3, r2
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	4413      	add	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068da:	4413      	add	r3, r2
 80068dc:	3b34      	subs	r3, #52	; 0x34
 80068de:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80068e0:	4299      	cmp	r1, r3
 80068e2:	d01e      	beq.n	8006922 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	68d9      	ldr	r1, [r3, #12]
 80068e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80068ec:	4613      	mov	r3, r2
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	4413      	add	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80068f8:	4413      	add	r3, r2
 80068fa:	3b30      	subs	r3, #48	; 0x30
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4299      	cmp	r1, r3
 8006900:	d00f      	beq.n	8006922 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6919      	ldr	r1, [r3, #16]
 8006906:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800690a:	4613      	mov	r3, r2
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4413      	add	r3, r2
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006916:	4413      	add	r3, r2
 8006918:	3b2c      	subs	r3, #44	; 0x2c
 800691a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800691c:	4299      	cmp	r1, r3
 800691e:	f040 811e 	bne.w	8006b5e <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800692a:	4613      	mov	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006936:	4413      	add	r3, r2
 8006938:	3b3c      	subs	r3, #60	; 0x3c
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4299      	cmp	r1, r3
 800693e:	d135      	bne.n	80069ac <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6859      	ldr	r1, [r3, #4]
 8006944:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006954:	4413      	add	r3, r2
 8006956:	3b38      	subs	r3, #56	; 0x38
 8006958:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 800695a:	4299      	cmp	r1, r3
 800695c:	d126      	bne.n	80069ac <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	68d9      	ldr	r1, [r3, #12]
 8006962:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006966:	4613      	mov	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4413      	add	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006972:	4413      	add	r3, r2
 8006974:	3b30      	subs	r3, #48	; 0x30
 8006976:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006978:	4299      	cmp	r1, r3
 800697a:	d117      	bne.n	80069ac <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6919      	ldr	r1, [r3, #16]
 8006980:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006990:	4413      	add	r3, r2
 8006992:	3b2c      	subs	r3, #44	; 0x2c
 8006994:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8006996:	4299      	cmp	r1, r3
 8006998:	d108      	bne.n	80069ac <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800699a:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a02      	ldr	r2, [pc, #8]	; (80069a8 <HAL_OSPIM_Config+0x548>)
 80069a0:	f043 0301 	orr.w	r3, r3, #1
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e0da      	b.n	8006b5e <HAL_OSPIM_Config+0x6fe>
 80069a8:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80069ac:	49c2      	ldr	r1, [pc, #776]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 80069ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069b2:	4613      	mov	r3, r2
 80069b4:	005b      	lsls	r3, r3, #1
 80069b6:	4413      	add	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069be:	4413      	add	r3, r2
 80069c0:	3b3c      	subs	r3, #60	; 0x3c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	440b      	add	r3, r1
 80069ca:	6859      	ldr	r1, [r3, #4]
 80069cc:	48ba      	ldr	r0, [pc, #744]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 80069ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80069de:	4413      	add	r3, r2
 80069e0:	3b3c      	subs	r3, #60	; 0x3c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	f021 0201 	bic.w	r2, r1, #1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4403      	add	r3, r0
 80069ee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80069f0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80069f4:	4613      	mov	r3, r2
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	4413      	add	r3, r2
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a00:	4413      	add	r3, r2
 8006a02:	3b38      	subs	r3, #56	; 0x38
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d021      	beq.n	8006a4e <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8006a0a:	49ab      	ldr	r1, [pc, #684]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006a0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3b38      	subs	r3, #56	; 0x38
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	6859      	ldr	r1, [r3, #4]
 8006a2a:	48a3      	ldr	r0, [pc, #652]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006a2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a3c:	4413      	add	r3, r2
 8006a3e:	3b38      	subs	r3, #56	; 0x38
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	f021 0210 	bic.w	r2, r1, #16
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4403      	add	r3, r0
 8006a4c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006a4e:	499a      	ldr	r1, [pc, #616]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006a50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a54:	4613      	mov	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4413      	add	r3, r2
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a60:	4413      	add	r3, r2
 8006a62:	3b34      	subs	r3, #52	; 0x34
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	6859      	ldr	r1, [r3, #4]
 8006a6e:	4892      	ldr	r0, [pc, #584]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006a70:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006a80:	4413      	add	r3, r2
 8006a82:	3b34      	subs	r3, #52	; 0x34
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4403      	add	r3, r0
 8006a90:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006a92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3b30      	subs	r3, #48	; 0x30
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d025      	beq.n	8006af8 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006aac:	4982      	ldr	r1, [pc, #520]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006aae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006abe:	4413      	add	r3, r2
 8006ac0:	3b30      	subs	r3, #48	; 0x30
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	6859      	ldr	r1, [r3, #4]
 8006ad0:	4879      	ldr	r0, [pc, #484]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006ad2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	4413      	add	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3b30      	subs	r3, #48	; 0x30
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4403      	add	r3, r0
 8006af6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006af8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006afc:	4613      	mov	r3, r2
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	4413      	add	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b08:	4413      	add	r3, r2
 8006b0a:	3b2c      	subs	r3, #44	; 0x2c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d025      	beq.n	8006b5e <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006b12:	4969      	ldr	r1, [pc, #420]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006b14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b24:	4413      	add	r3, r2
 8006b26:	3b2c      	subs	r3, #44	; 0x2c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	440b      	add	r3, r1
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	4860      	ldr	r0, [pc, #384]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006b38:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	4413      	add	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8006b48:	4413      	add	r3, r2
 8006b4a:	3b2c      	subs	r3, #44	; 0x2c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4403      	add	r3, r0
 8006b5c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006b5e:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b72:	025b      	lsls	r3, r3, #9
 8006b74:	431a      	orrs	r2, r3
 8006b76:	4950      	ldr	r1, [pc, #320]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	440b      	add	r3, r1
 8006b86:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	1e5a      	subs	r2, r3, #1
 8006b8e:	4b4a      	ldr	r3, [pc, #296]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	0c1b      	lsrs	r3, r3, #16
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d90a      	bls.n	8006bb0 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006b9a:	4b47      	ldr	r3, [pc, #284]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	4943      	ldr	r1, [pc, #268]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006bb0:	4b41      	ldr	r3, [pc, #260]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 809b 	beq.w	8006cf4 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006bbe:	4a3e      	ldr	r2, [pc, #248]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f023 0203 	bic.w	r2, r3, #3
 8006bd0:	4939      	ldr	r1, [pc, #228]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006bea:	4a33      	ldr	r2, [pc, #204]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006bfc:	492e      	ldr	r1, [pc, #184]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f042 0210 	orr.w	r2, r2, #16
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d016      	beq.n	8006c48 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006c1a:	4a27      	ldr	r2, [pc, #156]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c30:	4921      	ldr	r1, [pc, #132]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	605a      	str	r2, [r3, #4]
 8006c46:	e019      	b.n	8006c7c <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006c50:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006c66:	4914      	ldr	r1, [pc, #80]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d019      	beq.n	8006cbc <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006c88:	4a0b      	ldr	r2, [pc, #44]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006c9e:	4906      	ldr	r1, [pc, #24]	; (8006cb8 <HAL_OSPIM_Config+0x858>)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	605a      	str	r2, [r3, #4]
 8006cb4:	e0c6      	b.n	8006e44 <HAL_OSPIM_Config+0x9e4>
 8006cb6:	bf00      	nop
 8006cb8:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80bf 	beq.w	8006e44 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006cc6:	4a6e      	ldr	r2, [pc, #440]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006cdc:	4968      	ldr	r1, [pc, #416]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	e0a7      	b.n	8006e44 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), 
 8006cf4:	4a62      	ldr	r2, [pc, #392]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f023 0203 	bic.w	r2, r3, #3
 8006d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	495c      	ldr	r1, [pc, #368]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	440b      	add	r3, r1
 8006d1c:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d014      	beq.n	8006d50 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), 
 8006d26:	4a56      	ldr	r2, [pc, #344]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	015b      	lsls	r3, r3, #5
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	4950      	ldr	r1, [pc, #320]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	f042 0210 	orr.w	r2, r2, #16
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d019      	beq.n	8006d90 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006d5c:	4a48      	ldr	r2, [pc, #288]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	3b01      	subs	r3, #1
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d74:	049b      	lsls	r3, r3, #18
 8006d76:	431a      	orrs	r2, r3
 8006d78:	4941      	ldr	r1, [pc, #260]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	605a      	str	r2, [r3, #4]
 8006d8e:	e01c      	b.n	8006dca <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d018      	beq.n	8006dca <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006d98:	4a39      	ldr	r2, [pc, #228]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006db0:	069b      	lsls	r3, r3, #26
 8006db2:	431a      	orrs	r2, r3
 8006db4:	4932      	ldr	r1, [pc, #200]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d019      	beq.n	8006e0a <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006dd6:	4a2a      	ldr	r2, [pc, #168]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dee:	049b      	lsls	r3, r3, #18
 8006df0:	431a      	orrs	r2, r3
 8006df2:	4923      	ldr	r1, [pc, #140]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	605a      	str	r2, [r3, #4]
 8006e08:	e01c      	b.n	8006e44 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8006e12:	4a1b      	ldr	r2, [pc, #108]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2a:	069b      	lsls	r3, r3, #26
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	4914      	ldr	r1, [pc, #80]	; (8006e80 <HAL_OSPIM_Config+0xa20>)
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8006e44:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006e50:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <HAL_OSPIM_Config+0xa24>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a0b      	ldr	r2, [pc, #44]	; (8006e84 <HAL_OSPIM_Config+0xa24>)
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8006e5c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <HAL_OSPIM_Config+0xa28>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a06      	ldr	r2, [pc, #24]	; (8006e88 <HAL_OSPIM_Config+0xa28>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8006e74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3750      	adds	r7, #80	; 0x50
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	5200b400 	.word	0x5200b400
 8006e84:	52005000 	.word	0x52005000
 8006e88:	5200a000 	.word	0x5200a000

08006e8c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006e9c:	e01a      	b.n	8006ed4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea4:	d016      	beq.n	8006ed4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fb ff5d 	bl	8002d64 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	f043 0201 	orr.w	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e00e      	b.n	8006ef2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6a1a      	ldr	r2, [r3, #32]
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4013      	ands	r3, r2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1d6      	bne.n	8006e9e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	6039      	str	r1, [r7, #0]
 8006f06:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg; 
  uint32_t value = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <OSPIM_GetConfig+0x26>
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d802      	bhi.n	8006f22 <OSPIM_GetConfig+0x26>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
 8006f26:	e098      	b.n	800705a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2200      	movs	r2, #0
 8006f38:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2200      	movs	r2, #0
 8006f44:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d10b      	bne.n	8006f64 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006f4c:	4b46      	ldr	r3, [pc, #280]	; (8007068 <OSPIM_GetConfig+0x16c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC 
 8006f58:	4b44      	ldr	r3, [pc, #272]	; (800706c <OSPIM_GetConfig+0x170>)
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	e002      	b.n	8006f64 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8006f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f62:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	e074      	b.n	8007054 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8006f6a:	4a3f      	ldr	r2, [pc, #252]	; (8007068 <OSPIM_GetConfig+0x16c>)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00a      	beq.n	8006f96 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	4053      	eors	r3, r2
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d103      	bne.n	8006f96 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	4053      	eors	r3, r2
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4053      	eors	r3, r2
 8006fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d103      	bne.n	8006fd6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d018      	beq.n	8007012 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4053      	eors	r3, r2
 8006fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d111      	bne.n	8007012 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	60da      	str	r2, [r3, #12]
 8007004:	e005      	b.n	8007012 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3301      	adds	r3, #1
 800700a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d018      	beq.n	800704e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	4053      	eors	r3, r2
 8007022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d111      	bne.n	800704e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	3301      	adds	r3, #1
 8007038:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	611a      	str	r2, [r3, #16]
 8007040:	e005      	b.n	800704e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d987      	bls.n	8006f6a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	5200b400 	.word	0x5200b400
 800706c:	04040222 	.word	0x04040222

08007070 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007078:	4b29      	ldr	r3, [pc, #164]	; (8007120 <HAL_PWREx_ConfigSupply+0xb0>)
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	2b06      	cmp	r3, #6
 8007082:	d00a      	beq.n	800709a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007084:	4b26      	ldr	r3, [pc, #152]	; (8007120 <HAL_PWREx_ConfigSupply+0xb0>)
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	429a      	cmp	r2, r3
 8007090:	d001      	beq.n	8007096 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e03f      	b.n	8007116 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007096:	2300      	movs	r3, #0
 8007098:	e03d      	b.n	8007116 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800709a:	4b21      	ldr	r3, [pc, #132]	; (8007120 <HAL_PWREx_ConfigSupply+0xb0>)
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80070a2:	491f      	ldr	r1, [pc, #124]	; (8007120 <HAL_PWREx_ConfigSupply+0xb0>)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80070aa:	f7fb fe5b 	bl	8002d64 <HAL_GetTick>
 80070ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070b0:	e009      	b.n	80070c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070b2:	f7fb fe57 	bl	8002d64 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070c0:	d901      	bls.n	80070c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e027      	b.n	8007116 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070c6:	4b16      	ldr	r3, [pc, #88]	; (8007120 <HAL_PWREx_ConfigSupply+0xb0>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d2:	d1ee      	bne.n	80070b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b1e      	cmp	r3, #30
 80070d8:	d008      	beq.n	80070ec <HAL_PWREx_ConfigSupply+0x7c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b2e      	cmp	r3, #46	; 0x2e
 80070de:	d005      	beq.n	80070ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b1d      	cmp	r3, #29
 80070e4:	d002      	beq.n	80070ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b2d      	cmp	r3, #45	; 0x2d
 80070ea:	d113      	bne.n	8007114 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80070ec:	f7fb fe3a 	bl	8002d64 <HAL_GetTick>
 80070f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80070f2:	e009      	b.n	8007108 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80070f4:	f7fb fe36 	bl	8002d64 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007102:	d901      	bls.n	8007108 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e006      	b.n	8007116 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_PWREx_ConfigSupply+0xb0>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0311 	and.w	r3, r3, #17
 8007110:	2b11      	cmp	r3, #17
 8007112:	d1ef      	bne.n	80070f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	58024800 	.word	0x58024800

08007124 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b08c      	sub	sp, #48	; 0x30
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e37a      	b.n	800782c <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 8087 	beq.w	8007252 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007144:	4ba0      	ldr	r3, [pc, #640]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800714c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800714e:	4b9e      	ldr	r3, [pc, #632]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	2b10      	cmp	r3, #16
 8007158:	d007      	beq.n	800716a <HAL_RCC_OscConfig+0x46>
 800715a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715c:	2b18      	cmp	r3, #24
 800715e:	d110      	bne.n	8007182 <HAL_RCC_OscConfig+0x5e>
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d10b      	bne.n	8007182 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716a:	4b97      	ldr	r3, [pc, #604]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d06c      	beq.n	8007250 <HAL_RCC_OscConfig+0x12c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d168      	bne.n	8007250 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e354      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718a:	d106      	bne.n	800719a <HAL_RCC_OscConfig+0x76>
 800718c:	4b8e      	ldr	r3, [pc, #568]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a8d      	ldr	r2, [pc, #564]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	e02e      	b.n	80071f8 <HAL_RCC_OscConfig+0xd4>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10c      	bne.n	80071bc <HAL_RCC_OscConfig+0x98>
 80071a2:	4b89      	ldr	r3, [pc, #548]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a88      	ldr	r2, [pc, #544]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	4b86      	ldr	r3, [pc, #536]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a85      	ldr	r2, [pc, #532]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	e01d      	b.n	80071f8 <HAL_RCC_OscConfig+0xd4>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCC_OscConfig+0xbc>
 80071c6:	4b80      	ldr	r3, [pc, #512]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a7f      	ldr	r2, [pc, #508]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	4b7d      	ldr	r3, [pc, #500]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a7c      	ldr	r2, [pc, #496]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	e00b      	b.n	80071f8 <HAL_RCC_OscConfig+0xd4>
 80071e0:	4b79      	ldr	r3, [pc, #484]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a78      	ldr	r2, [pc, #480]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	4b76      	ldr	r3, [pc, #472]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a75      	ldr	r2, [pc, #468]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80071f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d013      	beq.n	8007228 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fb fdb0 	bl	8002d64 <HAL_GetTick>
 8007204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007208:	f7fb fdac 	bl	8002d64 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b64      	cmp	r3, #100	; 0x64
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e308      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800721a:	4b6b      	ldr	r3, [pc, #428]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0f0      	beq.n	8007208 <HAL_RCC_OscConfig+0xe4>
 8007226:	e014      	b.n	8007252 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007228:	f7fb fd9c 	bl	8002d64 <HAL_GetTick>
 800722c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007230:	f7fb fd98 	bl	8002d64 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b64      	cmp	r3, #100	; 0x64
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e2f4      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007242:	4b61      	ldr	r3, [pc, #388]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1f0      	bne.n	8007230 <HAL_RCC_OscConfig+0x10c>
 800724e:	e000      	b.n	8007252 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007250:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d06d      	beq.n	800733a <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800725e:	4b5a      	ldr	r3, [pc, #360]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007266:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007268:	4b57      	ldr	r3, [pc, #348]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d007      	beq.n	8007284 <HAL_RCC_OscConfig+0x160>
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b18      	cmp	r3, #24
 8007278:	d11b      	bne.n	80072b2 <HAL_RCC_OscConfig+0x18e>
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d116      	bne.n	80072b2 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007284:	4b50      	ldr	r3, [pc, #320]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_RCC_OscConfig+0x178>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e2c7      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800729c:	4b4a      	ldr	r3, [pc, #296]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	061b      	lsls	r3, r3, #24
 80072aa:	4947      	ldr	r1, [pc, #284]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072b0:	e043      	b.n	800733a <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d026      	beq.n	8007308 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80072ba:	4b43      	ldr	r3, [pc, #268]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f023 0219 	bic.w	r2, r3, #25
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	4940      	ldr	r1, [pc, #256]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072cc:	f7fb fd4a 	bl	8002d64 <HAL_GetTick>
 80072d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072d4:	f7fb fd46 	bl	8002d64 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e2a2      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072e6:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f2:	4b35      	ldr	r3, [pc, #212]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	061b      	lsls	r3, r3, #24
 8007300:	4931      	ldr	r1, [pc, #196]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007302:	4313      	orrs	r3, r2
 8007304:	604b      	str	r3, [r1, #4]
 8007306:	e018      	b.n	800733a <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007308:	4b2f      	ldr	r3, [pc, #188]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2e      	ldr	r2, [pc, #184]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800730e:	f023 0301 	bic.w	r3, r3, #1
 8007312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007314:	f7fb fd26 	bl	8002d64 <HAL_GetTick>
 8007318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800731a:	e008      	b.n	800732e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800731c:	f7fb fd22 	bl	8002d64 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d901      	bls.n	800732e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e27e      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800732e:	4b26      	ldr	r3, [pc, #152]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f0      	bne.n	800731c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b00      	cmp	r3, #0
 8007344:	d06c      	beq.n	8007420 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007346:	4b20      	ldr	r3, [pc, #128]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800734e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007350:	4b1d      	ldr	r3, [pc, #116]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	2b08      	cmp	r3, #8
 800735a:	d007      	beq.n	800736c <HAL_RCC_OscConfig+0x248>
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b18      	cmp	r3, #24
 8007360:	d11b      	bne.n	800739a <HAL_RCC_OscConfig+0x276>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	2b01      	cmp	r3, #1
 800736a:	d116      	bne.n	800739a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800736c:	4b16      	ldr	r3, [pc, #88]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCC_OscConfig+0x260>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	2b80      	cmp	r3, #128	; 0x80
 800737e:	d001      	beq.n	8007384 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e253      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007384:	4b10      	ldr	r3, [pc, #64]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	061b      	lsls	r3, r3, #24
 8007392:	490d      	ldr	r1, [pc, #52]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 8007394:	4313      	orrs	r3, r2
 8007396:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007398:	e042      	b.n	8007420 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d025      	beq.n	80073ee <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <HAL_RCC_OscConfig+0x2a4>)
 80073a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ae:	f7fb fcd9 	bl	8002d64 <HAL_GetTick>
 80073b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073b4:	e00a      	b.n	80073cc <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80073b6:	f7fb fcd5 	bl	8002d64 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d903      	bls.n	80073cc <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e231      	b.n	800782c <HAL_RCC_OscConfig+0x708>
 80073c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073cc:	4ba3      	ldr	r3, [pc, #652]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0ee      	beq.n	80073b6 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073d8:	4ba0      	ldr	r3, [pc, #640]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	061b      	lsls	r3, r3, #24
 80073e6:	499d      	ldr	r1, [pc, #628]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	60cb      	str	r3, [r1, #12]
 80073ec:	e018      	b.n	8007420 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073ee:	4b9b      	ldr	r3, [pc, #620]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a9a      	ldr	r2, [pc, #616]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80073f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fa:	f7fb fcb3 	bl	8002d64 <HAL_GetTick>
 80073fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007400:	e008      	b.n	8007414 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007402:	f7fb fcaf 	bl	8002d64 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	2b02      	cmp	r3, #2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e20b      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007414:	4b91      	ldr	r3, [pc, #580]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1f0      	bne.n	8007402 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d036      	beq.n	800749a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d019      	beq.n	8007468 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007434:	4b89      	ldr	r3, [pc, #548]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007438:	4a88      	ldr	r2, [pc, #544]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007440:	f7fb fc90 	bl	8002d64 <HAL_GetTick>
 8007444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007446:	e008      	b.n	800745a <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007448:	f7fb fc8c 	bl	8002d64 <HAL_GetTick>
 800744c:	4602      	mov	r2, r0
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	2b02      	cmp	r3, #2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e1e8      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800745a:	4b80      	ldr	r3, [pc, #512]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800745c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0f0      	beq.n	8007448 <HAL_RCC_OscConfig+0x324>
 8007466:	e018      	b.n	800749a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007468:	4b7c      	ldr	r3, [pc, #496]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800746a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800746c:	4a7b      	ldr	r2, [pc, #492]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007474:	f7fb fc76 	bl	8002d64 <HAL_GetTick>
 8007478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800747c:	f7fb fc72 	bl	8002d64 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e1ce      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800748e:	4b73      	ldr	r3, [pc, #460]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d036      	beq.n	8007514 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d019      	beq.n	80074e2 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80074ae:	4b6b      	ldr	r3, [pc, #428]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a6a      	ldr	r2, [pc, #424]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80074b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074ba:	f7fb fc53 	bl	8002d64 <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074c2:	f7fb fc4f 	bl	8002d64 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e1ab      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074d4:	4b61      	ldr	r3, [pc, #388]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x39e>
 80074e0:	e018      	b.n	8007514 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074e2:	4b5e      	ldr	r3, [pc, #376]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a5d      	ldr	r2, [pc, #372]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80074e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074ee:	f7fb fc39 	bl	8002d64 <HAL_GetTick>
 80074f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074f6:	f7fb fc35 	bl	8002d64 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e191      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007508:	4b54      	ldr	r3, [pc, #336]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f0      	bne.n	80074f6 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8081 	beq.w	8007624 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007522:	4b4f      	ldr	r3, [pc, #316]	; (8007660 <HAL_RCC_OscConfig+0x53c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a4e      	ldr	r2, [pc, #312]	; (8007660 <HAL_RCC_OscConfig+0x53c>)
 8007528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800752c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800752e:	f7fb fc19 	bl	8002d64 <HAL_GetTick>
 8007532:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007534:	e008      	b.n	8007548 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007536:	f7fb fc15 	bl	8002d64 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	2b64      	cmp	r3, #100	; 0x64
 8007542:	d901      	bls.n	8007548 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e171      	b.n	800782c <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007548:	4b45      	ldr	r3, [pc, #276]	; (8007660 <HAL_RCC_OscConfig+0x53c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0f0      	beq.n	8007536 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d106      	bne.n	800756a <HAL_RCC_OscConfig+0x446>
 800755c:	4b3f      	ldr	r3, [pc, #252]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	4a3e      	ldr	r2, [pc, #248]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	6713      	str	r3, [r2, #112]	; 0x70
 8007568:	e02d      	b.n	80075c6 <HAL_RCC_OscConfig+0x4a2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10c      	bne.n	800758c <HAL_RCC_OscConfig+0x468>
 8007572:	4b3a      	ldr	r3, [pc, #232]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007576:	4a39      	ldr	r2, [pc, #228]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	6713      	str	r3, [r2, #112]	; 0x70
 800757e:	4b37      	ldr	r3, [pc, #220]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007582:	4a36      	ldr	r2, [pc, #216]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007584:	f023 0304 	bic.w	r3, r3, #4
 8007588:	6713      	str	r3, [r2, #112]	; 0x70
 800758a:	e01c      	b.n	80075c6 <HAL_RCC_OscConfig+0x4a2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b05      	cmp	r3, #5
 8007592:	d10c      	bne.n	80075ae <HAL_RCC_OscConfig+0x48a>
 8007594:	4b31      	ldr	r3, [pc, #196]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007598:	4a30      	ldr	r2, [pc, #192]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800759a:	f043 0304 	orr.w	r3, r3, #4
 800759e:	6713      	str	r3, [r2, #112]	; 0x70
 80075a0:	4b2e      	ldr	r3, [pc, #184]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a2d      	ldr	r2, [pc, #180]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	e00b      	b.n	80075c6 <HAL_RCC_OscConfig+0x4a2>
 80075ae:	4b2b      	ldr	r3, [pc, #172]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b2:	4a2a      	ldr	r2, [pc, #168]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075b4:	f023 0301 	bic.w	r3, r3, #1
 80075b8:	6713      	str	r3, [r2, #112]	; 0x70
 80075ba:	4b28      	ldr	r3, [pc, #160]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4a27      	ldr	r2, [pc, #156]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075c0:	f023 0304 	bic.w	r3, r3, #4
 80075c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d015      	beq.n	80075fa <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ce:	f7fb fbc9 	bl	8002d64 <HAL_GetTick>
 80075d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075d4:	e00a      	b.n	80075ec <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075d6:	f7fb fbc5 	bl	8002d64 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e11f      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075ec:	4b1b      	ldr	r3, [pc, #108]	; (800765c <HAL_RCC_OscConfig+0x538>)
 80075ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ee      	beq.n	80075d6 <HAL_RCC_OscConfig+0x4b2>
 80075f8:	e014      	b.n	8007624 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fa:	f7fb fbb3 	bl	8002d64 <HAL_GetTick>
 80075fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007600:	e00a      	b.n	8007618 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007602:	f7fb fbaf 	bl	8002d64 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e109      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007618:	4b10      	ldr	r3, [pc, #64]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1ee      	bne.n	8007602 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80fe 	beq.w	800782a <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800762e:	4b0b      	ldr	r3, [pc, #44]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007636:	2b18      	cmp	r3, #24
 8007638:	f000 80b9 	beq.w	80077ae <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b02      	cmp	r3, #2
 8007642:	f040 809a 	bne.w	800777a <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <HAL_RCC_OscConfig+0x538>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a04      	ldr	r2, [pc, #16]	; (800765c <HAL_RCC_OscConfig+0x538>)
 800764c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007652:	f7fb fb87 	bl	8002d64 <HAL_GetTick>
 8007656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007658:	e00d      	b.n	8007676 <HAL_RCC_OscConfig+0x552>
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
 8007660:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007664:	f7fb fb7e 	bl	8002d64 <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	2b02      	cmp	r3, #2
 8007670:	d901      	bls.n	8007676 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	e0da      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007676:	4b6f      	ldr	r3, [pc, #444]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1f0      	bne.n	8007664 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007682:	4b6c      	ldr	r3, [pc, #432]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007686:	4b6c      	ldr	r3, [pc, #432]	; (8007838 <HAL_RCC_OscConfig+0x714>)
 8007688:	4013      	ands	r3, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007692:	0112      	lsls	r2, r2, #4
 8007694:	430a      	orrs	r2, r1
 8007696:	4967      	ldr	r1, [pc, #412]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007698:	4313      	orrs	r3, r2
 800769a:	628b      	str	r3, [r1, #40]	; 0x28
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a0:	3b01      	subs	r3, #1
 80076a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076aa:	3b01      	subs	r3, #1
 80076ac:	025b      	lsls	r3, r3, #9
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	3b01      	subs	r3, #1
 80076b8:	041b      	lsls	r3, r3, #16
 80076ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c4:	3b01      	subs	r3, #1
 80076c6:	061b      	lsls	r3, r3, #24
 80076c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076cc:	4959      	ldr	r1, [pc, #356]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80076d2:	4b58      	ldr	r3, [pc, #352]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	4a57      	ldr	r2, [pc, #348]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076de:	4b55      	ldr	r3, [pc, #340]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80076e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e2:	4b56      	ldr	r3, [pc, #344]	; (800783c <HAL_RCC_OscConfig+0x718>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076ea:	00d2      	lsls	r2, r2, #3
 80076ec:	4951      	ldr	r1, [pc, #324]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076f2:	4b50      	ldr	r3, [pc, #320]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	f023 020c 	bic.w	r2, r3, #12
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	494d      	ldr	r1, [pc, #308]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007700:	4313      	orrs	r3, r2
 8007702:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007704:	4b4b      	ldr	r3, [pc, #300]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f023 0202 	bic.w	r2, r3, #2
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007710:	4948      	ldr	r1, [pc, #288]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007712:	4313      	orrs	r3, r2
 8007714:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007716:	4b47      	ldr	r3, [pc, #284]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	4a46      	ldr	r2, [pc, #280]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 800771c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007722:	4b44      	ldr	r3, [pc, #272]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a43      	ldr	r2, [pc, #268]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800772e:	4b41      	ldr	r3, [pc, #260]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007732:	4a40      	ldr	r2, [pc, #256]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007738:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800773a:	4b3e      	ldr	r3, [pc, #248]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	4a3d      	ldr	r2, [pc, #244]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007746:	4b3b      	ldr	r3, [pc, #236]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a3a      	ldr	r2, [pc, #232]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 800774c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007752:	f7fb fb07 	bl	8002d64 <HAL_GetTick>
 8007756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800775a:	f7fb fb03 	bl	8002d64 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e05f      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800776c:	4b31      	ldr	r3, [pc, #196]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <HAL_RCC_OscConfig+0x636>
 8007778:	e057      	b.n	800782a <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800777a:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a2d      	ldr	r2, [pc, #180]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 8007780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007786:	f7fb faed 	bl	8002d64 <HAL_GetTick>
 800778a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800778e:	f7fb fae9 	bl	8002d64 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e045      	b.n	800782c <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077a0:	4b24      	ldr	r3, [pc, #144]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1f0      	bne.n	800778e <HAL_RCC_OscConfig+0x66a>
 80077ac:	e03d      	b.n	800782a <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80077b4:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <HAL_RCC_OscConfig+0x710>)
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d031      	beq.n	8007826 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f003 0203 	and.w	r2, r3, #3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d12a      	bne.n	8007826 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	091b      	lsrs	r3, r3, #4
 80077d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077dc:	429a      	cmp	r2, r3
 80077de:	d122      	bne.n	8007826 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d11a      	bne.n	8007826 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	0a5b      	lsrs	r3, r3, #9
 80077f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077fe:	429a      	cmp	r2, r3
 8007800:	d111      	bne.n	8007826 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007810:	429a      	cmp	r2, r3
 8007812:	d108      	bne.n	8007826 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	0e1b      	lsrs	r3, r3, #24
 8007818:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007820:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007822:	429a      	cmp	r2, r3
 8007824:	d001      	beq.n	800782a <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3730      	adds	r7, #48	; 0x30
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	58024400 	.word	0x58024400
 8007838:	fffffc0c 	.word	0xfffffc0c
 800783c:	ffff0007 	.word	0xffff0007

08007840 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e19c      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007854:	4b8a      	ldr	r3, [pc, #552]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d910      	bls.n	8007884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007862:	4b87      	ldr	r3, [pc, #540]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f023 020f 	bic.w	r2, r3, #15
 800786a:	4985      	ldr	r1, [pc, #532]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	4313      	orrs	r3, r2
 8007870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007872:	4b83      	ldr	r3, [pc, #524]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d001      	beq.n	8007884 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e184      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d010      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	4b7b      	ldr	r3, [pc, #492]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800789c:	429a      	cmp	r2, r3
 800789e:	d908      	bls.n	80078b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078a0:	4b78      	ldr	r3, [pc, #480]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	4975      	ldr	r1, [pc, #468]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d010      	beq.n	80078e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695a      	ldr	r2, [r3, #20]
 80078c2:	4b70      	ldr	r3, [pc, #448]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078c4:	69db      	ldr	r3, [r3, #28]
 80078c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d908      	bls.n	80078e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078ce:	4b6d      	ldr	r3, [pc, #436]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	496a      	ldr	r1, [pc, #424]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d010      	beq.n	800790e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	4b64      	ldr	r3, [pc, #400]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d908      	bls.n	800790e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078fc:	4b61      	ldr	r3, [pc, #388]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	495e      	ldr	r1, [pc, #376]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 800790a:	4313      	orrs	r3, r2
 800790c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d010      	beq.n	800793c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69da      	ldr	r2, [r3, #28]
 800791e:	4b59      	ldr	r3, [pc, #356]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007926:	429a      	cmp	r2, r3
 8007928:	d908      	bls.n	800793c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800792a:	4b56      	ldr	r3, [pc, #344]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	4953      	ldr	r1, [pc, #332]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007938:	4313      	orrs	r3, r2
 800793a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b00      	cmp	r3, #0
 8007946:	d010      	beq.n	800796a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4b4d      	ldr	r3, [pc, #308]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	f003 030f 	and.w	r3, r3, #15
 8007954:	429a      	cmp	r2, r3
 8007956:	d908      	bls.n	800796a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007958:	4b4a      	ldr	r3, [pc, #296]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	f023 020f 	bic.w	r2, r3, #15
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4947      	ldr	r1, [pc, #284]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007966:	4313      	orrs	r3, r2
 8007968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d055      	beq.n	8007a22 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007976:	4b43      	ldr	r3, [pc, #268]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	4940      	ldr	r1, [pc, #256]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007984:	4313      	orrs	r3, r2
 8007986:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d107      	bne.n	80079a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007990:	4b3c      	ldr	r3, [pc, #240]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d121      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e0f6      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d107      	bne.n	80079b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079a8:	4b36      	ldr	r3, [pc, #216]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d115      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e0ea      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d107      	bne.n	80079d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079c0:	4b30      	ldr	r3, [pc, #192]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d109      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e0de      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079d0:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e0d6      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079e0:	4b28      	ldr	r3, [pc, #160]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f023 0207 	bic.w	r2, r3, #7
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	4925      	ldr	r1, [pc, #148]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079f2:	f7fb f9b7 	bl	8002d64 <HAL_GetTick>
 80079f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079f8:	e00a      	b.n	8007a10 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079fa:	f7fb f9b3 	bl	8002d64 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e0be      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a10:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d1eb      	bne.n	80079fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d010      	beq.n	8007a50 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d208      	bcs.n	8007a50 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	f023 020f 	bic.w	r2, r3, #15
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	490e      	ldr	r1, [pc, #56]	; (8007a84 <HAL_RCC_ClockConfig+0x244>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 030f 	and.w	r3, r3, #15
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d214      	bcs.n	8007a88 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f023 020f 	bic.w	r2, r3, #15
 8007a66:	4906      	ldr	r1, [pc, #24]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6e:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <HAL_RCC_ClockConfig+0x240>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d005      	beq.n	8007a88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e086      	b.n	8007b8e <HAL_RCC_ClockConfig+0x34e>
 8007a80:	52002000 	.word	0x52002000
 8007a84:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d010      	beq.n	8007ab6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691a      	ldr	r2, [r3, #16]
 8007a98:	4b3f      	ldr	r3, [pc, #252]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d208      	bcs.n	8007ab6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007aa4:	4b3c      	ldr	r3, [pc, #240]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	4939      	ldr	r1, [pc, #228]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d010      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	695a      	ldr	r2, [r3, #20]
 8007ac6:	4b34      	ldr	r3, [pc, #208]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d208      	bcs.n	8007ae4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ad2:	4b31      	ldr	r3, [pc, #196]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007ad4:	69db      	ldr	r3, [r3, #28]
 8007ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	492e      	ldr	r1, [pc, #184]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d010      	beq.n	8007b12 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699a      	ldr	r2, [r3, #24]
 8007af4:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d208      	bcs.n	8007b12 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b00:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	4922      	ldr	r1, [pc, #136]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d010      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69da      	ldr	r2, [r3, #28]
 8007b22:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d208      	bcs.n	8007b40 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b2e:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	4917      	ldr	r1, [pc, #92]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b40:	f000 f834 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8007b44:	4602      	mov	r2, r0
 8007b46:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	0a1b      	lsrs	r3, r3, #8
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	4912      	ldr	r1, [pc, #72]	; (8007b9c <HAL_RCC_ClockConfig+0x35c>)
 8007b52:	5ccb      	ldrb	r3, [r1, r3]
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <HAL_RCC_ClockConfig+0x358>)
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f003 030f 	and.w	r3, r3, #15
 8007b66:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <HAL_RCC_ClockConfig+0x35c>)
 8007b68:	5cd3      	ldrb	r3, [r2, r3]
 8007b6a:	f003 031f 	and.w	r3, r3, #31
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
 8007b74:	4a0a      	ldr	r2, [pc, #40]	; (8007ba0 <HAL_RCC_ClockConfig+0x360>)
 8007b76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b78:	4a0a      	ldr	r2, [pc, #40]	; (8007ba4 <HAL_RCC_ClockConfig+0x364>)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007b7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <HAL_RCC_ClockConfig+0x368>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fb f8a4 	bl	8002cd0 <HAL_InitTick>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	0801013c 	.word	0x0801013c
 8007ba0:	24000ae8 	.word	0x24000ae8
 8007ba4:	24000ae4 	.word	0x24000ae4
 8007ba8:	24000aec 	.word	0x24000aec

08007bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b089      	sub	sp, #36	; 0x24
 8007bb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bb2:	4bb3      	ldr	r3, [pc, #716]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bba:	2b18      	cmp	r3, #24
 8007bbc:	f200 8155 	bhi.w	8007e6a <HAL_RCC_GetSysClockFreq+0x2be>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007c2d 	.word	0x08007c2d
 8007bcc:	08007e6b 	.word	0x08007e6b
 8007bd0:	08007e6b 	.word	0x08007e6b
 8007bd4:	08007e6b 	.word	0x08007e6b
 8007bd8:	08007e6b 	.word	0x08007e6b
 8007bdc:	08007e6b 	.word	0x08007e6b
 8007be0:	08007e6b 	.word	0x08007e6b
 8007be4:	08007e6b 	.word	0x08007e6b
 8007be8:	08007c53 	.word	0x08007c53
 8007bec:	08007e6b 	.word	0x08007e6b
 8007bf0:	08007e6b 	.word	0x08007e6b
 8007bf4:	08007e6b 	.word	0x08007e6b
 8007bf8:	08007e6b 	.word	0x08007e6b
 8007bfc:	08007e6b 	.word	0x08007e6b
 8007c00:	08007e6b 	.word	0x08007e6b
 8007c04:	08007e6b 	.word	0x08007e6b
 8007c08:	08007c59 	.word	0x08007c59
 8007c0c:	08007e6b 	.word	0x08007e6b
 8007c10:	08007e6b 	.word	0x08007e6b
 8007c14:	08007e6b 	.word	0x08007e6b
 8007c18:	08007e6b 	.word	0x08007e6b
 8007c1c:	08007e6b 	.word	0x08007e6b
 8007c20:	08007e6b 	.word	0x08007e6b
 8007c24:	08007e6b 	.word	0x08007e6b
 8007c28:	08007c5f 	.word	0x08007c5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c2c:	4b94      	ldr	r3, [pc, #592]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d009      	beq.n	8007c4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c38:	4b91      	ldr	r3, [pc, #580]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	08db      	lsrs	r3, r3, #3
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	4a90      	ldr	r2, [pc, #576]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c44:	fa22 f303 	lsr.w	r3, r2, r3
 8007c48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c4a:	e111      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c4c:	4b8d      	ldr	r3, [pc, #564]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c4e:	61bb      	str	r3, [r7, #24]
    break;
 8007c50:	e10e      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c52:	4b8d      	ldr	r3, [pc, #564]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c54:	61bb      	str	r3, [r7, #24]
    break;
 8007c56:	e10b      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c58:	4b8c      	ldr	r3, [pc, #560]	; (8007e8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c5a:	61bb      	str	r3, [r7, #24]
    break;
 8007c5c:	e108      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c5e:	4b88      	ldr	r3, [pc, #544]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c68:	4b85      	ldr	r3, [pc, #532]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	091b      	lsrs	r3, r3, #4
 8007c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c74:	4b82      	ldr	r3, [pc, #520]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c7e:	4b80      	ldr	r3, [pc, #512]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	fb02 f303 	mul.w	r3, r2, r3
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80e1 	beq.w	8007e64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	f000 8083 	beq.w	8007db0 <HAL_RCC_GetSysClockFreq+0x204>
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	f200 80a1 	bhi.w	8007df4 <HAL_RCC_GetSysClockFreq+0x248>
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x114>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d056      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007cbe:	e099      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc0:	4b6f      	ldr	r3, [pc, #444]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0320 	and.w	r3, r3, #32
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02d      	beq.n	8007d28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ccc:	4b6c      	ldr	r3, [pc, #432]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	08db      	lsrs	r3, r3, #3
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	4a6b      	ldr	r2, [pc, #428]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8007cdc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b62      	ldr	r3, [pc, #392]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d26:	e087      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007e94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d3a:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d6a:	e065      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	ee07 3a90 	vmov	s15, r3
 8007d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007e98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7e:	4b40      	ldr	r3, [pc, #256]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dae:	e043      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	ee07 3a90 	vmov	s15, r3
 8007db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007e9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dc2:	4b2f      	ldr	r3, [pc, #188]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dca:	ee07 3a90 	vmov	s15, r3
 8007dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007df2:	e021      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007e98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e06:	4b1e      	ldr	r3, [pc, #120]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e16:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007e90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e38:	4b11      	ldr	r3, [pc, #68]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	0a5b      	lsrs	r3, r3, #9
 8007e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e42:	3301      	adds	r3, #1
 8007e44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	ee07 3a90 	vmov	s15, r3
 8007e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5c:	ee17 3a90 	vmov	r3, s15
 8007e60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e62:	e005      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61bb      	str	r3, [r7, #24]
    break;
 8007e68:	e002      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007e6a:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e6c:	61bb      	str	r3, [r7, #24]
    break;
 8007e6e:	bf00      	nop
  }

  return sysclockfreq;
 8007e70:	69bb      	ldr	r3, [r7, #24]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3724      	adds	r7, #36	; 0x24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	58024400 	.word	0x58024400
 8007e84:	03d09000 	.word	0x03d09000
 8007e88:	003d0900 	.word	0x003d0900
 8007e8c:	017d7840 	.word	0x017d7840
 8007e90:	46000000 	.word	0x46000000
 8007e94:	4c742400 	.word	0x4c742400
 8007e98:	4a742400 	.word	0x4a742400
 8007e9c:	4bbebc20 	.word	0x4bbebc20

08007ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ea6:	f7ff fe81 	bl	8007bac <HAL_RCC_GetSysClockFreq>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	0a1b      	lsrs	r3, r3, #8
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	490f      	ldr	r1, [pc, #60]	; (8007ef4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eb8:	5ccb      	ldrb	r3, [r1, r3]
 8007eba:	f003 031f 	and.w	r3, r3, #31
 8007ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8007ec2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f003 030f 	and.w	r3, r3, #15
 8007ecc:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007ece:	5cd3      	ldrb	r3, [r2, r3]
 8007ed0:	f003 031f 	and.w	r3, r3, #31
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eda:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007edc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ede:	4a07      	ldr	r2, [pc, #28]	; (8007efc <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	0801013c 	.word	0x0801013c
 8007ef8:	24000ae8 	.word	0x24000ae8
 8007efc:	24000ae4 	.word	0x24000ae4

08007f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007f04:	f7ff ffcc 	bl	8007ea0 <HAL_RCC_GetHCLKFreq>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	091b      	lsrs	r3, r3, #4
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	4904      	ldr	r1, [pc, #16]	; (8007f28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f16:	5ccb      	ldrb	r3, [r1, r3]
 8007f18:	f003 031f 	and.w	r3, r3, #31
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	58024400 	.word	0x58024400
 8007f28:	0801013c 	.word	0x0801013c

08007f2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f30:	f7ff ffb6 	bl	8007ea0 <HAL_RCC_GetHCLKFreq>
 8007f34:	4602      	mov	r2, r0
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	4904      	ldr	r1, [pc, #16]	; (8007f54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f42:	5ccb      	ldrb	r3, [r1, r3]
 8007f44:	f003 031f 	and.w	r3, r3, #31
 8007f48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	58024400 	.word	0x58024400
 8007f54:	0801013c 	.word	0x0801013c

08007f58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f60:	2300      	movs	r3, #0
 8007f62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f64:	2300      	movs	r3, #0
 8007f66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d03f      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f7c:	d02a      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007f7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f82:	d824      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f88:	d018      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f8e:	d81e      	bhi.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f98:	d007      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007f9a:	e018      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9c:	4bab      	ldr	r3, [pc, #684]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	4aaa      	ldr	r2, [pc, #680]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fa8:	e015      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3304      	adds	r3, #4
 8007fae:	2102      	movs	r1, #2
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 feff 	bl	8009db4 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fba:	e00c      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3324      	adds	r3, #36	; 0x24
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 ffa8 	bl	8009f18 <RCCEx_PLL3_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007fcc:	e003      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd2:	e000      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fd6:	7dfb      	ldrb	r3, [r7, #23]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fdc:	4b9b      	ldr	r3, [pc, #620]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe8:	4998      	ldr	r1, [pc, #608]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	650b      	str	r3, [r1, #80]	; 0x50
 8007fee:	e001      	b.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d03d      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	2b04      	cmp	r3, #4
 8008006:	d826      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008008:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800800a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800e:	bf00      	nop
 8008010:	08008025 	.word	0x08008025
 8008014:	08008033 	.word	0x08008033
 8008018:	08008045 	.word	0x08008045
 800801c:	0800805d 	.word	0x0800805d
 8008020:	0800805d 	.word	0x0800805d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008024:	4b89      	ldr	r3, [pc, #548]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4a88      	ldr	r2, [pc, #544]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800802a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800802e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008030:	e015      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3304      	adds	r3, #4
 8008036:	2100      	movs	r1, #0
 8008038:	4618      	mov	r0, r3
 800803a:	f001 febb 	bl	8009db4 <RCCEx_PLL2_Config>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008042:	e00c      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3324      	adds	r3, #36	; 0x24
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f001 ff64 	bl	8009f18 <RCCEx_PLL3_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008054:	e003      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
      break;
 800805a:	e000      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800805c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d109      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008064:	4b79      	ldr	r3, [pc, #484]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008068:	f023 0207 	bic.w	r2, r3, #7
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	4976      	ldr	r1, [pc, #472]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008072:	4313      	orrs	r3, r2
 8008074:	650b      	str	r3, [r1, #80]	; 0x50
 8008076:	e001      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008084:	2b00      	cmp	r3, #0
 8008086:	d051      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800808e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008092:	d036      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008094:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008098:	d830      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800809a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800809e:	d032      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80080a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080a4:	d82a      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80080a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080aa:	d02e      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80080ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80080b0:	d824      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80080b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b6:	d018      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x192>
 80080b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080bc:	d81e      	bhi.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x172>
 80080c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c6:	d007      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80080c8:	e018      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ca:	4b60      	ldr	r3, [pc, #384]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	4a5f      	ldr	r2, [pc, #380]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080d6:	e019      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fe68 	bl	8009db4 <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080e8:	e010      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3324      	adds	r3, #36	; 0x24
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f001 ff11 	bl	8009f18 <RCCEx_PLL3_Config>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080fa:	e007      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	e004      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008102:	bf00      	nop
 8008104:	e002      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008106:	bf00      	nop
 8008108:	e000      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800810a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008112:	4b4e      	ldr	r3, [pc, #312]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008116:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008120:	494a      	ldr	r1, [pc, #296]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008122:	4313      	orrs	r3, r2
 8008124:	658b      	str	r3, [r1, #88]	; 0x58
 8008126:	e001      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008134:	2b00      	cmp	r3, #0
 8008136:	d051      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800813e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008142:	d036      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8008144:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008148:	d830      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800814a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800814e:	d032      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8008150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008154:	d82a      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800815a:	d02e      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x262>
 800815c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008160:	d824      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8008162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008166:	d018      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8008168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800816c:	d81e      	bhi.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8008172:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008176:	d007      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008178:	e018      	b.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800817a:	4b34      	ldr	r3, [pc, #208]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	4a33      	ldr	r2, [pc, #204]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008186:	e019      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f001 fe10 	bl	8009db4 <RCCEx_PLL2_Config>
 8008194:	4603      	mov	r3, r0
 8008196:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008198:	e010      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3324      	adds	r3, #36	; 0x24
 800819e:	2100      	movs	r1, #0
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 feb9 	bl	8009f18 <RCCEx_PLL3_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081aa:	e007      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
      break;
 80081b0:	e004      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80081b2:	bf00      	nop
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80081ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081c2:	4b22      	ldr	r3, [pc, #136]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081d0:	491e      	ldr	r1, [pc, #120]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	658b      	str	r3, [r1, #88]	; 0x58
 80081d6:	e001      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d035      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ec:	2b30      	cmp	r3, #48	; 0x30
 80081ee:	d01c      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80081f0:	2b30      	cmp	r3, #48	; 0x30
 80081f2:	d817      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d00c      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d813      	bhi.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d016      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008200:	2b10      	cmp	r3, #16
 8008202:	d10f      	bne.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008204:	4b11      	ldr	r3, [pc, #68]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a10      	ldr	r2, [pc, #64]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800820a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800820e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008210:	e00e      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3304      	adds	r3, #4
 8008216:	2102      	movs	r1, #2
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fdcb 	bl	8009db4 <RCCEx_PLL2_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008222:	e005      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	75fb      	strb	r3, [r7, #23]
      break;
 8008228:	e002      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800822e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008230:	7dfb      	ldrb	r3, [r7, #23]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10c      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008236:	4b05      	ldr	r3, [pc, #20]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800823a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008242:	4902      	ldr	r1, [pc, #8]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008244:	4313      	orrs	r3, r2
 8008246:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008248:	e004      	b.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d047      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008268:	d030      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800826a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800826e:	d82a      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008270:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008274:	d02c      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8008276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800827a:	d824      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800827c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008280:	d018      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008286:	d81e      	bhi.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800828c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008290:	d007      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008292:	e018      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008294:	4bac      	ldr	r3, [pc, #688]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	4aab      	ldr	r2, [pc, #684]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800829a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800829e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082a0:	e017      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	2100      	movs	r1, #0
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 fd83 	bl	8009db4 <RCCEx_PLL2_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082b2:	e00e      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3324      	adds	r3, #36	; 0x24
 80082b8:	2100      	movs	r1, #0
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fe2c 	bl	8009f18 <RCCEx_PLL3_Config>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80082c4:	e005      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ca:	e002      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80082cc:	bf00      	nop
 80082ce:	e000      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80082d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d109      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082d8:	4b9b      	ldr	r3, [pc, #620]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e4:	4998      	ldr	r1, [pc, #608]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	650b      	str	r3, [r1, #80]	; 0x50
 80082ea:	e001      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d049      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008304:	d02e      	beq.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8008306:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800830a:	d828      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800830c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008310:	d02a      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008316:	d822      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800831c:	d026      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800831e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008322:	d81c      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008328:	d010      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800832a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800832e:	d816      	bhi.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d01d      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008338:	d111      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3304      	adds	r3, #4
 800833e:	2101      	movs	r1, #1
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fd37 	bl	8009db4 <RCCEx_PLL2_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800834a:	e012      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	2101      	movs	r1, #1
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fde0 	bl	8009f18 <RCCEx_PLL3_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800835c:	e009      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	75fb      	strb	r3, [r7, #23]
      break;
 8008362:	e006      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008364:	bf00      	nop
 8008366:	e004      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008368:	bf00      	nop
 800836a:	e002      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800836c:	bf00      	nop
 800836e:	e000      	b.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008378:	4b73      	ldr	r3, [pc, #460]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800837a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008384:	4970      	ldr	r1, [pc, #448]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008386:	4313      	orrs	r3, r2
 8008388:	650b      	str	r3, [r1, #80]	; 0x50
 800838a:	e001      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d04b      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083a6:	d02e      	beq.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80083a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083ac:	d828      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b2:	d02a      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b8:	d822      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80083ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083be:	d026      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80083c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083c4:	d81c      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ca:	d010      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x496>
 80083cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d0:	d816      	bhi.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d01d      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80083d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083da:	d111      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	2101      	movs	r1, #1
 80083e2:	4618      	mov	r0, r3
 80083e4:	f001 fce6 	bl	8009db4 <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083ec:	e012      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3324      	adds	r3, #36	; 0x24
 80083f2:	2101      	movs	r1, #1
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fd8f 	bl	8009f18 <RCCEx_PLL3_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80083fe:	e009      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
      break;
 8008404:	e006      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008406:	bf00      	nop
 8008408:	e004      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800840a:	bf00      	nop
 800840c:	e002      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800840e:	bf00      	nop
 8008410:	e000      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800841a:	4b4b      	ldr	r3, [pc, #300]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800841c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800841e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008428:	4947      	ldr	r1, [pc, #284]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800842a:	4313      	orrs	r3, r2
 800842c:	658b      	str	r3, [r1, #88]	; 0x58
 800842e:	e001      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d02f      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008448:	d00e      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800844a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800844e:	d814      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d015      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008458:	d10f      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800845a:	4b3b      	ldr	r3, [pc, #236]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	4a3a      	ldr	r2, [pc, #232]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008464:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008466:	e00c      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	2101      	movs	r1, #1
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fca0 	bl	8009db4 <RCCEx_PLL2_Config>
 8008474:	4603      	mov	r3, r0
 8008476:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008478:	e003      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
      break;
 800847e:	e000      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d109      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008488:	4b2f      	ldr	r3, [pc, #188]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800848a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008494:	492c      	ldr	r1, [pc, #176]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008496:	4313      	orrs	r3, r2
 8008498:	650b      	str	r3, [r1, #80]	; 0x50
 800849a:	e001      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d032      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d81b      	bhi.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x594>
 80084b4:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084f3 	.word	0x080084f3
 80084c0:	080084cd 	.word	0x080084cd
 80084c4:	080084db 	.word	0x080084db
 80084c8:	080084f3 	.word	0x080084f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084cc:	4b1e      	ldr	r3, [pc, #120]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80084ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d0:	4a1d      	ldr	r2, [pc, #116]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80084d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084d8:	e00c      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3304      	adds	r3, #4
 80084de:	2102      	movs	r1, #2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fc67 	bl	8009db4 <RCCEx_PLL2_Config>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80084ea:	e003      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	e000      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80084f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084fa:	4b13      	ldr	r3, [pc, #76]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80084fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084fe:	f023 0203 	bic.w	r2, r3, #3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	4910      	ldr	r1, [pc, #64]	; (8008548 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008508:	4313      	orrs	r3, r2
 800850a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800850c:	e001      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800850e:	7dfb      	ldrb	r3, [r7, #23]
 8008510:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 808a 	beq.w	8008634 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008520:	4b0a      	ldr	r3, [pc, #40]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a09      	ldr	r2, [pc, #36]	; (800854c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8008526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800852c:	f7fa fc1a 	bl	8002d64 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008532:	e00d      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008534:	f7fa fc16 	bl	8002d64 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b64      	cmp	r3, #100	; 0x64
 8008540:	d906      	bls.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	75fb      	strb	r3, [r7, #23]
        break;
 8008546:	e009      	b.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008548:	58024400 	.word	0x58024400
 800854c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008550:	4bb9      	ldr	r3, [pc, #740]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0eb      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d166      	bne.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008562:	4bb6      	ldr	r3, [pc, #728]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008564:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800856c:	4053      	eors	r3, r2
 800856e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008572:	2b00      	cmp	r3, #0
 8008574:	d013      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008576:	4bb1      	ldr	r3, [pc, #708]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008580:	4bae      	ldr	r3, [pc, #696]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008584:	4aad      	ldr	r2, [pc, #692]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800858a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800858c:	4bab      	ldr	r3, [pc, #684]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	4aaa      	ldr	r2, [pc, #680]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008596:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008598:	4aa8      	ldr	r2, [pc, #672]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085a8:	d115      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085aa:	f7fa fbdb 	bl	8002d64 <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085b0:	e00b      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085b2:	f7fa fbd7 	bl	8002d64 <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d902      	bls.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	75fb      	strb	r3, [r7, #23]
            break;
 80085c8:	e005      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ca:	4b9c      	ldr	r3, [pc, #624]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80085cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0ed      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d126      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ea:	d10d      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80085ec:	4b93      	ldr	r3, [pc, #588]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085fa:	0919      	lsrs	r1, r3, #4
 80085fc:	4b90      	ldr	r3, [pc, #576]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80085fe:	400b      	ands	r3, r1
 8008600:	498e      	ldr	r1, [pc, #568]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008602:	4313      	orrs	r3, r2
 8008604:	610b      	str	r3, [r1, #16]
 8008606:	e005      	b.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8008608:	4b8c      	ldr	r3, [pc, #560]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	4a8b      	ldr	r2, [pc, #556]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800860e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008612:	6113      	str	r3, [r2, #16]
 8008614:	4b89      	ldr	r3, [pc, #548]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800861e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008622:	4986      	ldr	r1, [pc, #536]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008624:	4313      	orrs	r3, r2
 8008626:	670b      	str	r3, [r1, #112]	; 0x70
 8008628:	e004      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
 800862c:	75bb      	strb	r3, [r7, #22]
 800862e:	e001      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008630:	7dfb      	ldrb	r3, [r7, #23]
 8008632:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	2b00      	cmp	r3, #0
 800863e:	d07e      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008644:	2b28      	cmp	r3, #40	; 0x28
 8008646:	d867      	bhi.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	0800871f 	.word	0x0800871f
 8008654:	08008719 	.word	0x08008719
 8008658:	08008719 	.word	0x08008719
 800865c:	08008719 	.word	0x08008719
 8008660:	08008719 	.word	0x08008719
 8008664:	08008719 	.word	0x08008719
 8008668:	08008719 	.word	0x08008719
 800866c:	08008719 	.word	0x08008719
 8008670:	080086f5 	.word	0x080086f5
 8008674:	08008719 	.word	0x08008719
 8008678:	08008719 	.word	0x08008719
 800867c:	08008719 	.word	0x08008719
 8008680:	08008719 	.word	0x08008719
 8008684:	08008719 	.word	0x08008719
 8008688:	08008719 	.word	0x08008719
 800868c:	08008719 	.word	0x08008719
 8008690:	08008707 	.word	0x08008707
 8008694:	08008719 	.word	0x08008719
 8008698:	08008719 	.word	0x08008719
 800869c:	08008719 	.word	0x08008719
 80086a0:	08008719 	.word	0x08008719
 80086a4:	08008719 	.word	0x08008719
 80086a8:	08008719 	.word	0x08008719
 80086ac:	08008719 	.word	0x08008719
 80086b0:	0800871f 	.word	0x0800871f
 80086b4:	08008719 	.word	0x08008719
 80086b8:	08008719 	.word	0x08008719
 80086bc:	08008719 	.word	0x08008719
 80086c0:	08008719 	.word	0x08008719
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008719 	.word	0x08008719
 80086cc:	08008719 	.word	0x08008719
 80086d0:	0800871f 	.word	0x0800871f
 80086d4:	08008719 	.word	0x08008719
 80086d8:	08008719 	.word	0x08008719
 80086dc:	08008719 	.word	0x08008719
 80086e0:	08008719 	.word	0x08008719
 80086e4:	08008719 	.word	0x08008719
 80086e8:	08008719 	.word	0x08008719
 80086ec:	08008719 	.word	0x08008719
 80086f0:	0800871f 	.word	0x0800871f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3304      	adds	r3, #4
 80086f8:	2101      	movs	r1, #1
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fb5a 	bl	8009db4 <RCCEx_PLL2_Config>
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008704:	e00c      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3324      	adds	r3, #36	; 0x24
 800870a:	2101      	movs	r1, #1
 800870c:	4618      	mov	r0, r3
 800870e:	f001 fc03 	bl	8009f18 <RCCEx_PLL3_Config>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008716:	e003      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
      break;
 800871c:	e000      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800871e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008720:	7dfb      	ldrb	r3, [r7, #23]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008726:	4b45      	ldr	r3, [pc, #276]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008732:	4942      	ldr	r1, [pc, #264]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008734:	4313      	orrs	r3, r2
 8008736:	654b      	str	r3, [r1, #84]	; 0x54
 8008738:	e001      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d037      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874e:	2b05      	cmp	r3, #5
 8008750:	d820      	bhi.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	0800879b 	.word	0x0800879b
 800875c:	08008771 	.word	0x08008771
 8008760:	08008783 	.word	0x08008783
 8008764:	0800879b 	.word	0x0800879b
 8008768:	0800879b 	.word	0x0800879b
 800876c:	0800879b 	.word	0x0800879b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3304      	adds	r3, #4
 8008774:	2101      	movs	r1, #1
 8008776:	4618      	mov	r0, r3
 8008778:	f001 fb1c 	bl	8009db4 <RCCEx_PLL2_Config>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008780:	e00c      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3324      	adds	r3, #36	; 0x24
 8008786:	2101      	movs	r1, #1
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fbc5 	bl	8009f18 <RCCEx_PLL3_Config>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008792:	e003      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	75fb      	strb	r3, [r7, #23]
      break;
 8008798:	e000      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800879a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	f023 0207 	bic.w	r2, r3, #7
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	4923      	ldr	r1, [pc, #140]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80087b0:	4313      	orrs	r3, r2
 80087b2:	654b      	str	r3, [r1, #84]	; 0x54
 80087b4:	e001      	b.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d040      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	d821      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80087d0:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80087d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d6:	bf00      	nop
 80087d8:	0800881b 	.word	0x0800881b
 80087dc:	080087f1 	.word	0x080087f1
 80087e0:	08008803 	.word	0x08008803
 80087e4:	0800881b 	.word	0x0800881b
 80087e8:	0800881b 	.word	0x0800881b
 80087ec:	0800881b 	.word	0x0800881b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	2101      	movs	r1, #1
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 fadc 	bl	8009db4 <RCCEx_PLL2_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008800:	e00c      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3324      	adds	r3, #36	; 0x24
 8008806:	2101      	movs	r1, #1
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fb85 	bl	8009f18 <RCCEx_PLL3_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008812:	e003      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
      break;
 8008818:	e000      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800881a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800881c:	7dfb      	ldrb	r3, [r7, #23]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d110      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008822:	4b06      	ldr	r3, [pc, #24]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008826:	f023 0207 	bic.w	r2, r3, #7
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008830:	4902      	ldr	r1, [pc, #8]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008832:	4313      	orrs	r3, r2
 8008834:	658b      	str	r3, [r1, #88]	; 0x58
 8008836:	e007      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8008838:	58024800 	.word	0x58024800
 800883c:	58024400 	.word	0x58024400
 8008840:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0320 	and.w	r3, r3, #32
 8008850:	2b00      	cmp	r3, #0
 8008852:	d04b      	beq.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800885e:	d02e      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008864:	d828      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d02a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008870:	d822      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008872:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008876:	d026      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008878:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800887c:	d81c      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800887e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008882:	d010      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008888:	d816      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d01d      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x972>
 800888e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008892:	d111      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3304      	adds	r3, #4
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fa8a 	bl	8009db4 <RCCEx_PLL2_Config>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088a4:	e012      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3324      	adds	r3, #36	; 0x24
 80088aa:	2102      	movs	r1, #2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fb33 	bl	8009f18 <RCCEx_PLL3_Config>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80088b6:	e009      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
      break;
 80088bc:	e006      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80088be:	bf00      	nop
 80088c0:	e004      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80088c2:	bf00      	nop
 80088c4:	e002      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80088c6:	bf00      	nop
 80088c8:	e000      	b.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80088ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088d2:	4bb2      	ldr	r3, [pc, #712]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e0:	49ae      	ldr	r1, [pc, #696]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	654b      	str	r3, [r1, #84]	; 0x54
 80088e6:	e001      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d04b      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008902:	d02e      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008904:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008908:	d828      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800890a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890e:	d02a      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008914:	d822      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800891a:	d026      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800891c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008920:	d81c      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008926:	d010      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8008928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800892c:	d816      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800892e:	2b00      	cmp	r3, #0
 8008930:	d01d      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8008932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008936:	d111      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	2100      	movs	r1, #0
 800893e:	4618      	mov	r0, r3
 8008940:	f001 fa38 	bl	8009db4 <RCCEx_PLL2_Config>
 8008944:	4603      	mov	r3, r0
 8008946:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008948:	e012      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3324      	adds	r3, #36	; 0x24
 800894e:	2102      	movs	r1, #2
 8008950:	4618      	mov	r0, r3
 8008952:	f001 fae1 	bl	8009f18 <RCCEx_PLL3_Config>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800895a:	e009      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	75fb      	strb	r3, [r7, #23]
      break;
 8008960:	e006      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008962:	bf00      	nop
 8008964:	e004      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8008966:	bf00      	nop
 8008968:	e002      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800896a:	bf00      	nop
 800896c:	e000      	b.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800896e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008976:	4b89      	ldr	r3, [pc, #548]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008984:	4985      	ldr	r1, [pc, #532]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008986:	4313      	orrs	r3, r2
 8008988:	658b      	str	r3, [r1, #88]	; 0x58
 800898a:	e001      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008998:	2b00      	cmp	r3, #0
 800899a:	d04b      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089a6:	d02e      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80089a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80089ac:	d828      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80089ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b2:	d02a      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80089b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b8:	d822      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80089ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089be:	d026      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80089c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80089c4:	d81c      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80089c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089ca:	d010      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80089cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089d0:	d816      	bhi.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01d      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80089d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089da:	d111      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3304      	adds	r3, #4
 80089e0:	2100      	movs	r1, #0
 80089e2:	4618      	mov	r0, r3
 80089e4:	f001 f9e6 	bl	8009db4 <RCCEx_PLL2_Config>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089ec:	e012      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3324      	adds	r3, #36	; 0x24
 80089f2:	2102      	movs	r1, #2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 fa8f 	bl	8009f18 <RCCEx_PLL3_Config>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80089fe:	e009      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
      break;
 8008a04:	e006      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008a06:	bf00      	nop
 8008a08:	e004      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008a12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a1a:	4b60      	ldr	r3, [pc, #384]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a28:	495c      	ldr	r1, [pc, #368]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	658b      	str	r3, [r1, #88]	; 0x58
 8008a2e:	e001      	b.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0308 	and.w	r3, r3, #8
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d018      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a48:	d10a      	bne.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3324      	adds	r3, #36	; 0x24
 8008a4e:	2102      	movs	r1, #2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fa61 	bl	8009f18 <RCCEx_PLL3_Config>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008a60:	4b4e      	ldr	r3, [pc, #312]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a6c:	494b      	ldr	r1, [pc, #300]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01a      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a88:	d10a      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3324      	adds	r3, #36	; 0x24
 8008a8e:	2102      	movs	r1, #2
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fa41 	bl	8009f18 <RCCEx_PLL3_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008aa0:	4b3e      	ldr	r3, [pc, #248]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aae:	493b      	ldr	r1, [pc, #236]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d034      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aca:	d01d      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ad0:	d817      	bhi.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ada:	d009      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008adc:	e011      	b.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f001 f965 	bl	8009db4 <RCCEx_PLL2_Config>
 8008aea:	4603      	mov	r3, r0
 8008aec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008aee:	e00c      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	3324      	adds	r3, #36	; 0x24
 8008af4:	2102      	movs	r1, #2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f001 fa0e 	bl	8009f18 <RCCEx_PLL3_Config>
 8008afc:	4603      	mov	r3, r0
 8008afe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b00:	e003      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	75fb      	strb	r3, [r7, #23]
      break;
 8008b06:	e000      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b10:	4b22      	ldr	r3, [pc, #136]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b1e:	491f      	ldr	r1, [pc, #124]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	658b      	str	r3, [r1, #88]	; 0x58
 8008b24:	e001      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
 8008b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d036      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b40:	d01c      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008b42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b46:	d816      	bhi.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008b48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b4c:	d003      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b52:	d007      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008b54:	e00f      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5a:	4a10      	ldr	r2, [pc, #64]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b62:	e00c      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3324      	adds	r3, #36	; 0x24
 8008b68:	2101      	movs	r1, #1
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 f9d4 	bl	8009f18 <RCCEx_PLL3_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008b74:	e003      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7a:	e000      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10d      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b92:	4902      	ldr	r1, [pc, #8]	; (8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	654b      	str	r3, [r1, #84]	; 0x54
 8008b98:	e004      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008b9a:	bf00      	nop
 8008b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d029      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bbc:	d007      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008bbe:	e00f      	b.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc0:	4b61      	ldr	r3, [pc, #388]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	4a60      	ldr	r2, [pc, #384]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bcc:	e00b      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	2102      	movs	r1, #2
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 f8ed 	bl	8009db4 <RCCEx_PLL2_Config>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008bde:	e002      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]
      break;
 8008be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008bec:	4b56      	ldr	r3, [pc, #344]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf8:	4953      	ldr	r1, [pc, #332]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008bfe:	e001      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3324      	adds	r3, #36	; 0x24
 8008c14:	2102      	movs	r1, #2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f001 f97e 	bl	8009f18 <RCCEx_PLL3_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d030      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c3a:	d017      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008c3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c40:	d811      	bhi.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c46:	d013      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c4c:	d80b      	bhi.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d010      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c56:	d106      	bne.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c58:	4b3b      	ldr	r3, [pc, #236]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a3a      	ldr	r2, [pc, #232]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008c64:	e007      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	75fb      	strb	r3, [r7, #23]
      break;
 8008c6a:	e004      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e002      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c76:	7dfb      	ldrb	r3, [r7, #23]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c7c:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c88:	492f      	ldr	r1, [pc, #188]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	654b      	str	r3, [r1, #84]	; 0x54
 8008c8e:	e001      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ca0:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cac:	4926      	ldr	r1, [pc, #152]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cbe:	4b22      	ldr	r3, [pc, #136]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cca:	491f      	ldr	r1, [pc, #124]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00d      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	4a19      	ldr	r2, [pc, #100]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ce6:	6113      	str	r3, [r2, #16]
 8008ce8:	4b17      	ldr	r3, [pc, #92]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cea:	691a      	ldr	r2, [r3, #16]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cf2:	4915      	ldr	r1, [pc, #84]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	da08      	bge.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d00:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0c:	490e      	ldr	r1, [pc, #56]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d1e:	4b0a      	ldr	r3, [pc, #40]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d2c:	4906      	ldr	r1, [pc, #24]	; (8008d48 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008d32:	7dbb      	ldrb	r3, [r7, #22]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	e000      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	58024400 	.word	0x58024400

08008d4c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b090      	sub	sp, #64	; 0x40
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d5a:	f040 8089 	bne.w	8008e70 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008d5e:	4b95      	ldr	r3, [pc, #596]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
 8008d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d87d      	bhi.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008d6e:	a201      	add	r2, pc, #4	; (adr r2, 8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008d89 	.word	0x08008d89
 8008d78:	08008dad 	.word	0x08008dad
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008e65 	.word	0x08008e65
 8008d84:	08008df5 	.word	0x08008df5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d88:	4b8a      	ldr	r3, [pc, #552]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d94:	d107      	bne.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 feb8 	bl	8009b10 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008da4:	e3ed      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008daa:	e3ea      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008dac:	4b81      	ldr	r3, [pc, #516]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008db8:	d107      	bne.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dba:	f107 0318 	add.w	r3, r7, #24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fbfe 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dc8:	e3db      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dce:	e3d8      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008dd0:	4b78      	ldr	r3, [pc, #480]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ddc:	d107      	bne.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fd40 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008dec:	e3c9      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008df2:	e3c6      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008df4:	4b6f      	ldr	r3, [pc, #444]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dfe:	4b6d      	ldr	r3, [pc, #436]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e10:	4b68      	ldr	r3, [pc, #416]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	08db      	lsrs	r3, r3, #3
 8008e16:	f003 0303 	and.w	r3, r3, #3
 8008e1a:	4a67      	ldr	r2, [pc, #412]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e22:	e01e      	b.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e24:	4b63      	ldr	r3, [pc, #396]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e30:	d106      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e38:	d102      	bne.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e3a:	4b60      	ldr	r3, [pc, #384]	; (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e3e:	e010      	b.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e40:	4b5c      	ldr	r3, [pc, #368]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e4c:	d106      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e54:	d102      	bne.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e56:	4b5a      	ldr	r3, [pc, #360]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e5a:	e002      	b.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e60:	e38f      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008e62:	e38e      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008e64:	4b57      	ldr	r3, [pc, #348]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e68:	e38b      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e6e:	e388      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e76:	f040 80a7 	bne.w	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008e7a:	4b4e      	ldr	r3, [pc, #312]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008e82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e8a:	d054      	beq.n	8008f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e92:	f200 808b 	bhi.w	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e9c:	f000 8083 	beq.w	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ea6:	f200 8081 	bhi.w	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eb0:	d02f      	beq.n	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eb8:	d878      	bhi.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ec6:	d012      	beq.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008ec8:	e070      	b.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008eca:	4b3a      	ldr	r3, [pc, #232]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 fe17 	bl	8009b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ee6:	e34c      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008eec:	e349      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eee:	4b31      	ldr	r3, [pc, #196]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008efa:	d107      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efc:	f107 0318 	add.w	r3, r7, #24
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fb5d 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f0a:	e33a      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f10:	e337      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f12:	4b28      	ldr	r3, [pc, #160]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f1e:	d107      	bne.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fc9f 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f2e:	e328      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f34:	e325      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f36:	4b1f      	ldr	r3, [pc, #124]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f3e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f40:	4b1c      	ldr	r3, [pc, #112]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0304 	and.w	r3, r3, #4
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d10c      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f52:	4b18      	ldr	r3, [pc, #96]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	08db      	lsrs	r3, r3, #3
 8008f58:	f003 0303 	and.w	r3, r3, #3
 8008f5c:	4a16      	ldr	r2, [pc, #88]	; (8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f64:	e01e      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f66:	4b13      	ldr	r3, [pc, #76]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f72:	d106      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f7a:	d102      	bne.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f80:	e010      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f8e:	d106      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f96:	d102      	bne.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008fa2:	e2ee      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008fa4:	e2ed      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008faa:	e2ea      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb0:	e2e7      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8008fb2:	bf00      	nop
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	03d09000 	.word	0x03d09000
 8008fbc:	003d0900 	.word	0x003d0900
 8008fc0:	017d7840 	.word	0x017d7840
 8008fc4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fce:	f040 809c 	bne.w	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008fd2:	4b9e      	ldr	r3, [pc, #632]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008fda:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe2:	d054      	beq.n	800908e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fea:	f200 808b 	bhi.w	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ff4:	f000 8083 	beq.w	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ffe:	f200 8081 	bhi.w	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009008:	d02f      	beq.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009010:	d878      	bhi.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	2b00      	cmp	r3, #0
 8009016:	d004      	beq.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800901e:	d012      	beq.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009020:	e070      	b.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009022:	4b8a      	ldr	r3, [pc, #552]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800902a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800902e:	d107      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fd6b 	bl	8009b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800903e:	e2a0      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009044:	e29d      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009046:	4b81      	ldr	r3, [pc, #516]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800904e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009052:	d107      	bne.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009054:	f107 0318 	add.w	r3, r7, #24
 8009058:	4618      	mov	r0, r3
 800905a:	f000 fab1 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8009062:	e28e      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009068:	e28b      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800906a:	4b78      	ldr	r3, [pc, #480]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009076:	d107      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009078:	f107 030c 	add.w	r3, r7, #12
 800907c:	4618      	mov	r0, r3
 800907e:	f000 fbf3 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009086:	e27c      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800908c:	e279      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800908e:	4b6f      	ldr	r3, [pc, #444]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009096:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009098:	4b6c      	ldr	r3, [pc, #432]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d10c      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d109      	bne.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090aa:	4b68      	ldr	r3, [pc, #416]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	08db      	lsrs	r3, r3, #3
 80090b0:	f003 0303 	and.w	r3, r3, #3
 80090b4:	4a66      	ldr	r2, [pc, #408]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80090b6:	fa22 f303 	lsr.w	r3, r2, r3
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090bc:	e01e      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090be:	4b63      	ldr	r3, [pc, #396]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ca:	d106      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80090cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d2:	d102      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80090d4:	4b5f      	ldr	r3, [pc, #380]	; (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80090d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090d8:	e010      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090da:	4b5c      	ldr	r3, [pc, #368]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090e6:	d106      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80090e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ee:	d102      	bne.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80090f0:	4b59      	ldr	r3, [pc, #356]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090f4:	e002      	b.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80090fa:	e242      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80090fc:	e241      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090fe:	4b57      	ldr	r3, [pc, #348]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009102:	e23e      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009108:	e23b      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009110:	f040 80a6 	bne.w	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009114:	4b4d      	ldr	r3, [pc, #308]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009118:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800911c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009124:	d054      	beq.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800912c:	f200 808b 	bhi.w	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009136:	f000 8083 	beq.w	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009140:	f200 8081 	bhi.w	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800914a:	d02f      	beq.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009152:	d878      	bhi.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	2b00      	cmp	r3, #0
 8009158:	d004      	beq.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009160:	d012      	beq.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8009162:	e070      	b.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009164:	4b39      	ldr	r3, [pc, #228]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800916c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009170:	d107      	bne.n	8009182 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fcca 	bl	8009b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009180:	e1ff      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009186:	e1fc      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009188:	4b30      	ldr	r3, [pc, #192]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009194:	d107      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009196:	f107 0318 	add.w	r3, r7, #24
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fa10 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091a4:	e1ed      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091aa:	e1ea      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091ac:	4b27      	ldr	r3, [pc, #156]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b8:	d107      	bne.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ba:	f107 030c 	add.w	r3, r7, #12
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fb52 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091c8:	e1db      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091ce:	e1d8      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80091d0:	4b1e      	ldr	r3, [pc, #120]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091da:	4b1c      	ldr	r3, [pc, #112]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d10c      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d109      	bne.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091ec:	4b17      	ldr	r3, [pc, #92]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	08db      	lsrs	r3, r3, #3
 80091f2:	f003 0303 	and.w	r3, r3, #3
 80091f6:	4a16      	ldr	r2, [pc, #88]	; (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80091f8:	fa22 f303 	lsr.w	r3, r2, r3
 80091fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091fe:	e01e      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009200:	4b12      	ldr	r3, [pc, #72]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800920c:	d106      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009210:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009214:	d102      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921a:	e010      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800921c:	4b0b      	ldr	r3, [pc, #44]	; (800924c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009228:	d106      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800922a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009230:	d102      	bne.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009236:	e002      	b.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800923c:	e1a1      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800923e:	e1a0      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009240:	4b06      	ldr	r3, [pc, #24]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009244:	e19d      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800924a:	e19a      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800924c:	58024400 	.word	0x58024400
 8009250:	03d09000 	.word	0x03d09000
 8009254:	003d0900 	.word	0x003d0900
 8009258:	017d7840 	.word	0x017d7840
 800925c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009266:	d173      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009268:	4b9a      	ldr	r3, [pc, #616]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800926a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009270:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009278:	d02f      	beq.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800927a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009280:	d863      	bhi.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	d004      	beq.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800928e:	d012      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8009290:	e05b      	b.n	800934a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009292:	4b90      	ldr	r3, [pc, #576]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800929a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800929e:	d107      	bne.n	80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a0:	f107 0318 	add.w	r3, r7, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 f98b 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092ae:	e168      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b4:	e165      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092b6:	4b87      	ldr	r3, [pc, #540]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c2:	d107      	bne.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c4:	f107 030c 	add.w	r3, r7, #12
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 facd 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092d2:	e156      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d8:	e153      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80092da:	4b7e      	ldr	r3, [pc, #504]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80092dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092e4:	4b7b      	ldr	r3, [pc, #492]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d10c      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80092f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d109      	bne.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092f6:	4b77      	ldr	r3, [pc, #476]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	08db      	lsrs	r3, r3, #3
 80092fc:	f003 0303 	and.w	r3, r3, #3
 8009300:	4a75      	ldr	r2, [pc, #468]	; (80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009302:	fa22 f303 	lsr.w	r3, r2, r3
 8009306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009308:	e01e      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800930a:	4b72      	ldr	r3, [pc, #456]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009316:	d106      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8009318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800931a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931e:	d102      	bne.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009320:	4b6e      	ldr	r3, [pc, #440]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009324:	e010      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009326:	4b6b      	ldr	r3, [pc, #428]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800932e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009332:	d106      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800933a:	d102      	bne.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800933c:	4b68      	ldr	r3, [pc, #416]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009340:	e002      	b.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009346:	e11c      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8009348:	e11b      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800934e:	e118      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009356:	d133      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009358:	4b5e      	ldr	r3, [pc, #376]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800935a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800935c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009360:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800936e:	d012      	beq.n	8009396 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8009370:	e023      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009372:	4b58      	ldr	r3, [pc, #352]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800937e:	d107      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f000 fbc3 	bl	8009b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800938e:	e0f8      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009394:	e0f5      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009396:	4b4f      	ldr	r3, [pc, #316]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093a2:	d107      	bne.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 f909 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093b2:	e0e6      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b8:	e0e3      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093be:	e0e0      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093c6:	f040 808d 	bne.w	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80093ca:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80093cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80093d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093da:	d06b      	beq.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80093dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093e2:	d874      	bhi.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ea:	d056      	beq.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f2:	d86c      	bhi.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093fa:	d03b      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009402:	d864      	bhi.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800940a:	d021      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009412:	d85c      	bhi.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8009414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009420:	d004      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009422:	e054      	b.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009424:	f000 f8b6 	bl	8009594 <HAL_RCCEx_GetD3PCLK1Freq>
 8009428:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800942a:	e0aa      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800942c:	4b29      	ldr	r3, [pc, #164]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943a:	f107 0318 	add.w	r3, r7, #24
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f8be 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009448:	e09b      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944e:	e098      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009450:	4b20      	ldr	r3, [pc, #128]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800945e:	f107 030c 	add.w	r3, r7, #12
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fa00 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800946c:	e089      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009472:	e086      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b04      	cmp	r3, #4
 800947e:	d109      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009480:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	08db      	lsrs	r3, r3, #3
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	4a13      	ldr	r2, [pc, #76]	; (80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800948c:	fa22 f303 	lsr.w	r3, r2, r3
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009492:	e076      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009498:	e073      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800949a:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a6:	d102      	bne.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 80094a8:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80094ac:	e069      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b2:	e066      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80094b4:	4b07      	ldr	r3, [pc, #28]	; (80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094c0:	d102      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 80094c2:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094c6:	e05c      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094cc:	e059      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094d2:	e056      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80094d4:	58024400 	.word	0x58024400
 80094d8:	03d09000 	.word	0x03d09000
 80094dc:	003d0900 	.word	0x003d0900
 80094e0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ea:	d148      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80094ec:	4b27      	ldr	r3, [pc, #156]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80094ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80094f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094fc:	d02a      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009504:	d838      	bhi.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009512:	d00d      	beq.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8009514:	e030      	b.n	8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009516:	4b1d      	ldr	r3, [pc, #116]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800951e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009522:	d102      	bne.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009528:	e02b      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800952e:	e028      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009530:	4b16      	ldr	r3, [pc, #88]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800953c:	d107      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800953e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fae4 	bl	8009b10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800954c:	e019      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009552:	e016      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009554:	4b0d      	ldr	r3, [pc, #52]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800955c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009560:	d107      	bne.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009562:	f107 0318 	add.w	r3, r7, #24
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f82a 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009570:	e007      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8009572:	2300      	movs	r3, #0
 8009574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009576:	e004      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8009578:	2300      	movs	r3, #0
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800957c:	e001      	b.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009584:	4618      	mov	r0, r3
 8009586:	3740      	adds	r7, #64	; 0x40
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	58024400 	.word	0x58024400
 8009590:	017d7840 	.word	0x017d7840

08009594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009598:	f7fe fc82 	bl	8007ea0 <HAL_RCC_GetHCLKFreq>
 800959c:	4602      	mov	r2, r0
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	091b      	lsrs	r3, r3, #4
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	4904      	ldr	r1, [pc, #16]	; (80095bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095aa:	5ccb      	ldrb	r3, [r1, r3]
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	58024400 	.word	0x58024400
 80095bc:	0801013c 	.word	0x0801013c

080095c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b089      	sub	sp, #36	; 0x24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095c8:	4ba1      	ldr	r3, [pc, #644]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095cc:	f003 0303 	and.w	r3, r3, #3
 80095d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095d2:	4b9f      	ldr	r3, [pc, #636]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d6:	0b1b      	lsrs	r3, r3, #12
 80095d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095de:	4b9c      	ldr	r3, [pc, #624]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	091b      	lsrs	r3, r3, #4
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095ea:	4b99      	ldr	r3, [pc, #612]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ee:	08db      	lsrs	r3, r3, #3
 80095f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	fb02 f303 	mul.w	r3, r2, r3
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8111 	beq.w	8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b02      	cmp	r3, #2
 8009612:	f000 8083 	beq.w	800971c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b02      	cmp	r3, #2
 800961a:	f200 80a1 	bhi.w	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d056      	beq.n	80096d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800962a:	e099      	b.n	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800962c:	4b88      	ldr	r3, [pc, #544]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d02d      	beq.n	8009694 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009638:	4b85      	ldr	r3, [pc, #532]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	08db      	lsrs	r3, r3, #3
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	4a84      	ldr	r2, [pc, #528]	; (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
 8009648:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009662:	4b7b      	ldr	r3, [pc, #492]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009672:	ed97 6a03 	vldr	s12, [r7, #12]
 8009676:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800967a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009692:	e087      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a6:	4b6a      	ldr	r3, [pc, #424]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d6:	e065      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b59      	ldr	r3, [pc, #356]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800971a:	e043      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800972a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972e:	4b48      	ldr	r3, [pc, #288]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009742:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800975e:	e021      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800976e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009772:	4b37      	ldr	r3, [pc, #220]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	ed97 6a03 	vldr	s12, [r7, #12]
 8009786:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800978a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097a4:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	0a5b      	lsrs	r3, r3, #9
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097be:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ca:	ee17 2a90 	vmov	r2, s15
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097d2:	4b1f      	ldr	r3, [pc, #124]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	0c1b      	lsrs	r3, r3, #16
 80097d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f8:	ee17 2a90 	vmov	r2, s15
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009800:	4b13      	ldr	r3, [pc, #76]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009804:	0e1b      	lsrs	r3, r3, #24
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800981a:	edd7 6a07 	vldr	s13, [r7, #28]
 800981e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009826:	ee17 2a90 	vmov	r2, s15
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800982e:	e008      	b.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
}
 8009842:	bf00      	nop
 8009844:	3724      	adds	r7, #36	; 0x24
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	03d09000 	.word	0x03d09000
 8009858:	46000000 	.word	0x46000000
 800985c:	4c742400 	.word	0x4c742400
 8009860:	4a742400 	.word	0x4a742400
 8009864:	4bbebc20 	.word	0x4bbebc20

08009868 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009868:	b480      	push	{r7}
 800986a:	b089      	sub	sp, #36	; 0x24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009870:	4ba1      	ldr	r3, [pc, #644]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800987a:	4b9f      	ldr	r3, [pc, #636]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	0d1b      	lsrs	r3, r3, #20
 8009880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009884:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009886:	4b9c      	ldr	r3, [pc, #624]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	0a1b      	lsrs	r3, r3, #8
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009892:	4b99      	ldr	r3, [pc, #612]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	08db      	lsrs	r3, r3, #3
 8009898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	fb02 f303 	mul.w	r3, r2, r3
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 8111 	beq.w	8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f000 8083 	beq.w	80099c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f200 80a1 	bhi.w	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d056      	beq.n	8009980 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098d2:	e099      	b.n	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d4:	4b88      	ldr	r3, [pc, #544]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0320 	and.w	r3, r3, #32
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d02d      	beq.n	800993c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098e0:	4b85      	ldr	r3, [pc, #532]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	08db      	lsrs	r3, r3, #3
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	4a84      	ldr	r2, [pc, #528]	; (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b7b      	ldr	r3, [pc, #492]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a03 	vldr	s12, [r7, #12]
 800991e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800993a:	e087      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b6a      	ldr	r3, [pc, #424]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009962:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997e:	e065      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b59      	ldr	r3, [pc, #356]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099c2:	e043      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a06:	e021      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	0a5b      	lsrs	r3, r3, #9
 8009a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a72:	ee17 2a90 	vmov	r2, s15
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a7a:	4b1f      	ldr	r3, [pc, #124]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	0c1b      	lsrs	r3, r3, #16
 8009a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa0:	ee17 2a90 	vmov	r2, s15
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009aa8:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	0e1b      	lsrs	r3, r3, #24
 8009aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ace:	ee17 2a90 	vmov	r2, s15
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ad6:	e008      	b.n	8009aea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	609a      	str	r2, [r3, #8]
}
 8009aea:	bf00      	nop
 8009aec:	3724      	adds	r7, #36	; 0x24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	58024400 	.word	0x58024400
 8009afc:	03d09000 	.word	0x03d09000
 8009b00:	46000000 	.word	0x46000000
 8009b04:	4c742400 	.word	0x4c742400
 8009b08:	4a742400 	.word	0x4a742400
 8009b0c:	4bbebc20 	.word	0x4bbebc20

08009b10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b089      	sub	sp, #36	; 0x24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b18:	4ba0      	ldr	r3, [pc, #640]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	f003 0303 	and.w	r3, r3, #3
 8009b20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009b22:	4b9e      	ldr	r3, [pc, #632]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	091b      	lsrs	r3, r3, #4
 8009b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b2e:	4b9b      	ldr	r3, [pc, #620]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	f003 0301 	and.w	r3, r3, #1
 8009b36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009b38:	4b98      	ldr	r3, [pc, #608]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3c:	08db      	lsrs	r3, r3, #3
 8009b3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	fb02 f303 	mul.w	r3, r2, r3
 8009b48:	ee07 3a90 	vmov	s15, r3
 8009b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f000 8111 	beq.w	8009d7e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	f000 8083 	beq.w	8009c6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	f200 80a1 	bhi.w	8009cae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d056      	beq.n	8009c26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009b78:	e099      	b.n	8009cae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b7a:	4b88      	ldr	r3, [pc, #544]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d02d      	beq.n	8009be2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b86:	4b85      	ldr	r3, [pc, #532]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	08db      	lsrs	r3, r3, #3
 8009b8c:	f003 0303 	and.w	r3, r3, #3
 8009b90:	4a83      	ldr	r2, [pc, #524]	; (8009da0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009b92:	fa22 f303 	lsr.w	r3, r2, r3
 8009b96:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb0:	4b7a      	ldr	r3, [pc, #488]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bdc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009be0:	e087      	b.n	8009cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	ee07 3a90 	vmov	s15, r3
 8009be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009da8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf4:	4b69      	ldr	r3, [pc, #420]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfc:	ee07 3a90 	vmov	s15, r3
 8009c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c04:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c08:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c24:	e065      	b.n	8009cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	ee07 3a90 	vmov	s15, r3
 8009c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009dac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c38:	4b58      	ldr	r3, [pc, #352]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c40:	ee07 3a90 	vmov	s15, r3
 8009c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c48:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c68:	e043      	b.n	8009cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009db0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7c:	4b47      	ldr	r3, [pc, #284]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c84:	ee07 3a90 	vmov	s15, r3
 8009c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c90:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ca8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cac:	e021      	b.n	8009cf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	ee07 3a90 	vmov	s15, r3
 8009cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009da8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc0:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009da4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cf0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009cf2:	4b2a      	ldr	r3, [pc, #168]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	0a5b      	lsrs	r3, r3, #9
 8009cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfc:	ee07 3a90 	vmov	s15, r3
 8009d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d18:	ee17 2a90 	vmov	r2, s15
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009d20:	4b1e      	ldr	r3, [pc, #120]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d46:	ee17 2a90 	vmov	r2, s15
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009d4e:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d52:	0e1b      	lsrs	r3, r3, #24
 8009d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d58:	ee07 3a90 	vmov	s15, r3
 8009d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d74:	ee17 2a90 	vmov	r2, s15
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009d7c:	e008      	b.n	8009d90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	609a      	str	r2, [r3, #8]
}
 8009d90:	bf00      	nop
 8009d92:	3724      	adds	r7, #36	; 0x24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	03d09000 	.word	0x03d09000
 8009da4:	46000000 	.word	0x46000000
 8009da8:	4c742400 	.word	0x4c742400
 8009dac:	4a742400 	.word	0x4a742400
 8009db0:	4bbebc20 	.word	0x4bbebc20

08009db4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dc2:	4b53      	ldr	r3, [pc, #332]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d101      	bne.n	8009dd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e099      	b.n	8009f06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dd2:	4b4f      	ldr	r3, [pc, #316]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a4e      	ldr	r2, [pc, #312]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009dd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dde:	f7f8 ffc1 	bl	8002d64 <HAL_GetTick>
 8009de2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009de4:	e008      	b.n	8009df8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009de6:	f7f8 ffbd 	bl	8002d64 <HAL_GetTick>
 8009dea:	4602      	mov	r2, r0
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d901      	bls.n	8009df8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e086      	b.n	8009f06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009df8:	4b45      	ldr	r3, [pc, #276]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1f0      	bne.n	8009de6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e04:	4b42      	ldr	r3, [pc, #264]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	031b      	lsls	r3, r3, #12
 8009e12:	493f      	ldr	r1, [pc, #252]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	628b      	str	r3, [r1, #40]	; 0x28
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	025b      	lsls	r3, r3, #9
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	3b01      	subs	r3, #1
 8009e34:	041b      	lsls	r3, r3, #16
 8009e36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	3b01      	subs	r3, #1
 8009e42:	061b      	lsls	r3, r3, #24
 8009e44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e48:	4931      	ldr	r1, [pc, #196]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e4e:	4b30      	ldr	r3, [pc, #192]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	492d      	ldr	r1, [pc, #180]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e60:	4b2b      	ldr	r3, [pc, #172]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	f023 0220 	bic.w	r2, r3, #32
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	699b      	ldr	r3, [r3, #24]
 8009e6c:	4928      	ldr	r1, [pc, #160]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e72:	4b27      	ldr	r3, [pc, #156]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	4a26      	ldr	r2, [pc, #152]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e78:	f023 0310 	bic.w	r3, r3, #16
 8009e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e7e:	4b24      	ldr	r3, [pc, #144]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e82:	4b24      	ldr	r3, [pc, #144]	; (8009f14 <RCCEx_PLL2_Config+0x160>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	69d2      	ldr	r2, [r2, #28]
 8009e8a:	00d2      	lsls	r2, r2, #3
 8009e8c:	4920      	ldr	r1, [pc, #128]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e92:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4a1e      	ldr	r2, [pc, #120]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009e98:	f043 0310 	orr.w	r3, r3, #16
 8009e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d106      	bne.n	8009eb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ea4:	4b1a      	ldr	r3, [pc, #104]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	4a19      	ldr	r2, [pc, #100]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009eaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eb0:	e00f      	b.n	8009ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d106      	bne.n	8009ec6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009eb8:	4b15      	ldr	r3, [pc, #84]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4a14      	ldr	r2, [pc, #80]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009ebe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ec2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ec4:	e005      	b.n	8009ed2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ec6:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	4a11      	ldr	r2, [pc, #68]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ed2:	4b0f      	ldr	r3, [pc, #60]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a0e      	ldr	r2, [pc, #56]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ede:	f7f8 ff41 	bl	8002d64 <HAL_GetTick>
 8009ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ee4:	e008      	b.n	8009ef8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ee6:	f7f8 ff3d 	bl	8002d64 <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d901      	bls.n	8009ef8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e006      	b.n	8009f06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ef8:	4b05      	ldr	r3, [pc, #20]	; (8009f10 <RCCEx_PLL2_Config+0x15c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d0f0      	beq.n	8009ee6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	58024400 	.word	0x58024400
 8009f14:	ffff0007 	.word	0xffff0007

08009f18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f26:	4b53      	ldr	r3, [pc, #332]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d101      	bne.n	8009f36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e099      	b.n	800a06a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f36:	4b4f      	ldr	r3, [pc, #316]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a4e      	ldr	r2, [pc, #312]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f42:	f7f8 ff0f 	bl	8002d64 <HAL_GetTick>
 8009f46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f48:	e008      	b.n	8009f5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009f4a:	f7f8 ff0b 	bl	8002d64 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d901      	bls.n	8009f5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e086      	b.n	800a06a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f5c:	4b45      	ldr	r3, [pc, #276]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1f0      	bne.n	8009f4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f68:	4b42      	ldr	r3, [pc, #264]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	051b      	lsls	r3, r3, #20
 8009f76:	493f      	ldr	r1, [pc, #252]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	3b01      	subs	r3, #1
 8009f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	025b      	lsls	r3, r3, #9
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	431a      	orrs	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	041b      	lsls	r3, r3, #16
 8009f9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	061b      	lsls	r3, r3, #24
 8009fa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fac:	4931      	ldr	r1, [pc, #196]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fb2:	4b30      	ldr	r3, [pc, #192]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	695b      	ldr	r3, [r3, #20]
 8009fbe:	492d      	ldr	r1, [pc, #180]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fc4:	4b2b      	ldr	r3, [pc, #172]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	4928      	ldr	r1, [pc, #160]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fd6:	4b27      	ldr	r3, [pc, #156]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	4a26      	ldr	r2, [pc, #152]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fe2:	4b24      	ldr	r3, [pc, #144]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <RCCEx_PLL3_Config+0x160>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	69d2      	ldr	r2, [r2, #28]
 8009fee:	00d2      	lsls	r2, r2, #3
 8009ff0:	4920      	ldr	r1, [pc, #128]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ff6:	4b1f      	ldr	r3, [pc, #124]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffa:	4a1e      	ldr	r2, [pc, #120]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 8009ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a000:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d106      	bne.n	800a016 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a008:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	4a19      	ldr	r2, [pc, #100]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a00e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a012:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a014:	e00f      	b.n	800a036 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d106      	bne.n	800a02a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a01c:	4b15      	ldr	r3, [pc, #84]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	4a14      	ldr	r2, [pc, #80]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a022:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a026:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a028:	e005      	b.n	800a036 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02e:	4a11      	ldr	r2, [pc, #68]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a030:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a034:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a036:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a0e      	ldr	r2, [pc, #56]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a03c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a042:	f7f8 fe8f 	bl	8002d64 <HAL_GetTick>
 800a046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a048:	e008      	b.n	800a05c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a04a:	f7f8 fe8b 	bl	8002d64 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	2b02      	cmp	r3, #2
 800a056:	d901      	bls.n	800a05c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e006      	b.n	800a06a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <RCCEx_PLL3_Config+0x15c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0f0      	beq.n	800a04a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	58024400 	.word	0x58024400
 800a078:	ffff0007 	.word	0xffff0007

0800a07c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a084:	2300      	movs	r3, #0
 800a086:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e0eb      	b.n	800a26a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a75      	ldr	r2, [pc, #468]	; (800a274 <HAL_SPI_Init+0x1f8>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00f      	beq.n	800a0c2 <HAL_SPI_Init+0x46>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a74      	ldr	r2, [pc, #464]	; (800a278 <HAL_SPI_Init+0x1fc>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00a      	beq.n	800a0c2 <HAL_SPI_Init+0x46>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a72      	ldr	r2, [pc, #456]	; (800a27c <HAL_SPI_Init+0x200>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d005      	beq.n	800a0c2 <HAL_SPI_Init+0x46>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	d901      	bls.n	800a0c2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e0d3      	b.n	800a26a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fb94 	bl	800a7f0 <SPI_GetPacketSize>
 800a0c8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a69      	ldr	r2, [pc, #420]	; (800a274 <HAL_SPI_Init+0x1f8>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d00c      	beq.n	800a0ee <HAL_SPI_Init+0x72>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a67      	ldr	r2, [pc, #412]	; (800a278 <HAL_SPI_Init+0x1fc>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d007      	beq.n	800a0ee <HAL_SPI_Init+0x72>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a66      	ldr	r2, [pc, #408]	; (800a27c <HAL_SPI_Init+0x200>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d002      	beq.n	800a0ee <HAL_SPI_Init+0x72>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b08      	cmp	r3, #8
 800a0ec:	d811      	bhi.n	800a112 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0f2:	4a60      	ldr	r2, [pc, #384]	; (800a274 <HAL_SPI_Init+0x1f8>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d009      	beq.n	800a10c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a5e      	ldr	r2, [pc, #376]	; (800a278 <HAL_SPI_Init+0x1fc>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d004      	beq.n	800a10c <HAL_SPI_Init+0x90>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a5d      	ldr	r2, [pc, #372]	; (800a27c <HAL_SPI_Init+0x200>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d104      	bne.n	800a116 <HAL_SPI_Init+0x9a>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d901      	bls.n	800a116 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e0a9      	b.n	800a26a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d106      	bne.n	800a130 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7f8 f9c8 	bl	80024c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f022 0201 	bic.w	r2, r2, #1
 800a146:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a150:	d119      	bne.n	800a186 <HAL_SPI_Init+0x10a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a15a:	d103      	bne.n	800a164 <HAL_SPI_Init+0xe8>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10c      	bne.n	800a186 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a174:	d107      	bne.n	800a186 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a184:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	69da      	ldr	r2, [r3, #28]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18e:	431a      	orrs	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	431a      	orrs	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a198:	ea42 0103 	orr.w	r1, r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	431a      	orrs	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e6:	ea42 0103 	orr.w	r1, r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d113      	bne.n	800a226 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a210:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a224:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f022 0201 	bic.w	r2, r2, #1
 800a234:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	40013000 	.word	0x40013000
 800a278:	40003800 	.word	0x40003800
 800a27c:	40003c00 	.word	0x40003c00

0800a280 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	; 0x28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	695b      	ldr	r3, [r3, #20]
 800a296:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a298:	6a3a      	ldr	r2, [r7, #32]
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	4013      	ands	r3, r2
 800a29e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a2b2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	3330      	adds	r3, #48	; 0x30
 800a2ba:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d113      	bne.n	800a2ee <HAL_SPI_IRQHandler+0x6e>
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	f003 0320 	and.w	r3, r3, #32
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10e      	bne.n	800a2ee <HAL_SPI_IRQHandler+0x6e>
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f003 0304 	and.w	r3, r3, #4
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d009      	beq.n	800a2ee <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	4798      	blx	r3
    handled = 1UL;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10f      	bne.n	800a318 <HAL_SPI_IRQHandler+0x98>
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00a      	beq.n	800a318 <HAL_SPI_IRQHandler+0x98>
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d105      	bne.n	800a318 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	4798      	blx	r3
    handled = 1UL;
 800a314:	2301      	movs	r3, #1
 800a316:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10f      	bne.n	800a342 <HAL_SPI_IRQHandler+0xc2>
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00a      	beq.n	800a342 <HAL_SPI_IRQHandler+0xc2>
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	f003 0304 	and.w	r3, r3, #4
 800a332:	2b00      	cmp	r3, #0
 800a334:	d105      	bne.n	800a342 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	4798      	blx	r3
    handled = 1UL;
 800a33e:	2301      	movs	r3, #1
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	2b00      	cmp	r3, #0
 800a346:	f040 816f 	bne.w	800a628 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	2b00      	cmp	r3, #0
 800a352:	f000 80a0 	beq.w	800a496 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	699a      	ldr	r2, [r3, #24]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f042 0208 	orr.w	r2, r2, #8
 800a364:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f042 0210 	orr.w	r2, r2, #16
 800a374:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	699a      	ldr	r2, [r3, #24]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a384:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	691a      	ldr	r2, [r3, #16]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0208 	bic.w	r2, r2, #8
 800a394:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00f      	beq.n	800a3c0 <HAL_SPI_IRQHandler+0x140>
 800a3a0:	7cfb      	ldrb	r3, [r7, #19]
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d004      	beq.n	800a3b0 <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d007      	beq.n	800a3c0 <HAL_SPI_IRQHandler+0x140>
 800a3b0:	7cfb      	ldrb	r3, [r7, #19]
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d059      	beq.n	800a46a <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d154      	bne.n	800a46a <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d13d      	bne.n	800a44a <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a3ce:	e036      	b.n	800a43e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	2b0f      	cmp	r3, #15
 800a3d6:	d90b      	bls.n	800a3f0 <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a3e2:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3e8:	1d1a      	adds	r2, r3, #4
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	665a      	str	r2, [r3, #100]	; 0x64
 800a3ee:	e01d      	b.n	800a42c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	2b07      	cmp	r3, #7
 800a3f6:	d90b      	bls.n	800a410 <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	8812      	ldrh	r2, [r2, #0]
 800a400:	b292      	uxth	r2, r2
 800a402:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a408:	1c9a      	adds	r2, r3, #2
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	665a      	str	r2, [r3, #100]	; 0x64
 800a40e:	e00d      	b.n	800a42c <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a41c:	7812      	ldrb	r2, [r2, #0]
 800a41e:	b2d2      	uxtb	r2, r2
 800a420:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a426:	1c5a      	adds	r2, r3, #1
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a432:	b29b      	uxth	r3, r3
 800a434:	3b01      	subs	r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1c2      	bne.n	800a3d0 <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 f930 	bl	800a6b0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f900 	bl	800a668 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a468:	e0e3      	b.n	800a632 <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a46a:	7cfb      	ldrb	r3, [r7, #19]
 800a46c:	2b05      	cmp	r3, #5
 800a46e:	d103      	bne.n	800a478 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f8ef 	bl	800a654 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a476:	e0d9      	b.n	800a62c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a478:	7cfb      	ldrb	r3, [r7, #19]
 800a47a:	2b04      	cmp	r3, #4
 800a47c:	d103      	bne.n	800a486 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7f6 fa6a 	bl	8000958 <HAL_SPI_RxCpltCallback>
    return;
 800a484:	e0d2      	b.n	800a62c <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a486:	7cfb      	ldrb	r3, [r7, #19]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	f040 80cf 	bne.w	800a62c <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f8d6 	bl	800a640 <HAL_SPI_TxCpltCallback>
    return;
 800a494:	e0ca      	b.n	800a62c <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00d      	beq.n	800a4bc <HAL_SPI_IRQHandler+0x23c>
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	f003 0308 	and.w	r3, r3, #8
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699a      	ldr	r2, [r3, #24]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4b8:	619a      	str	r2, [r3, #24]

    return;
 800a4ba:	e0ba      	b.n	800a632 <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80b5 	beq.w	800a632 <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00f      	beq.n	800a4f2 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4d8:	f043 0204 	orr.w	r2, r3, #4
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	699a      	ldr	r2, [r3, #24]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4f0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00f      	beq.n	800a51c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a502:	f043 0201 	orr.w	r2, r3, #1
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a51a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00f      	beq.n	800a546 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a52c:	f043 0208 	orr.w	r2, r3, #8
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	699a      	ldr	r2, [r3, #24]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a544:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00f      	beq.n	800a570 <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a556:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	699a      	ldr	r2, [r3, #24]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f042 0220 	orr.w	r2, r2, #32
 800a56e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a576:	2b00      	cmp	r3, #0
 800a578:	d05a      	beq.n	800a630 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f022 0201 	bic.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6919      	ldr	r1, [r3, #16]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	4b28      	ldr	r3, [pc, #160]	; (800a638 <HAL_SPI_IRQHandler+0x3b8>)
 800a596:	400b      	ands	r3, r1
 800a598:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5a4:	d138      	bne.n	800a618 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a5b4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d013      	beq.n	800a5e6 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <HAL_SPI_IRQHandler+0x3bc>)
 800a5c4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fb f94a 	bl	8005864 <HAL_DMA_Abort_IT>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d007      	beq.n	800a5e6 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d020      	beq.n	800a630 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5f2:	4a12      	ldr	r2, [pc, #72]	; (800a63c <HAL_SPI_IRQHandler+0x3bc>)
 800a5f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fb f932 	bl	8005864 <HAL_DMA_Abort_IT>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d014      	beq.n	800a630 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a60c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a616:	e00b      	b.n	800a630 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f821 	bl	800a668 <HAL_SPI_ErrorCallback>
    return;
 800a626:	e003      	b.n	800a630 <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a628:	bf00      	nop
 800a62a:	e002      	b.n	800a632 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a62c:	bf00      	nop
 800a62e:	e000      	b.n	800a632 <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a630:	bf00      	nop
  }
}
 800a632:	3728      	adds	r7, #40	; 0x28
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	fffffc94 	.word	0xfffffc94
 800a63c:	0800a67d 	.word	0x0800a67d

0800a640 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7ff ffe0 	bl	800a668 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	699a      	ldr	r2, [r3, #24]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f042 0208 	orr.w	r2, r2, #8
 800a6ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f042 0210 	orr.w	r2, r2, #16
 800a6de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 0201 	bic.w	r2, r2, #1
 800a6ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6919      	ldr	r1, [r3, #16]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	4b3c      	ldr	r3, [pc, #240]	; (800a7ec <SPI_CloseTransfer+0x13c>)
 800a6fc:	400b      	ands	r3, r1
 800a6fe:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689a      	ldr	r2, [r3, #8]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a70e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b04      	cmp	r3, #4
 800a71a:	d014      	beq.n	800a746 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f003 0320 	and.w	r3, r3, #32
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00f      	beq.n	800a746 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a72c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	699a      	ldr	r2, [r3, #24]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f042 0220 	orr.w	r2, r2, #32
 800a744:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d014      	beq.n	800a77c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00f      	beq.n	800a77c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a762:	f043 0204 	orr.w	r2, r3, #4
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a77a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00f      	beq.n	800a7a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a78c:	f043 0201 	orr.w	r2, r3, #1
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	699a      	ldr	r2, [r3, #24]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00f      	beq.n	800a7d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7b6:	f043 0208 	orr.w	r2, r3, #8
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a7e0:	bf00      	nop
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	fffffc90 	.word	0xfffffc90

0800a7f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fc:	095b      	lsrs	r3, r3, #5
 800a7fe:	3301      	adds	r3, #1
 800a800:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	3301      	adds	r3, #1
 800a808:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	3307      	adds	r3, #7
 800a80e:	08db      	lsrs	r3, r3, #3
 800a810:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	fb02 f303 	mul.w	r3, r2, r3
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e049      	b.n	800a8cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d106      	bne.n	800a852 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7f7 ff09 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2202      	movs	r2, #2
 800a856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f000 fb69 	bl	800af3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d001      	beq.n	800a8ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e05e      	b.n	800a9aa <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2202      	movs	r2, #2
 800a8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0201 	orr.w	r2, r2, #1
 800a902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a2b      	ldr	r2, [pc, #172]	; (800a9b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d02c      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a916:	d027      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a27      	ldr	r2, [pc, #156]	; (800a9bc <HAL_TIM_Base_Start_IT+0xe8>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d022      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <HAL_TIM_Base_Start_IT+0xec>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d01d      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a24      	ldr	r2, [pc, #144]	; (800a9c4 <HAL_TIM_Base_Start_IT+0xf0>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d018      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a23      	ldr	r2, [pc, #140]	; (800a9c8 <HAL_TIM_Base_Start_IT+0xf4>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d013      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a21      	ldr	r2, [pc, #132]	; (800a9cc <HAL_TIM_Base_Start_IT+0xf8>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00e      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a20      	ldr	r2, [pc, #128]	; (800a9d0 <HAL_TIM_Base_Start_IT+0xfc>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d009      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1e      	ldr	r2, [pc, #120]	; (800a9d4 <HAL_TIM_Base_Start_IT+0x100>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d004      	beq.n	800a968 <HAL_TIM_Base_Start_IT+0x94>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a1d      	ldr	r2, [pc, #116]	; (800a9d8 <HAL_TIM_Base_Start_IT+0x104>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d115      	bne.n	800a994 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	4b1b      	ldr	r3, [pc, #108]	; (800a9dc <HAL_TIM_Base_Start_IT+0x108>)
 800a970:	4013      	ands	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b06      	cmp	r3, #6
 800a978:	d015      	beq.n	800a9a6 <HAL_TIM_Base_Start_IT+0xd2>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a980:	d011      	beq.n	800a9a6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0201 	orr.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a992:	e008      	b.n	800a9a6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0201 	orr.w	r2, r2, #1
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	e000      	b.n	800a9a8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3714      	adds	r7, #20
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	40010000 	.word	0x40010000
 800a9bc:	40000400 	.word	0x40000400
 800a9c0:	40000800 	.word	0x40000800
 800a9c4:	40000c00 	.word	0x40000c00
 800a9c8:	40010400 	.word	0x40010400
 800a9cc:	40001800 	.word	0x40001800
 800a9d0:	40014000 	.word	0x40014000
 800a9d4:	4000e000 	.word	0x4000e000
 800a9d8:	4000e400 	.word	0x4000e400
 800a9dc:	00010007 	.word	0x00010007

0800a9e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e049      	b.n	800aa86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7f7 fddc 	bl	80025c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f000 fa8c 	bl	800af3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	691b      	ldr	r3, [r3, #16]
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d122      	bne.n	800aaea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	f003 0302 	and.w	r3, r3, #2
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d11b      	bne.n	800aaea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f06f 0202 	mvn.w	r2, #2
 800aaba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	f003 0303 	and.w	r3, r3, #3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fa15 	bl	800af00 <HAL_TIM_IC_CaptureCallback>
 800aad6:	e005      	b.n	800aae4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fa07 	bl	800aeec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa18 	bl	800af14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	f003 0304 	and.w	r3, r3, #4
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	d122      	bne.n	800ab3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d11b      	bne.n	800ab3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f06f 0204 	mvn.w	r2, #4
 800ab0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f9eb 	bl	800af00 <HAL_TIM_IC_CaptureCallback>
 800ab2a:	e005      	b.n	800ab38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f9dd 	bl	800aeec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9ee 	bl	800af14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	f003 0308 	and.w	r3, r3, #8
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d122      	bne.n	800ab92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	f003 0308 	and.w	r3, r3, #8
 800ab56:	2b08      	cmp	r3, #8
 800ab58:	d11b      	bne.n	800ab92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f06f 0208 	mvn.w	r2, #8
 800ab62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2204      	movs	r2, #4
 800ab68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69db      	ldr	r3, [r3, #28]
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f9c1 	bl	800af00 <HAL_TIM_IC_CaptureCallback>
 800ab7e:	e005      	b.n	800ab8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f9b3 	bl	800aeec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 f9c4 	bl	800af14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	691b      	ldr	r3, [r3, #16]
 800ab98:	f003 0310 	and.w	r3, r3, #16
 800ab9c:	2b10      	cmp	r3, #16
 800ab9e:	d122      	bne.n	800abe6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f003 0310 	and.w	r3, r3, #16
 800abaa:	2b10      	cmp	r3, #16
 800abac:	d11b      	bne.n	800abe6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f06f 0210 	mvn.w	r2, #16
 800abb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2208      	movs	r2, #8
 800abbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f997 	bl	800af00 <HAL_TIM_IC_CaptureCallback>
 800abd2:	e005      	b.n	800abe0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f989 	bl	800aeec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f99a 	bl	800af14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d10e      	bne.n	800ac12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d107      	bne.n	800ac12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f06f 0201 	mvn.w	r2, #1
 800ac0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7f5 fed7 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac1c:	2b80      	cmp	r3, #128	; 0x80
 800ac1e:	d10e      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2a:	2b80      	cmp	r3, #128	; 0x80
 800ac2c:	d107      	bne.n	800ac3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fe17 	bl	800b86c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4c:	d10e      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac58:	2b80      	cmp	r3, #128	; 0x80
 800ac5a:	d107      	bne.n	800ac6c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fe0a 	bl	800b880 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac76:	2b40      	cmp	r3, #64	; 0x40
 800ac78:	d10e      	bne.n	800ac98 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac84:	2b40      	cmp	r3, #64	; 0x40
 800ac86:	d107      	bne.n	800ac98 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f948 	bl	800af28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b20      	cmp	r3, #32
 800aca4:	d10e      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f003 0320 	and.w	r3, r3, #32
 800acb0:	2b20      	cmp	r3, #32
 800acb2:	d107      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f06f 0220 	mvn.w	r2, #32
 800acbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fdca 	bl	800b858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e0fd      	b.n	800aee2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b14      	cmp	r3, #20
 800acf2:	f200 80f0 	bhi.w	800aed6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800acf6:	a201      	add	r2, pc, #4	; (adr r2, 800acfc <HAL_TIM_PWM_ConfigChannel+0x30>)
 800acf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfc:	0800ad51 	.word	0x0800ad51
 800ad00:	0800aed7 	.word	0x0800aed7
 800ad04:	0800aed7 	.word	0x0800aed7
 800ad08:	0800aed7 	.word	0x0800aed7
 800ad0c:	0800ad91 	.word	0x0800ad91
 800ad10:	0800aed7 	.word	0x0800aed7
 800ad14:	0800aed7 	.word	0x0800aed7
 800ad18:	0800aed7 	.word	0x0800aed7
 800ad1c:	0800add3 	.word	0x0800add3
 800ad20:	0800aed7 	.word	0x0800aed7
 800ad24:	0800aed7 	.word	0x0800aed7
 800ad28:	0800aed7 	.word	0x0800aed7
 800ad2c:	0800ae13 	.word	0x0800ae13
 800ad30:	0800aed7 	.word	0x0800aed7
 800ad34:	0800aed7 	.word	0x0800aed7
 800ad38:	0800aed7 	.word	0x0800aed7
 800ad3c:	0800ae55 	.word	0x0800ae55
 800ad40:	0800aed7 	.word	0x0800aed7
 800ad44:	0800aed7 	.word	0x0800aed7
 800ad48:	0800aed7 	.word	0x0800aed7
 800ad4c:	0800ae95 	.word	0x0800ae95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 f996 	bl	800b088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f042 0208 	orr.w	r2, r2, #8
 800ad6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0204 	bic.w	r2, r2, #4
 800ad7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6999      	ldr	r1, [r3, #24]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	619a      	str	r2, [r3, #24]
      break;
 800ad8e:	e0a3      	b.n	800aed8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68b9      	ldr	r1, [r7, #8]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 fa06 	bl	800b1a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	699a      	ldr	r2, [r3, #24]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6999      	ldr	r1, [r3, #24]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	619a      	str	r2, [r3, #24]
      break;
 800add0:	e082      	b.n	800aed8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fa6f 	bl	800b2bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69da      	ldr	r2, [r3, #28]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f042 0208 	orr.w	r2, r2, #8
 800adec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69da      	ldr	r2, [r3, #28]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f022 0204 	bic.w	r2, r2, #4
 800adfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69d9      	ldr	r1, [r3, #28]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	691a      	ldr	r2, [r3, #16]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	430a      	orrs	r2, r1
 800ae0e:	61da      	str	r2, [r3, #28]
      break;
 800ae10:	e062      	b.n	800aed8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fad5 	bl	800b3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	69da      	ldr	r2, [r3, #28]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	69da      	ldr	r2, [r3, #28]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	69d9      	ldr	r1, [r3, #28]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	021a      	lsls	r2, r3, #8
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	61da      	str	r2, [r3, #28]
      break;
 800ae52:	e041      	b.n	800aed8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fb1c 	bl	800b498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f042 0208 	orr.w	r2, r2, #8
 800ae6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f022 0204 	bic.w	r2, r2, #4
 800ae7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	691a      	ldr	r2, [r3, #16]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae92:	e021      	b.n	800aed8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 fb5e 	bl	800b55c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aeae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aebe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	021a      	lsls	r2, r3, #8
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aed4:	e000      	b.n	800aed8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800aed6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop

0800aeec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a44      	ldr	r2, [pc, #272]	; (800b060 <TIM_Base_SetConfig+0x124>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d013      	beq.n	800af7c <TIM_Base_SetConfig+0x40>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af5a:	d00f      	beq.n	800af7c <TIM_Base_SetConfig+0x40>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a41      	ldr	r2, [pc, #260]	; (800b064 <TIM_Base_SetConfig+0x128>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d00b      	beq.n	800af7c <TIM_Base_SetConfig+0x40>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a40      	ldr	r2, [pc, #256]	; (800b068 <TIM_Base_SetConfig+0x12c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d007      	beq.n	800af7c <TIM_Base_SetConfig+0x40>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a3f      	ldr	r2, [pc, #252]	; (800b06c <TIM_Base_SetConfig+0x130>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d003      	beq.n	800af7c <TIM_Base_SetConfig+0x40>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a3e      	ldr	r2, [pc, #248]	; (800b070 <TIM_Base_SetConfig+0x134>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d108      	bne.n	800af8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a33      	ldr	r2, [pc, #204]	; (800b060 <TIM_Base_SetConfig+0x124>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d027      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af9c:	d023      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a30      	ldr	r2, [pc, #192]	; (800b064 <TIM_Base_SetConfig+0x128>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d01f      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a2f      	ldr	r2, [pc, #188]	; (800b068 <TIM_Base_SetConfig+0x12c>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d01b      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4a2e      	ldr	r2, [pc, #184]	; (800b06c <TIM_Base_SetConfig+0x130>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d017      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4a2d      	ldr	r2, [pc, #180]	; (800b070 <TIM_Base_SetConfig+0x134>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d013      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	4a2c      	ldr	r2, [pc, #176]	; (800b074 <TIM_Base_SetConfig+0x138>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d00f      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4a2b      	ldr	r2, [pc, #172]	; (800b078 <TIM_Base_SetConfig+0x13c>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d00b      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4a2a      	ldr	r2, [pc, #168]	; (800b07c <TIM_Base_SetConfig+0x140>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d007      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a29      	ldr	r2, [pc, #164]	; (800b080 <TIM_Base_SetConfig+0x144>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d003      	beq.n	800afe6 <TIM_Base_SetConfig+0xaa>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a28      	ldr	r2, [pc, #160]	; (800b084 <TIM_Base_SetConfig+0x148>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d108      	bne.n	800aff8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	68fa      	ldr	r2, [r7, #12]
 800aff4:	4313      	orrs	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	4313      	orrs	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a10      	ldr	r2, [pc, #64]	; (800b060 <TIM_Base_SetConfig+0x124>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d00f      	beq.n	800b044 <TIM_Base_SetConfig+0x108>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a12      	ldr	r2, [pc, #72]	; (800b070 <TIM_Base_SetConfig+0x134>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00b      	beq.n	800b044 <TIM_Base_SetConfig+0x108>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a11      	ldr	r2, [pc, #68]	; (800b074 <TIM_Base_SetConfig+0x138>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d007      	beq.n	800b044 <TIM_Base_SetConfig+0x108>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a10      	ldr	r2, [pc, #64]	; (800b078 <TIM_Base_SetConfig+0x13c>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_Base_SetConfig+0x108>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a0f      	ldr	r2, [pc, #60]	; (800b07c <TIM_Base_SetConfig+0x140>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d103      	bne.n	800b04c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	691a      	ldr	r2, [r3, #16]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	615a      	str	r2, [r3, #20]
}
 800b052:	bf00      	nop
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr
 800b05e:	bf00      	nop
 800b060:	40010000 	.word	0x40010000
 800b064:	40000400 	.word	0x40000400
 800b068:	40000800 	.word	0x40000800
 800b06c:	40000c00 	.word	0x40000c00
 800b070:	40010400 	.word	0x40010400
 800b074:	40014000 	.word	0x40014000
 800b078:	40014400 	.word	0x40014400
 800b07c:	40014800 	.word	0x40014800
 800b080:	4000e000 	.word	0x4000e000
 800b084:	4000e400 	.word	0x4000e400

0800b088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b088:	b480      	push	{r7}
 800b08a:	b087      	sub	sp, #28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	f023 0201 	bic.w	r2, r3, #1
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	4b37      	ldr	r3, [pc, #220]	; (800b190 <TIM_OC1_SetConfig+0x108>)
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0303 	bic.w	r3, r3, #3
 800b0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f023 0302 	bic.w	r3, r3, #2
 800b0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a2d      	ldr	r2, [pc, #180]	; (800b194 <TIM_OC1_SetConfig+0x10c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d00f      	beq.n	800b104 <TIM_OC1_SetConfig+0x7c>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a2c      	ldr	r2, [pc, #176]	; (800b198 <TIM_OC1_SetConfig+0x110>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d00b      	beq.n	800b104 <TIM_OC1_SetConfig+0x7c>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a2b      	ldr	r2, [pc, #172]	; (800b19c <TIM_OC1_SetConfig+0x114>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d007      	beq.n	800b104 <TIM_OC1_SetConfig+0x7c>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a2a      	ldr	r2, [pc, #168]	; (800b1a0 <TIM_OC1_SetConfig+0x118>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d003      	beq.n	800b104 <TIM_OC1_SetConfig+0x7c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a29      	ldr	r2, [pc, #164]	; (800b1a4 <TIM_OC1_SetConfig+0x11c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d10c      	bne.n	800b11e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f023 0308 	bic.w	r3, r3, #8
 800b10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	697a      	ldr	r2, [r7, #20]
 800b112:	4313      	orrs	r3, r2
 800b114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f023 0304 	bic.w	r3, r3, #4
 800b11c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a1c      	ldr	r2, [pc, #112]	; (800b194 <TIM_OC1_SetConfig+0x10c>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d00f      	beq.n	800b146 <TIM_OC1_SetConfig+0xbe>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a1b      	ldr	r2, [pc, #108]	; (800b198 <TIM_OC1_SetConfig+0x110>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d00b      	beq.n	800b146 <TIM_OC1_SetConfig+0xbe>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a1a      	ldr	r2, [pc, #104]	; (800b19c <TIM_OC1_SetConfig+0x114>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d007      	beq.n	800b146 <TIM_OC1_SetConfig+0xbe>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a19      	ldr	r2, [pc, #100]	; (800b1a0 <TIM_OC1_SetConfig+0x118>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d003      	beq.n	800b146 <TIM_OC1_SetConfig+0xbe>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a18      	ldr	r2, [pc, #96]	; (800b1a4 <TIM_OC1_SetConfig+0x11c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d111      	bne.n	800b16a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	695b      	ldr	r3, [r3, #20]
 800b15a:	693a      	ldr	r2, [r7, #16]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	4313      	orrs	r3, r2
 800b168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	693a      	ldr	r2, [r7, #16]
 800b16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685a      	ldr	r2, [r3, #4]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	621a      	str	r2, [r3, #32]
}
 800b184:	bf00      	nop
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	fffeff8f 	.word	0xfffeff8f
 800b194:	40010000 	.word	0x40010000
 800b198:	40010400 	.word	0x40010400
 800b19c:	40014000 	.word	0x40014000
 800b1a0:	40014400 	.word	0x40014400
 800b1a4:	40014800 	.word	0x40014800

0800b1a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b087      	sub	sp, #28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	f023 0210 	bic.w	r2, r3, #16
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	685b      	ldr	r3, [r3, #4]
 800b1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4b34      	ldr	r3, [pc, #208]	; (800b2a4 <TIM_OC2_SetConfig+0xfc>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f023 0320 	bic.w	r3, r3, #32
 800b1f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	011b      	lsls	r3, r3, #4
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a29      	ldr	r2, [pc, #164]	; (800b2a8 <TIM_OC2_SetConfig+0x100>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d003      	beq.n	800b210 <TIM_OC2_SetConfig+0x68>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4a28      	ldr	r2, [pc, #160]	; (800b2ac <TIM_OC2_SetConfig+0x104>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d10d      	bne.n	800b22c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	011b      	lsls	r3, r3, #4
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	4313      	orrs	r3, r2
 800b222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b22a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a1e      	ldr	r2, [pc, #120]	; (800b2a8 <TIM_OC2_SetConfig+0x100>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d00f      	beq.n	800b254 <TIM_OC2_SetConfig+0xac>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a1d      	ldr	r2, [pc, #116]	; (800b2ac <TIM_OC2_SetConfig+0x104>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d00b      	beq.n	800b254 <TIM_OC2_SetConfig+0xac>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a1c      	ldr	r2, [pc, #112]	; (800b2b0 <TIM_OC2_SetConfig+0x108>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d007      	beq.n	800b254 <TIM_OC2_SetConfig+0xac>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a1b      	ldr	r2, [pc, #108]	; (800b2b4 <TIM_OC2_SetConfig+0x10c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d003      	beq.n	800b254 <TIM_OC2_SetConfig+0xac>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a1a      	ldr	r2, [pc, #104]	; (800b2b8 <TIM_OC2_SetConfig+0x110>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d113      	bne.n	800b27c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b25a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	695b      	ldr	r3, [r3, #20]
 800b268:	009b      	lsls	r3, r3, #2
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	4313      	orrs	r3, r2
 800b27a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	621a      	str	r2, [r3, #32]
}
 800b296:	bf00      	nop
 800b298:	371c      	adds	r7, #28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	feff8fff 	.word	0xfeff8fff
 800b2a8:	40010000 	.word	0x40010000
 800b2ac:	40010400 	.word	0x40010400
 800b2b0:	40014000 	.word	0x40014000
 800b2b4:	40014400 	.word	0x40014400
 800b2b8:	40014800 	.word	0x40014800

0800b2bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	69db      	ldr	r3, [r3, #28]
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 0303 	bic.w	r3, r3, #3
 800b2f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4313      	orrs	r3, r2
 800b310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a27      	ldr	r2, [pc, #156]	; (800b3b4 <TIM_OC3_SetConfig+0xf8>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d003      	beq.n	800b322 <TIM_OC3_SetConfig+0x66>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a26      	ldr	r2, [pc, #152]	; (800b3b8 <TIM_OC3_SetConfig+0xfc>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d10d      	bne.n	800b33e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	021b      	lsls	r3, r3, #8
 800b330:	697a      	ldr	r2, [r7, #20]
 800b332:	4313      	orrs	r3, r2
 800b334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b33c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a1c      	ldr	r2, [pc, #112]	; (800b3b4 <TIM_OC3_SetConfig+0xf8>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d00f      	beq.n	800b366 <TIM_OC3_SetConfig+0xaa>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a1b      	ldr	r2, [pc, #108]	; (800b3b8 <TIM_OC3_SetConfig+0xfc>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00b      	beq.n	800b366 <TIM_OC3_SetConfig+0xaa>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4a1a      	ldr	r2, [pc, #104]	; (800b3bc <TIM_OC3_SetConfig+0x100>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d007      	beq.n	800b366 <TIM_OC3_SetConfig+0xaa>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	4a19      	ldr	r2, [pc, #100]	; (800b3c0 <TIM_OC3_SetConfig+0x104>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d003      	beq.n	800b366 <TIM_OC3_SetConfig+0xaa>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a18      	ldr	r2, [pc, #96]	; (800b3c4 <TIM_OC3_SetConfig+0x108>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d113      	bne.n	800b38e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	011b      	lsls	r3, r3, #4
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4313      	orrs	r3, r2
 800b380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	693a      	ldr	r2, [r7, #16]
 800b392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	621a      	str	r2, [r3, #32]
}
 800b3a8:	bf00      	nop
 800b3aa:	371c      	adds	r7, #28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	40010000 	.word	0x40010000
 800b3b8:	40010400 	.word	0x40010400
 800b3bc:	40014000 	.word	0x40014000
 800b3c0:	40014400 	.word	0x40014400
 800b3c4:	40014800 	.word	0x40014800

0800b3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	021b      	lsls	r3, r3, #8
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4313      	orrs	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	031b      	lsls	r3, r3, #12
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a18      	ldr	r2, [pc, #96]	; (800b484 <TIM_OC4_SetConfig+0xbc>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d00f      	beq.n	800b448 <TIM_OC4_SetConfig+0x80>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a17      	ldr	r2, [pc, #92]	; (800b488 <TIM_OC4_SetConfig+0xc0>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d00b      	beq.n	800b448 <TIM_OC4_SetConfig+0x80>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a16      	ldr	r2, [pc, #88]	; (800b48c <TIM_OC4_SetConfig+0xc4>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d007      	beq.n	800b448 <TIM_OC4_SetConfig+0x80>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a15      	ldr	r2, [pc, #84]	; (800b490 <TIM_OC4_SetConfig+0xc8>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d003      	beq.n	800b448 <TIM_OC4_SetConfig+0x80>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a14      	ldr	r2, [pc, #80]	; (800b494 <TIM_OC4_SetConfig+0xcc>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d109      	bne.n	800b45c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	019b      	lsls	r3, r3, #6
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	4313      	orrs	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	621a      	str	r2, [r3, #32]
}
 800b476:	bf00      	nop
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	40010000 	.word	0x40010000
 800b488:	40010400 	.word	0x40010400
 800b48c:	40014000 	.word	0x40014000
 800b490:	40014400 	.word	0x40014400
 800b494:	40014800 	.word	0x40014800

0800b498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b4d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	041b      	lsls	r3, r3, #16
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a17      	ldr	r2, [pc, #92]	; (800b548 <TIM_OC5_SetConfig+0xb0>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00f      	beq.n	800b50e <TIM_OC5_SetConfig+0x76>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a16      	ldr	r2, [pc, #88]	; (800b54c <TIM_OC5_SetConfig+0xb4>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d00b      	beq.n	800b50e <TIM_OC5_SetConfig+0x76>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a15      	ldr	r2, [pc, #84]	; (800b550 <TIM_OC5_SetConfig+0xb8>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d007      	beq.n	800b50e <TIM_OC5_SetConfig+0x76>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a14      	ldr	r2, [pc, #80]	; (800b554 <TIM_OC5_SetConfig+0xbc>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d003      	beq.n	800b50e <TIM_OC5_SetConfig+0x76>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a13      	ldr	r2, [pc, #76]	; (800b558 <TIM_OC5_SetConfig+0xc0>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d109      	bne.n	800b522 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b514:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	021b      	lsls	r3, r3, #8
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	685a      	ldr	r2, [r3, #4]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	693a      	ldr	r2, [r7, #16]
 800b53a:	621a      	str	r2, [r3, #32]
}
 800b53c:	bf00      	nop
 800b53e:	371c      	adds	r7, #28
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	40010000 	.word	0x40010000
 800b54c:	40010400 	.word	0x40010400
 800b550:	40014000 	.word	0x40014000
 800b554:	40014400 	.word	0x40014400
 800b558:	40014800 	.word	0x40014800

0800b55c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b087      	sub	sp, #28
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a1b      	ldr	r3, [r3, #32]
 800b56a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	021b      	lsls	r3, r3, #8
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	4313      	orrs	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b59e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	051b      	lsls	r3, r3, #20
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a18      	ldr	r2, [pc, #96]	; (800b610 <TIM_OC6_SetConfig+0xb4>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d00f      	beq.n	800b5d4 <TIM_OC6_SetConfig+0x78>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a17      	ldr	r2, [pc, #92]	; (800b614 <TIM_OC6_SetConfig+0xb8>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d00b      	beq.n	800b5d4 <TIM_OC6_SetConfig+0x78>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a16      	ldr	r2, [pc, #88]	; (800b618 <TIM_OC6_SetConfig+0xbc>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d007      	beq.n	800b5d4 <TIM_OC6_SetConfig+0x78>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a15      	ldr	r2, [pc, #84]	; (800b61c <TIM_OC6_SetConfig+0xc0>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d003      	beq.n	800b5d4 <TIM_OC6_SetConfig+0x78>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a14      	ldr	r2, [pc, #80]	; (800b620 <TIM_OC6_SetConfig+0xc4>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d109      	bne.n	800b5e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	695b      	ldr	r3, [r3, #20]
 800b5e0:	029b      	lsls	r3, r3, #10
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	621a      	str	r2, [r3, #32]
}
 800b602:	bf00      	nop
 800b604:	371c      	adds	r7, #28
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	40010000 	.word	0x40010000
 800b614:	40010400 	.word	0x40010400
 800b618:	40014000 	.word	0x40014000
 800b61c:	40014400 	.word	0x40014400
 800b620:	40014800 	.word	0x40014800

0800b624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b634:	2b01      	cmp	r3, #1
 800b636:	d101      	bne.n	800b63c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b638:	2302      	movs	r3, #2
 800b63a:	e077      	b.n	800b72c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a35      	ldr	r2, [pc, #212]	; (800b738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d004      	beq.n	800b670 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a34      	ldr	r2, [pc, #208]	; (800b73c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d108      	bne.n	800b682 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b676:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b688:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	4313      	orrs	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a25      	ldr	r2, [pc, #148]	; (800b738 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d02c      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ae:	d027      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a22      	ldr	r2, [pc, #136]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d022      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a21      	ldr	r2, [pc, #132]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d01d      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a1f      	ldr	r2, [pc, #124]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d018      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a1a      	ldr	r2, [pc, #104]	; (800b73c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d013      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a1b      	ldr	r2, [pc, #108]	; (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d00e      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a1a      	ldr	r2, [pc, #104]	; (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d009      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a18      	ldr	r2, [pc, #96]	; (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d004      	beq.n	800b700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a17      	ldr	r2, [pc, #92]	; (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d10c      	bne.n	800b71a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b706:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	4313      	orrs	r3, r2
 800b710:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3714      	adds	r7, #20
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr
 800b738:	40010000 	.word	0x40010000
 800b73c:	40010400 	.word	0x40010400
 800b740:	40000400 	.word	0x40000400
 800b744:	40000800 	.word	0x40000800
 800b748:	40000c00 	.word	0x40000c00
 800b74c:	40001800 	.word	0x40001800
 800b750:	40014000 	.word	0x40014000
 800b754:	4000e000 	.word	0x4000e000
 800b758:	4000e400 	.word	0x4000e400

0800b75c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b766:	2300      	movs	r3, #0
 800b768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b770:	2b01      	cmp	r3, #1
 800b772:	d101      	bne.n	800b778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b774:	2302      	movs	r3, #2
 800b776:	e065      	b.n	800b844 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	4313      	orrs	r3, r2
 800b79a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	041b      	lsls	r3, r3, #16
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a16      	ldr	r2, [pc, #88]	; (800b850 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d004      	beq.n	800b806 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a14      	ldr	r2, [pc, #80]	; (800b854 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d115      	bne.n	800b832 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	051b      	lsls	r3, r3, #20
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	69db      	ldr	r3, [r3, #28]
 800b820:	4313      	orrs	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	6a1b      	ldr	r3, [r3, #32]
 800b82e:	4313      	orrs	r3, r2
 800b830:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr
 800b850:	40010000 	.word	0x40010000
 800b854:	40010400 	.word	0x40010400

0800b858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d101      	bne.n	800b8a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e042      	b.n	800b92c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d106      	bne.n	800b8be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7f6 ffab 	bl	8002814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2224      	movs	r2, #36	; 0x24
 800b8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0201 	bic.w	r2, r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fb9c 	bl	800c014 <UART_SetConfig>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d101      	bne.n	800b8e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e022      	b.n	800b92c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 f9ee 	bl	800ccd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	689a      	ldr	r2, [r3, #8]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0201 	orr.w	r2, r2, #1
 800b922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f001 fa75 	bl	800ce14 <UART_CheckIdleState>
 800b92a:	4603      	mov	r3, r0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af02      	add	r7, sp, #8
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	4613      	mov	r3, r2
 800b942:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b94a:	2b20      	cmp	r3, #32
 800b94c:	f040 8083 	bne.w	800ba56 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <HAL_UART_Transmit+0x28>
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e07b      	b.n	800ba58 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b966:	2b01      	cmp	r3, #1
 800b968:	d101      	bne.n	800b96e <HAL_UART_Transmit+0x3a>
 800b96a:	2302      	movs	r3, #2
 800b96c:	e074      	b.n	800ba58 <HAL_UART_Transmit+0x124>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2221      	movs	r2, #33	; 0x21
 800b982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b986:	f7f7 f9ed 	bl	8002d64 <HAL_GetTick>
 800b98a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	88fa      	ldrh	r2, [r7, #6]
 800b990:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	88fa      	ldrh	r2, [r7, #6]
 800b998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a4:	d108      	bne.n	800b9b8 <HAL_UART_Transmit+0x84>
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d104      	bne.n	800b9b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	61bb      	str	r3, [r7, #24]
 800b9b6:	e003      	b.n	800b9c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b9c8:	e02c      	b.n	800ba24 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	2180      	movs	r1, #128	; 0x80
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f001 fa68 	bl	800ceaa <UART_WaitOnFlagUntilTimeout>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e039      	b.n	800ba58 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10b      	bne.n	800ba02 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	3302      	adds	r3, #2
 800b9fe:	61bb      	str	r3, [r7, #24]
 800ba00:	e007      	b.n	800ba12 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	781a      	ldrb	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1cc      	bne.n	800b9ca <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	2200      	movs	r2, #0
 800ba38:	2140      	movs	r1, #64	; 0x40
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f001 fa35 	bl	800ceaa <UART_WaitOnFlagUntilTimeout>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e006      	b.n	800ba58 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e000      	b.n	800ba58 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ba56:	2302      	movs	r3, #2
  }
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3720      	adds	r7, #32
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba80:	69fa      	ldr	r2, [r7, #28]
 800ba82:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba86:	4013      	ands	r3, r2
 800ba88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d118      	bne.n	800bac2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	f003 0320 	and.w	r3, r3, #32
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d013      	beq.n	800bac2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	f003 0320 	and.w	r3, r3, #32
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d104      	bne.n	800baae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d009      	beq.n	800bac2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 8282 	beq.w	800bfbc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
      }
      return;
 800bac0:	e27c      	b.n	800bfbc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 80ef 	beq.w	800bca8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	4b73      	ldr	r3, [pc, #460]	; (800bc9c <HAL_UART_IRQHandler+0x23c>)
 800bace:	4013      	ands	r3, r2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d105      	bne.n	800bae0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bad4:	69ba      	ldr	r2, [r7, #24]
 800bad6:	4b72      	ldr	r3, [pc, #456]	; (800bca0 <HAL_UART_IRQHandler+0x240>)
 800bad8:	4013      	ands	r3, r2
 800bada:	2b00      	cmp	r3, #0
 800badc:	f000 80e4 	beq.w	800bca8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d010      	beq.n	800bb0c <HAL_UART_IRQHandler+0xac>
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00b      	beq.n	800bb0c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2201      	movs	r2, #1
 800bafa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb02:	f043 0201 	orr.w	r2, r3, #1
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	f003 0302 	and.w	r3, r3, #2
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d010      	beq.n	800bb38 <HAL_UART_IRQHandler+0xd8>
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00b      	beq.n	800bb38 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2202      	movs	r2, #2
 800bb26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb2e:	f043 0204 	orr.w	r2, r3, #4
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	f003 0304 	and.w	r3, r3, #4
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d010      	beq.n	800bb64 <HAL_UART_IRQHandler+0x104>
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00b      	beq.n	800bb64 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2204      	movs	r2, #4
 800bb52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb5a:	f043 0202 	orr.w	r2, r3, #2
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d015      	beq.n	800bb9a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb6e:	69bb      	ldr	r3, [r7, #24]
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d104      	bne.n	800bb82 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb78:	697a      	ldr	r2, [r7, #20]
 800bb7a:	4b48      	ldr	r3, [pc, #288]	; (800bc9c <HAL_UART_IRQHandler+0x23c>)
 800bb7c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00b      	beq.n	800bb9a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2208      	movs	r2, #8
 800bb88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb90:	f043 0208 	orr.w	r2, r3, #8
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d011      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x168>
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00c      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbbe:	f043 0220 	orr.w	r2, r3, #32
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 81f6 	beq.w	800bfc0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d011      	beq.n	800bc02 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	f003 0320 	and.w	r3, r3, #32
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d104      	bne.n	800bbf2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	d004      	beq.n	800bc22 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d031      	beq.n	800bc86 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 f9c2 	bl	800cfac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc32:	2b40      	cmp	r3, #64	; 0x40
 800bc34:	d123      	bne.n	800bc7e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689a      	ldr	r2, [r3, #8]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d013      	beq.n	800bc76 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc52:	4a14      	ldr	r2, [pc, #80]	; (800bca4 <HAL_UART_IRQHandler+0x244>)
 800bc54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f9 fe02 	bl	8005864 <HAL_DMA_Abort_IT>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d017      	beq.n	800bc96 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc74:	e00f      	b.n	800bc96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f9b6 	bl	800bfe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc7c:	e00b      	b.n	800bc96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f9b2 	bl	800bfe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc84:	e007      	b.n	800bc96 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f9ae 	bl	800bfe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bc94:	e194      	b.n	800bfc0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc96:	bf00      	nop
    return;
 800bc98:	e192      	b.n	800bfc0 <HAL_UART_IRQHandler+0x560>
 800bc9a:	bf00      	nop
 800bc9c:	10000001 	.word	0x10000001
 800bca0:	04000120 	.word	0x04000120
 800bca4:	0800d011 	.word	0x0800d011

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	f040 810f 	bne.w	800bed0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	f000 8109 	beq.w	800bed0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	f003 0310 	and.w	r3, r3, #16
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 8103 	beq.w	800bed0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2210      	movs	r2, #16
 800bcd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcdc:	2b40      	cmp	r3, #64	; 0x40
 800bcde:	f040 80bb 	bne.w	800be58 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a96      	ldr	r2, [pc, #600]	; (800bf44 <HAL_UART_IRQHandler+0x4e4>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d059      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a94      	ldr	r2, [pc, #592]	; (800bf48 <HAL_UART_IRQHandler+0x4e8>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d053      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a92      	ldr	r2, [pc, #584]	; (800bf4c <HAL_UART_IRQHandler+0x4ec>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d04d      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a90      	ldr	r2, [pc, #576]	; (800bf50 <HAL_UART_IRQHandler+0x4f0>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d047      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a8e      	ldr	r2, [pc, #568]	; (800bf54 <HAL_UART_IRQHandler+0x4f4>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d041      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a8c      	ldr	r2, [pc, #560]	; (800bf58 <HAL_UART_IRQHandler+0x4f8>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d03b      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a8a      	ldr	r2, [pc, #552]	; (800bf5c <HAL_UART_IRQHandler+0x4fc>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d035      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4a88      	ldr	r2, [pc, #544]	; (800bf60 <HAL_UART_IRQHandler+0x500>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d02f      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a86      	ldr	r2, [pc, #536]	; (800bf64 <HAL_UART_IRQHandler+0x504>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d029      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a84      	ldr	r2, [pc, #528]	; (800bf68 <HAL_UART_IRQHandler+0x508>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d023      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a82      	ldr	r2, [pc, #520]	; (800bf6c <HAL_UART_IRQHandler+0x50c>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d01d      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a80      	ldr	r2, [pc, #512]	; (800bf70 <HAL_UART_IRQHandler+0x510>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d017      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a7e      	ldr	r2, [pc, #504]	; (800bf74 <HAL_UART_IRQHandler+0x514>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d011      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a7c      	ldr	r2, [pc, #496]	; (800bf78 <HAL_UART_IRQHandler+0x518>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d00b      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a7a      	ldr	r2, [pc, #488]	; (800bf7c <HAL_UART_IRQHandler+0x51c>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d005      	beq.n	800bda2 <HAL_UART_IRQHandler+0x342>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a78      	ldr	r2, [pc, #480]	; (800bf80 <HAL_UART_IRQHandler+0x520>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d105      	bne.n	800bdae <HAL_UART_IRQHandler+0x34e>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	e004      	b.n	800bdb8 <HAL_UART_IRQHandler+0x358>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800bdba:	893b      	ldrh	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8101 	beq.w	800bfc4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdc8:	893a      	ldrh	r2, [r7, #8]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	f080 80fa 	bcs.w	800bfc4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	893a      	ldrh	r2, [r7, #8]
 800bdd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde2:	d02b      	beq.n	800be3c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689a      	ldr	r2, [r3, #8]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0201 	bic.w	r2, r2, #1
 800be02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2220      	movs	r2, #32
 800be18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 0210 	bic.w	r2, r2, #16
 800be30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be36:	4618      	mov	r0, r3
 800be38:	f7f9 f9f6 	bl	8005228 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be48:	b29b      	uxth	r3, r3
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f8d3 	bl	800bffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be56:	e0b5      	b.n	800bfc4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be64:	b29b      	uxth	r3, r3
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be70:	b29b      	uxth	r3, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 80a8 	beq.w	800bfc8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800be78:	897b      	ldrh	r3, [r7, #10]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 80a4 	beq.w	800bfc8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6899      	ldr	r1, [r3, #8]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	4b3a      	ldr	r3, [pc, #232]	; (800bf84 <HAL_UART_IRQHandler+0x524>)
 800be9c:	400b      	ands	r3, r1
 800be9e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f022 0210 	bic.w	r2, r2, #16
 800bec2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bec4:	897b      	ldrh	r3, [r7, #10]
 800bec6:	4619      	mov	r1, r3
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 f897 	bl	800bffc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bece:	e07b      	b.n	800bfc8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00d      	beq.n	800bef6 <HAL_UART_IRQHandler+0x496>
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d008      	beq.n	800bef6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800beec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f001 f8be 	bl	800d070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bef4:	e06b      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800befc:	2b00      	cmp	r3, #0
 800befe:	d012      	beq.n	800bf26 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d104      	bne.n	800bf14 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d008      	beq.n	800bf26 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d057      	beq.n	800bfcc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	4798      	blx	r3
    }
    return;
 800bf24:	e052      	b.n	800bfcc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d02b      	beq.n	800bf88 <HAL_UART_IRQHandler+0x528>
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d026      	beq.n	800bf88 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 f87e 	bl	800d03c <UART_EndTransmit_IT>
    return;
 800bf40:	e045      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
 800bf42:	bf00      	nop
 800bf44:	40020010 	.word	0x40020010
 800bf48:	40020028 	.word	0x40020028
 800bf4c:	40020040 	.word	0x40020040
 800bf50:	40020058 	.word	0x40020058
 800bf54:	40020070 	.word	0x40020070
 800bf58:	40020088 	.word	0x40020088
 800bf5c:	400200a0 	.word	0x400200a0
 800bf60:	400200b8 	.word	0x400200b8
 800bf64:	40020410 	.word	0x40020410
 800bf68:	40020428 	.word	0x40020428
 800bf6c:	40020440 	.word	0x40020440
 800bf70:	40020458 	.word	0x40020458
 800bf74:	40020470 	.word	0x40020470
 800bf78:	40020488 	.word	0x40020488
 800bf7c:	400204a0 	.word	0x400204a0
 800bf80:	400204b8 	.word	0x400204b8
 800bf84:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d008      	beq.n	800bfa4 <HAL_UART_IRQHandler+0x544>
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f001 f87b 	bl	800d098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfa2:	e014      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00f      	beq.n	800bfce <HAL_UART_IRQHandler+0x56e>
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	da0c      	bge.n	800bfce <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f001 f865 	bl	800d084 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bfba:	e008      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
      return;
 800bfbc:	bf00      	nop
 800bfbe:	e006      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
    return;
 800bfc0:	bf00      	nop
 800bfc2:	e004      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
      return;
 800bfc4:	bf00      	nop
 800bfc6:	e002      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
      return;
 800bfc8:	bf00      	nop
 800bfca:	e000      	b.n	800bfce <HAL_UART_IRQHandler+0x56e>
    return;
 800bfcc:	bf00      	nop
  }
}
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bfdc:	bf00      	nop
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr

0800bfe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c014:	b5b0      	push	{r4, r5, r7, lr}
 800c016:	b08e      	sub	sp, #56	; 0x38
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	689a      	ldr	r2, [r3, #8]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	431a      	orrs	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	431a      	orrs	r2, r3
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	4313      	orrs	r3, r2
 800c038:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	4bbf      	ldr	r3, [pc, #764]	; (800c340 <UART_SetConfig+0x32c>)
 800c042:	4013      	ands	r3, r2
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6812      	ldr	r2, [r2, #0]
 800c048:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c04a:	430b      	orrs	r3, r1
 800c04c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	68da      	ldr	r2, [r3, #12]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	430a      	orrs	r2, r1
 800c062:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	699b      	ldr	r3, [r3, #24]
 800c068:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4ab5      	ldr	r2, [pc, #724]	; (800c344 <UART_SetConfig+0x330>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d004      	beq.n	800c07e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a1b      	ldr	r3, [r3, #32]
 800c078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c07a:	4313      	orrs	r3, r2
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	689a      	ldr	r2, [r3, #8]
 800c084:	4bb0      	ldr	r3, [pc, #704]	; (800c348 <UART_SetConfig+0x334>)
 800c086:	4013      	ands	r3, r2
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	6812      	ldr	r2, [r2, #0]
 800c08c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c08e:	430b      	orrs	r3, r1
 800c090:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	f023 010f 	bic.w	r1, r3, #15
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	430a      	orrs	r2, r1
 800c0a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4aa7      	ldr	r2, [pc, #668]	; (800c34c <UART_SetConfig+0x338>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d176      	bne.n	800c1a0 <UART_SetConfig+0x18c>
 800c0b2:	4ba7      	ldr	r3, [pc, #668]	; (800c350 <UART_SetConfig+0x33c>)
 800c0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0ba:	2b28      	cmp	r3, #40	; 0x28
 800c0bc:	d86c      	bhi.n	800c198 <UART_SetConfig+0x184>
 800c0be:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <UART_SetConfig+0xb0>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c169 	.word	0x0800c169
 800c0c8:	0800c199 	.word	0x0800c199
 800c0cc:	0800c199 	.word	0x0800c199
 800c0d0:	0800c199 	.word	0x0800c199
 800c0d4:	0800c199 	.word	0x0800c199
 800c0d8:	0800c199 	.word	0x0800c199
 800c0dc:	0800c199 	.word	0x0800c199
 800c0e0:	0800c199 	.word	0x0800c199
 800c0e4:	0800c171 	.word	0x0800c171
 800c0e8:	0800c199 	.word	0x0800c199
 800c0ec:	0800c199 	.word	0x0800c199
 800c0f0:	0800c199 	.word	0x0800c199
 800c0f4:	0800c199 	.word	0x0800c199
 800c0f8:	0800c199 	.word	0x0800c199
 800c0fc:	0800c199 	.word	0x0800c199
 800c100:	0800c199 	.word	0x0800c199
 800c104:	0800c179 	.word	0x0800c179
 800c108:	0800c199 	.word	0x0800c199
 800c10c:	0800c199 	.word	0x0800c199
 800c110:	0800c199 	.word	0x0800c199
 800c114:	0800c199 	.word	0x0800c199
 800c118:	0800c199 	.word	0x0800c199
 800c11c:	0800c199 	.word	0x0800c199
 800c120:	0800c199 	.word	0x0800c199
 800c124:	0800c181 	.word	0x0800c181
 800c128:	0800c199 	.word	0x0800c199
 800c12c:	0800c199 	.word	0x0800c199
 800c130:	0800c199 	.word	0x0800c199
 800c134:	0800c199 	.word	0x0800c199
 800c138:	0800c199 	.word	0x0800c199
 800c13c:	0800c199 	.word	0x0800c199
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c189 	.word	0x0800c189
 800c148:	0800c199 	.word	0x0800c199
 800c14c:	0800c199 	.word	0x0800c199
 800c150:	0800c199 	.word	0x0800c199
 800c154:	0800c199 	.word	0x0800c199
 800c158:	0800c199 	.word	0x0800c199
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c191 	.word	0x0800c191
 800c168:	2301      	movs	r3, #1
 800c16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c16e:	e326      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c176:	e322      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c17e:	e31e      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c186:	e31a      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c188:	2320      	movs	r3, #32
 800c18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c18e:	e316      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c196:	e312      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c198:	2380      	movs	r3, #128	; 0x80
 800c19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c19e:	e30e      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a6b      	ldr	r2, [pc, #428]	; (800c354 <UART_SetConfig+0x340>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d130      	bne.n	800c20c <UART_SetConfig+0x1f8>
 800c1aa:	4b69      	ldr	r3, [pc, #420]	; (800c350 <UART_SetConfig+0x33c>)
 800c1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b05      	cmp	r3, #5
 800c1b4:	d826      	bhi.n	800c204 <UART_SetConfig+0x1f0>
 800c1b6:	a201      	add	r2, pc, #4	; (adr r2, 800c1bc <UART_SetConfig+0x1a8>)
 800c1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1bc:	0800c1d5 	.word	0x0800c1d5
 800c1c0:	0800c1dd 	.word	0x0800c1dd
 800c1c4:	0800c1e5 	.word	0x0800c1e5
 800c1c8:	0800c1ed 	.word	0x0800c1ed
 800c1cc:	0800c1f5 	.word	0x0800c1f5
 800c1d0:	0800c1fd 	.word	0x0800c1fd
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1da:	e2f0      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c1dc:	2304      	movs	r3, #4
 800c1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1e2:	e2ec      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c1e4:	2308      	movs	r3, #8
 800c1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1ea:	e2e8      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c1ec:	2310      	movs	r3, #16
 800c1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1f2:	e2e4      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c1f4:	2320      	movs	r3, #32
 800c1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c1fa:	e2e0      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c1fc:	2340      	movs	r3, #64	; 0x40
 800c1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c202:	e2dc      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c204:	2380      	movs	r3, #128	; 0x80
 800c206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c20a:	e2d8      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a51      	ldr	r2, [pc, #324]	; (800c358 <UART_SetConfig+0x344>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d130      	bne.n	800c278 <UART_SetConfig+0x264>
 800c216:	4b4e      	ldr	r3, [pc, #312]	; (800c350 <UART_SetConfig+0x33c>)
 800c218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	2b05      	cmp	r3, #5
 800c220:	d826      	bhi.n	800c270 <UART_SetConfig+0x25c>
 800c222:	a201      	add	r2, pc, #4	; (adr r2, 800c228 <UART_SetConfig+0x214>)
 800c224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c249 	.word	0x0800c249
 800c230:	0800c251 	.word	0x0800c251
 800c234:	0800c259 	.word	0x0800c259
 800c238:	0800c261 	.word	0x0800c261
 800c23c:	0800c269 	.word	0x0800c269
 800c240:	2300      	movs	r3, #0
 800c242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c246:	e2ba      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c248:	2304      	movs	r3, #4
 800c24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c24e:	e2b6      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c250:	2308      	movs	r3, #8
 800c252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c256:	e2b2      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c258:	2310      	movs	r3, #16
 800c25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c25e:	e2ae      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c260:	2320      	movs	r3, #32
 800c262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c266:	e2aa      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c268:	2340      	movs	r3, #64	; 0x40
 800c26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c26e:	e2a6      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c270:	2380      	movs	r3, #128	; 0x80
 800c272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c276:	e2a2      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a37      	ldr	r2, [pc, #220]	; (800c35c <UART_SetConfig+0x348>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d130      	bne.n	800c2e4 <UART_SetConfig+0x2d0>
 800c282:	4b33      	ldr	r3, [pc, #204]	; (800c350 <UART_SetConfig+0x33c>)
 800c284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b05      	cmp	r3, #5
 800c28c:	d826      	bhi.n	800c2dc <UART_SetConfig+0x2c8>
 800c28e:	a201      	add	r2, pc, #4	; (adr r2, 800c294 <UART_SetConfig+0x280>)
 800c290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c294:	0800c2ad 	.word	0x0800c2ad
 800c298:	0800c2b5 	.word	0x0800c2b5
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2c5 	.word	0x0800c2c5
 800c2a4:	0800c2cd 	.word	0x0800c2cd
 800c2a8:	0800c2d5 	.word	0x0800c2d5
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2b2:	e284      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2b4:	2304      	movs	r3, #4
 800c2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ba:	e280      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2bc:	2308      	movs	r3, #8
 800c2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2c2:	e27c      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2ca:	e278      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2cc:	2320      	movs	r3, #32
 800c2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2d2:	e274      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2d4:	2340      	movs	r3, #64	; 0x40
 800c2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2da:	e270      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2dc:	2380      	movs	r3, #128	; 0x80
 800c2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c2e2:	e26c      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a1d      	ldr	r2, [pc, #116]	; (800c360 <UART_SetConfig+0x34c>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d142      	bne.n	800c374 <UART_SetConfig+0x360>
 800c2ee:	4b18      	ldr	r3, [pc, #96]	; (800c350 <UART_SetConfig+0x33c>)
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f2:	f003 0307 	and.w	r3, r3, #7
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d838      	bhi.n	800c36c <UART_SetConfig+0x358>
 800c2fa:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <UART_SetConfig+0x2ec>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c319 	.word	0x0800c319
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c329 	.word	0x0800c329
 800c30c:	0800c331 	.word	0x0800c331
 800c310:	0800c339 	.word	0x0800c339
 800c314:	0800c365 	.word	0x0800c365
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c31e:	e24e      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c320:	2304      	movs	r3, #4
 800c322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c326:	e24a      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c328:	2308      	movs	r3, #8
 800c32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c32e:	e246      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c330:	2310      	movs	r3, #16
 800c332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c336:	e242      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c338:	2320      	movs	r3, #32
 800c33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c33e:	e23e      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c340:	cfff69f3 	.word	0xcfff69f3
 800c344:	58000c00 	.word	0x58000c00
 800c348:	11fff4ff 	.word	0x11fff4ff
 800c34c:	40011000 	.word	0x40011000
 800c350:	58024400 	.word	0x58024400
 800c354:	40004400 	.word	0x40004400
 800c358:	40004800 	.word	0x40004800
 800c35c:	40004c00 	.word	0x40004c00
 800c360:	40005000 	.word	0x40005000
 800c364:	2340      	movs	r3, #64	; 0x40
 800c366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c36a:	e228      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c36c:	2380      	movs	r3, #128	; 0x80
 800c36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c372:	e224      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4ab1      	ldr	r2, [pc, #708]	; (800c640 <UART_SetConfig+0x62c>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d176      	bne.n	800c46c <UART_SetConfig+0x458>
 800c37e:	4bb1      	ldr	r3, [pc, #708]	; (800c644 <UART_SetConfig+0x630>)
 800c380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c386:	2b28      	cmp	r3, #40	; 0x28
 800c388:	d86c      	bhi.n	800c464 <UART_SetConfig+0x450>
 800c38a:	a201      	add	r2, pc, #4	; (adr r2, 800c390 <UART_SetConfig+0x37c>)
 800c38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c390:	0800c435 	.word	0x0800c435
 800c394:	0800c465 	.word	0x0800c465
 800c398:	0800c465 	.word	0x0800c465
 800c39c:	0800c465 	.word	0x0800c465
 800c3a0:	0800c465 	.word	0x0800c465
 800c3a4:	0800c465 	.word	0x0800c465
 800c3a8:	0800c465 	.word	0x0800c465
 800c3ac:	0800c465 	.word	0x0800c465
 800c3b0:	0800c43d 	.word	0x0800c43d
 800c3b4:	0800c465 	.word	0x0800c465
 800c3b8:	0800c465 	.word	0x0800c465
 800c3bc:	0800c465 	.word	0x0800c465
 800c3c0:	0800c465 	.word	0x0800c465
 800c3c4:	0800c465 	.word	0x0800c465
 800c3c8:	0800c465 	.word	0x0800c465
 800c3cc:	0800c465 	.word	0x0800c465
 800c3d0:	0800c445 	.word	0x0800c445
 800c3d4:	0800c465 	.word	0x0800c465
 800c3d8:	0800c465 	.word	0x0800c465
 800c3dc:	0800c465 	.word	0x0800c465
 800c3e0:	0800c465 	.word	0x0800c465
 800c3e4:	0800c465 	.word	0x0800c465
 800c3e8:	0800c465 	.word	0x0800c465
 800c3ec:	0800c465 	.word	0x0800c465
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c465 	.word	0x0800c465
 800c3f8:	0800c465 	.word	0x0800c465
 800c3fc:	0800c465 	.word	0x0800c465
 800c400:	0800c465 	.word	0x0800c465
 800c404:	0800c465 	.word	0x0800c465
 800c408:	0800c465 	.word	0x0800c465
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c455 	.word	0x0800c455
 800c414:	0800c465 	.word	0x0800c465
 800c418:	0800c465 	.word	0x0800c465
 800c41c:	0800c465 	.word	0x0800c465
 800c420:	0800c465 	.word	0x0800c465
 800c424:	0800c465 	.word	0x0800c465
 800c428:	0800c465 	.word	0x0800c465
 800c42c:	0800c465 	.word	0x0800c465
 800c430:	0800c45d 	.word	0x0800c45d
 800c434:	2301      	movs	r3, #1
 800c436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c43a:	e1c0      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c43c:	2304      	movs	r3, #4
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e1bc      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c444:	2308      	movs	r3, #8
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e1b8      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c44c:	2310      	movs	r3, #16
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e1b4      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c454:	2320      	movs	r3, #32
 800c456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c45a:	e1b0      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c462:	e1ac      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e1a8      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a75      	ldr	r2, [pc, #468]	; (800c648 <UART_SetConfig+0x634>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d130      	bne.n	800c4d8 <UART_SetConfig+0x4c4>
 800c476:	4b73      	ldr	r3, [pc, #460]	; (800c644 <UART_SetConfig+0x630>)
 800c478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c47a:	f003 0307 	and.w	r3, r3, #7
 800c47e:	2b05      	cmp	r3, #5
 800c480:	d826      	bhi.n	800c4d0 <UART_SetConfig+0x4bc>
 800c482:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <UART_SetConfig+0x474>)
 800c484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4a9 	.word	0x0800c4a9
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4b9 	.word	0x0800c4b9
 800c498:	0800c4c1 	.word	0x0800c4c1
 800c49c:	0800c4c9 	.word	0x0800c4c9
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4a6:	e18a      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ae:	e186      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4b0:	2308      	movs	r3, #8
 800c4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4b6:	e182      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4b8:	2310      	movs	r3, #16
 800c4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4be:	e17e      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4c6:	e17a      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ce:	e176      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4d0:	2380      	movs	r3, #128	; 0x80
 800c4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4d6:	e172      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a5b      	ldr	r2, [pc, #364]	; (800c64c <UART_SetConfig+0x638>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d130      	bne.n	800c544 <UART_SetConfig+0x530>
 800c4e2:	4b58      	ldr	r3, [pc, #352]	; (800c644 <UART_SetConfig+0x630>)
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d826      	bhi.n	800c53c <UART_SetConfig+0x528>
 800c4ee:	a201      	add	r2, pc, #4	; (adr r2, 800c4f4 <UART_SetConfig+0x4e0>)
 800c4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f4:	0800c50d 	.word	0x0800c50d
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	0800c51d 	.word	0x0800c51d
 800c500:	0800c525 	.word	0x0800c525
 800c504:	0800c52d 	.word	0x0800c52d
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	2300      	movs	r3, #0
 800c50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c512:	e154      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c514:	2304      	movs	r3, #4
 800c516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c51a:	e150      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c51c:	2308      	movs	r3, #8
 800c51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c522:	e14c      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c524:	2310      	movs	r3, #16
 800c526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52a:	e148      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c52c:	2320      	movs	r3, #32
 800c52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c532:	e144      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c53a:	e140      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c53c:	2380      	movs	r3, #128	; 0x80
 800c53e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c542:	e13c      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a41      	ldr	r2, [pc, #260]	; (800c650 <UART_SetConfig+0x63c>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	f040 8082 	bne.w	800c654 <UART_SetConfig+0x640>
 800c550:	4b3c      	ldr	r3, [pc, #240]	; (800c644 <UART_SetConfig+0x630>)
 800c552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c558:	2b28      	cmp	r3, #40	; 0x28
 800c55a:	d86d      	bhi.n	800c638 <UART_SetConfig+0x624>
 800c55c:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <UART_SetConfig+0x550>)
 800c55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c562:	bf00      	nop
 800c564:	0800c609 	.word	0x0800c609
 800c568:	0800c639 	.word	0x0800c639
 800c56c:	0800c639 	.word	0x0800c639
 800c570:	0800c639 	.word	0x0800c639
 800c574:	0800c639 	.word	0x0800c639
 800c578:	0800c639 	.word	0x0800c639
 800c57c:	0800c639 	.word	0x0800c639
 800c580:	0800c639 	.word	0x0800c639
 800c584:	0800c611 	.word	0x0800c611
 800c588:	0800c639 	.word	0x0800c639
 800c58c:	0800c639 	.word	0x0800c639
 800c590:	0800c639 	.word	0x0800c639
 800c594:	0800c639 	.word	0x0800c639
 800c598:	0800c639 	.word	0x0800c639
 800c59c:	0800c639 	.word	0x0800c639
 800c5a0:	0800c639 	.word	0x0800c639
 800c5a4:	0800c619 	.word	0x0800c619
 800c5a8:	0800c639 	.word	0x0800c639
 800c5ac:	0800c639 	.word	0x0800c639
 800c5b0:	0800c639 	.word	0x0800c639
 800c5b4:	0800c639 	.word	0x0800c639
 800c5b8:	0800c639 	.word	0x0800c639
 800c5bc:	0800c639 	.word	0x0800c639
 800c5c0:	0800c639 	.word	0x0800c639
 800c5c4:	0800c621 	.word	0x0800c621
 800c5c8:	0800c639 	.word	0x0800c639
 800c5cc:	0800c639 	.word	0x0800c639
 800c5d0:	0800c639 	.word	0x0800c639
 800c5d4:	0800c639 	.word	0x0800c639
 800c5d8:	0800c639 	.word	0x0800c639
 800c5dc:	0800c639 	.word	0x0800c639
 800c5e0:	0800c639 	.word	0x0800c639
 800c5e4:	0800c629 	.word	0x0800c629
 800c5e8:	0800c639 	.word	0x0800c639
 800c5ec:	0800c639 	.word	0x0800c639
 800c5f0:	0800c639 	.word	0x0800c639
 800c5f4:	0800c639 	.word	0x0800c639
 800c5f8:	0800c639 	.word	0x0800c639
 800c5fc:	0800c639 	.word	0x0800c639
 800c600:	0800c639 	.word	0x0800c639
 800c604:	0800c631 	.word	0x0800c631
 800c608:	2301      	movs	r3, #1
 800c60a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c60e:	e0d6      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c610:	2304      	movs	r3, #4
 800c612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c616:	e0d2      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c618:	2308      	movs	r3, #8
 800c61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c61e:	e0ce      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c620:	2310      	movs	r3, #16
 800c622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c626:	e0ca      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c628:	2320      	movs	r3, #32
 800c62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c62e:	e0c6      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c630:	2340      	movs	r3, #64	; 0x40
 800c632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c636:	e0c2      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c638:	2380      	movs	r3, #128	; 0x80
 800c63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c63e:	e0be      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c640:	40011400 	.word	0x40011400
 800c644:	58024400 	.word	0x58024400
 800c648:	40007800 	.word	0x40007800
 800c64c:	40007c00 	.word	0x40007c00
 800c650:	40011800 	.word	0x40011800
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4aad      	ldr	r2, [pc, #692]	; (800c910 <UART_SetConfig+0x8fc>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d176      	bne.n	800c74c <UART_SetConfig+0x738>
 800c65e:	4bad      	ldr	r3, [pc, #692]	; (800c914 <UART_SetConfig+0x900>)
 800c660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c666:	2b28      	cmp	r3, #40	; 0x28
 800c668:	d86c      	bhi.n	800c744 <UART_SetConfig+0x730>
 800c66a:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <UART_SetConfig+0x65c>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c715 	.word	0x0800c715
 800c674:	0800c745 	.word	0x0800c745
 800c678:	0800c745 	.word	0x0800c745
 800c67c:	0800c745 	.word	0x0800c745
 800c680:	0800c745 	.word	0x0800c745
 800c684:	0800c745 	.word	0x0800c745
 800c688:	0800c745 	.word	0x0800c745
 800c68c:	0800c745 	.word	0x0800c745
 800c690:	0800c71d 	.word	0x0800c71d
 800c694:	0800c745 	.word	0x0800c745
 800c698:	0800c745 	.word	0x0800c745
 800c69c:	0800c745 	.word	0x0800c745
 800c6a0:	0800c745 	.word	0x0800c745
 800c6a4:	0800c745 	.word	0x0800c745
 800c6a8:	0800c745 	.word	0x0800c745
 800c6ac:	0800c745 	.word	0x0800c745
 800c6b0:	0800c725 	.word	0x0800c725
 800c6b4:	0800c745 	.word	0x0800c745
 800c6b8:	0800c745 	.word	0x0800c745
 800c6bc:	0800c745 	.word	0x0800c745
 800c6c0:	0800c745 	.word	0x0800c745
 800c6c4:	0800c745 	.word	0x0800c745
 800c6c8:	0800c745 	.word	0x0800c745
 800c6cc:	0800c745 	.word	0x0800c745
 800c6d0:	0800c72d 	.word	0x0800c72d
 800c6d4:	0800c745 	.word	0x0800c745
 800c6d8:	0800c745 	.word	0x0800c745
 800c6dc:	0800c745 	.word	0x0800c745
 800c6e0:	0800c745 	.word	0x0800c745
 800c6e4:	0800c745 	.word	0x0800c745
 800c6e8:	0800c745 	.word	0x0800c745
 800c6ec:	0800c745 	.word	0x0800c745
 800c6f0:	0800c735 	.word	0x0800c735
 800c6f4:	0800c745 	.word	0x0800c745
 800c6f8:	0800c745 	.word	0x0800c745
 800c6fc:	0800c745 	.word	0x0800c745
 800c700:	0800c745 	.word	0x0800c745
 800c704:	0800c745 	.word	0x0800c745
 800c708:	0800c745 	.word	0x0800c745
 800c70c:	0800c745 	.word	0x0800c745
 800c710:	0800c73d 	.word	0x0800c73d
 800c714:	2301      	movs	r3, #1
 800c716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c71a:	e050      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c71c:	2304      	movs	r3, #4
 800c71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c722:	e04c      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c724:	2308      	movs	r3, #8
 800c726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c72a:	e048      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c72c:	2310      	movs	r3, #16
 800c72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c732:	e044      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c734:	2320      	movs	r3, #32
 800c736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c73a:	e040      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c73c:	2340      	movs	r3, #64	; 0x40
 800c73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c742:	e03c      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c744:	2380      	movs	r3, #128	; 0x80
 800c746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74a:	e038      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a71      	ldr	r2, [pc, #452]	; (800c918 <UART_SetConfig+0x904>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d130      	bne.n	800c7b8 <UART_SetConfig+0x7a4>
 800c756:	4b6f      	ldr	r3, [pc, #444]	; (800c914 <UART_SetConfig+0x900>)
 800c758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c75a:	f003 0307 	and.w	r3, r3, #7
 800c75e:	2b05      	cmp	r3, #5
 800c760:	d826      	bhi.n	800c7b0 <UART_SetConfig+0x79c>
 800c762:	a201      	add	r2, pc, #4	; (adr r2, 800c768 <UART_SetConfig+0x754>)
 800c764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c768:	0800c781 	.word	0x0800c781
 800c76c:	0800c789 	.word	0x0800c789
 800c770:	0800c791 	.word	0x0800c791
 800c774:	0800c799 	.word	0x0800c799
 800c778:	0800c7a1 	.word	0x0800c7a1
 800c77c:	0800c7a9 	.word	0x0800c7a9
 800c780:	2302      	movs	r3, #2
 800c782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c786:	e01a      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c788:	2304      	movs	r3, #4
 800c78a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c78e:	e016      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c790:	2308      	movs	r3, #8
 800c792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c796:	e012      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c798:	2310      	movs	r3, #16
 800c79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c79e:	e00e      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c7a0:	2320      	movs	r3, #32
 800c7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7a6:	e00a      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c7a8:	2340      	movs	r3, #64	; 0x40
 800c7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ae:	e006      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c7b0:	2380      	movs	r3, #128	; 0x80
 800c7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b6:	e002      	b.n	800c7be <UART_SetConfig+0x7aa>
 800c7b8:	2380      	movs	r3, #128	; 0x80
 800c7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a55      	ldr	r2, [pc, #340]	; (800c918 <UART_SetConfig+0x904>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	f040 80f0 	bne.w	800c9aa <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	dc46      	bgt.n	800c860 <UART_SetConfig+0x84c>
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	db75      	blt.n	800c8c2 <UART_SetConfig+0x8ae>
 800c7d6:	3b02      	subs	r3, #2
 800c7d8:	2b1e      	cmp	r3, #30
 800c7da:	d872      	bhi.n	800c8c2 <UART_SetConfig+0x8ae>
 800c7dc:	a201      	add	r2, pc, #4	; (adr r2, 800c7e4 <UART_SetConfig+0x7d0>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c867 	.word	0x0800c867
 800c7e8:	0800c8c3 	.word	0x0800c8c3
 800c7ec:	0800c86f 	.word	0x0800c86f
 800c7f0:	0800c8c3 	.word	0x0800c8c3
 800c7f4:	0800c8c3 	.word	0x0800c8c3
 800c7f8:	0800c8c3 	.word	0x0800c8c3
 800c7fc:	0800c87f 	.word	0x0800c87f
 800c800:	0800c8c3 	.word	0x0800c8c3
 800c804:	0800c8c3 	.word	0x0800c8c3
 800c808:	0800c8c3 	.word	0x0800c8c3
 800c80c:	0800c8c3 	.word	0x0800c8c3
 800c810:	0800c8c3 	.word	0x0800c8c3
 800c814:	0800c8c3 	.word	0x0800c8c3
 800c818:	0800c8c3 	.word	0x0800c8c3
 800c81c:	0800c88f 	.word	0x0800c88f
 800c820:	0800c8c3 	.word	0x0800c8c3
 800c824:	0800c8c3 	.word	0x0800c8c3
 800c828:	0800c8c3 	.word	0x0800c8c3
 800c82c:	0800c8c3 	.word	0x0800c8c3
 800c830:	0800c8c3 	.word	0x0800c8c3
 800c834:	0800c8c3 	.word	0x0800c8c3
 800c838:	0800c8c3 	.word	0x0800c8c3
 800c83c:	0800c8c3 	.word	0x0800c8c3
 800c840:	0800c8c3 	.word	0x0800c8c3
 800c844:	0800c8c3 	.word	0x0800c8c3
 800c848:	0800c8c3 	.word	0x0800c8c3
 800c84c:	0800c8c3 	.word	0x0800c8c3
 800c850:	0800c8c3 	.word	0x0800c8c3
 800c854:	0800c8c3 	.word	0x0800c8c3
 800c858:	0800c8c3 	.word	0x0800c8c3
 800c85c:	0800c8b5 	.word	0x0800c8b5
 800c860:	2b40      	cmp	r3, #64	; 0x40
 800c862:	d02a      	beq.n	800c8ba <UART_SetConfig+0x8a6>
 800c864:	e02d      	b.n	800c8c2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c866:	f7fc fe95 	bl	8009594 <HAL_RCCEx_GetD3PCLK1Freq>
 800c86a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c86c:	e02f      	b.n	800c8ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c86e:	f107 0314 	add.w	r3, r7, #20
 800c872:	4618      	mov	r0, r3
 800c874:	f7fc fea4 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c87c:	e027      	b.n	800c8ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c87e:	f107 0308 	add.w	r3, r7, #8
 800c882:	4618      	mov	r0, r3
 800c884:	f7fc fff0 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c88c:	e01f      	b.n	800c8ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c88e:	4b21      	ldr	r3, [pc, #132]	; (800c914 <UART_SetConfig+0x900>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c89a:	4b1e      	ldr	r3, [pc, #120]	; (800c914 <UART_SetConfig+0x900>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	08db      	lsrs	r3, r3, #3
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	4a1d      	ldr	r2, [pc, #116]	; (800c91c <UART_SetConfig+0x908>)
 800c8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8ac:	e00f      	b.n	800c8ce <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800c8ae:	4b1b      	ldr	r3, [pc, #108]	; (800c91c <UART_SetConfig+0x908>)
 800c8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8b2:	e00c      	b.n	800c8ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8b4:	4b1a      	ldr	r3, [pc, #104]	; (800c920 <UART_SetConfig+0x90c>)
 800c8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8b8:	e009      	b.n	800c8ce <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c8c0:	e005      	b.n	800c8ce <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c8cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 81e6 	beq.w	800cca2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	4a12      	ldr	r2, [pc, #72]	; (800c924 <UART_SetConfig+0x910>)
 800c8dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8e8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	005b      	lsls	r3, r3, #1
 800c8f2:	4413      	add	r3, r2
 800c8f4:	6a3a      	ldr	r2, [r7, #32]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d305      	bcc.n	800c906 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c900:	6a3a      	ldr	r2, [r7, #32]
 800c902:	429a      	cmp	r2, r3
 800c904:	d910      	bls.n	800c928 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c90c:	e1c9      	b.n	800cca2 <UART_SetConfig+0xc8e>
 800c90e:	bf00      	nop
 800c910:	40011c00 	.word	0x40011c00
 800c914:	58024400 	.word	0x58024400
 800c918:	58000c00 	.word	0x58000c00
 800c91c:	03d09000 	.word	0x03d09000
 800c920:	003d0900 	.word	0x003d0900
 800c924:	0801014c 	.word	0x0801014c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	4618      	mov	r0, r3
 800c92c:	f04f 0100 	mov.w	r1, #0
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c934:	4ac1      	ldr	r2, [pc, #772]	; (800cc3c <UART_SetConfig+0xc28>)
 800c936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	f04f 0300 	mov.w	r3, #0
 800c940:	f7f3 fd3e 	bl	80003c0 <__aeabi_uldivmod>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	4610      	mov	r0, r2
 800c94a:	4619      	mov	r1, r3
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	f04f 0300 	mov.w	r3, #0
 800c954:	020b      	lsls	r3, r1, #8
 800c956:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c95a:	0202      	lsls	r2, r0, #8
 800c95c:	6879      	ldr	r1, [r7, #4]
 800c95e:	6849      	ldr	r1, [r1, #4]
 800c960:	0849      	lsrs	r1, r1, #1
 800c962:	4608      	mov	r0, r1
 800c964:	f04f 0100 	mov.w	r1, #0
 800c968:	1814      	adds	r4, r2, r0
 800c96a:	eb43 0501 	adc.w	r5, r3, r1
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	461a      	mov	r2, r3
 800c974:	f04f 0300 	mov.w	r3, #0
 800c978:	4620      	mov	r0, r4
 800c97a:	4629      	mov	r1, r5
 800c97c:	f7f3 fd20 	bl	80003c0 <__aeabi_uldivmod>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4613      	mov	r3, r2
 800c986:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c98e:	d308      	bcc.n	800c9a2 <UART_SetConfig+0x98e>
 800c990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c996:	d204      	bcs.n	800c9a2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c99e:	60da      	str	r2, [r3, #12]
 800c9a0:	e17f      	b.n	800cca2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c9a8:	e17b      	b.n	800cca2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	69db      	ldr	r3, [r3, #28]
 800c9ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9b2:	f040 80be 	bne.w	800cb32 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800c9b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9ba:	2b20      	cmp	r3, #32
 800c9bc:	dc48      	bgt.n	800ca50 <UART_SetConfig+0xa3c>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	db7b      	blt.n	800caba <UART_SetConfig+0xaa6>
 800c9c2:	2b20      	cmp	r3, #32
 800c9c4:	d879      	bhi.n	800caba <UART_SetConfig+0xaa6>
 800c9c6:	a201      	add	r2, pc, #4	; (adr r2, 800c9cc <UART_SetConfig+0x9b8>)
 800c9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9cc:	0800ca57 	.word	0x0800ca57
 800c9d0:	0800ca5f 	.word	0x0800ca5f
 800c9d4:	0800cabb 	.word	0x0800cabb
 800c9d8:	0800cabb 	.word	0x0800cabb
 800c9dc:	0800ca67 	.word	0x0800ca67
 800c9e0:	0800cabb 	.word	0x0800cabb
 800c9e4:	0800cabb 	.word	0x0800cabb
 800c9e8:	0800cabb 	.word	0x0800cabb
 800c9ec:	0800ca77 	.word	0x0800ca77
 800c9f0:	0800cabb 	.word	0x0800cabb
 800c9f4:	0800cabb 	.word	0x0800cabb
 800c9f8:	0800cabb 	.word	0x0800cabb
 800c9fc:	0800cabb 	.word	0x0800cabb
 800ca00:	0800cabb 	.word	0x0800cabb
 800ca04:	0800cabb 	.word	0x0800cabb
 800ca08:	0800cabb 	.word	0x0800cabb
 800ca0c:	0800ca87 	.word	0x0800ca87
 800ca10:	0800cabb 	.word	0x0800cabb
 800ca14:	0800cabb 	.word	0x0800cabb
 800ca18:	0800cabb 	.word	0x0800cabb
 800ca1c:	0800cabb 	.word	0x0800cabb
 800ca20:	0800cabb 	.word	0x0800cabb
 800ca24:	0800cabb 	.word	0x0800cabb
 800ca28:	0800cabb 	.word	0x0800cabb
 800ca2c:	0800cabb 	.word	0x0800cabb
 800ca30:	0800cabb 	.word	0x0800cabb
 800ca34:	0800cabb 	.word	0x0800cabb
 800ca38:	0800cabb 	.word	0x0800cabb
 800ca3c:	0800cabb 	.word	0x0800cabb
 800ca40:	0800cabb 	.word	0x0800cabb
 800ca44:	0800cabb 	.word	0x0800cabb
 800ca48:	0800cabb 	.word	0x0800cabb
 800ca4c:	0800caad 	.word	0x0800caad
 800ca50:	2b40      	cmp	r3, #64	; 0x40
 800ca52:	d02e      	beq.n	800cab2 <UART_SetConfig+0xa9e>
 800ca54:	e031      	b.n	800caba <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca56:	f7fb fa53 	bl	8007f00 <HAL_RCC_GetPCLK1Freq>
 800ca5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca5c:	e033      	b.n	800cac6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca5e:	f7fb fa65 	bl	8007f2c <HAL_RCC_GetPCLK2Freq>
 800ca62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca64:	e02f      	b.n	800cac6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca66:	f107 0314 	add.w	r3, r7, #20
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7fc fda8 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca74:	e027      	b.n	800cac6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca76:	f107 0308 	add.w	r3, r7, #8
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fc fef4 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca84:	e01f      	b.n	800cac6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca86:	4b6e      	ldr	r3, [pc, #440]	; (800cc40 <UART_SetConfig+0xc2c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d009      	beq.n	800caa6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca92:	4b6b      	ldr	r3, [pc, #428]	; (800cc40 <UART_SetConfig+0xc2c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	08db      	lsrs	r3, r3, #3
 800ca98:	f003 0303 	and.w	r3, r3, #3
 800ca9c:	4a69      	ldr	r2, [pc, #420]	; (800cc44 <UART_SetConfig+0xc30>)
 800ca9e:	fa22 f303 	lsr.w	r3, r2, r3
 800caa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800caa4:	e00f      	b.n	800cac6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800caa6:	4b67      	ldr	r3, [pc, #412]	; (800cc44 <UART_SetConfig+0xc30>)
 800caa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caaa:	e00c      	b.n	800cac6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800caac:	4b66      	ldr	r3, [pc, #408]	; (800cc48 <UART_SetConfig+0xc34>)
 800caae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cab0:	e009      	b.n	800cac6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cab8:	e005      	b.n	800cac6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800caba:	2300      	movs	r3, #0
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 80ea 	beq.w	800cca2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad2:	4a5a      	ldr	r2, [pc, #360]	; (800cc3c <UART_SetConfig+0xc28>)
 800cad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cad8:	461a      	mov	r2, r3
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cae0:	005a      	lsls	r2, r3, #1
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	085b      	lsrs	r3, r3, #1
 800cae8:	441a      	add	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	2b0f      	cmp	r3, #15
 800cafa:	d916      	bls.n	800cb2a <UART_SetConfig+0xb16>
 800cafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb02:	d212      	bcs.n	800cb2a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	f023 030f 	bic.w	r3, r3, #15
 800cb0c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	085b      	lsrs	r3, r3, #1
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	f003 0307 	and.w	r3, r3, #7
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb26:	60da      	str	r2, [r3, #12]
 800cb28:	e0bb      	b.n	800cca2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cb30:	e0b7      	b.n	800cca2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb36:	2b20      	cmp	r3, #32
 800cb38:	dc4a      	bgt.n	800cbd0 <UART_SetConfig+0xbbc>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f2c0 8086 	blt.w	800cc4c <UART_SetConfig+0xc38>
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	f200 8083 	bhi.w	800cc4c <UART_SetConfig+0xc38>
 800cb46:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <UART_SetConfig+0xb38>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cbd7 	.word	0x0800cbd7
 800cb50:	0800cbdf 	.word	0x0800cbdf
 800cb54:	0800cc4d 	.word	0x0800cc4d
 800cb58:	0800cc4d 	.word	0x0800cc4d
 800cb5c:	0800cbe7 	.word	0x0800cbe7
 800cb60:	0800cc4d 	.word	0x0800cc4d
 800cb64:	0800cc4d 	.word	0x0800cc4d
 800cb68:	0800cc4d 	.word	0x0800cc4d
 800cb6c:	0800cbf7 	.word	0x0800cbf7
 800cb70:	0800cc4d 	.word	0x0800cc4d
 800cb74:	0800cc4d 	.word	0x0800cc4d
 800cb78:	0800cc4d 	.word	0x0800cc4d
 800cb7c:	0800cc4d 	.word	0x0800cc4d
 800cb80:	0800cc4d 	.word	0x0800cc4d
 800cb84:	0800cc4d 	.word	0x0800cc4d
 800cb88:	0800cc4d 	.word	0x0800cc4d
 800cb8c:	0800cc07 	.word	0x0800cc07
 800cb90:	0800cc4d 	.word	0x0800cc4d
 800cb94:	0800cc4d 	.word	0x0800cc4d
 800cb98:	0800cc4d 	.word	0x0800cc4d
 800cb9c:	0800cc4d 	.word	0x0800cc4d
 800cba0:	0800cc4d 	.word	0x0800cc4d
 800cba4:	0800cc4d 	.word	0x0800cc4d
 800cba8:	0800cc4d 	.word	0x0800cc4d
 800cbac:	0800cc4d 	.word	0x0800cc4d
 800cbb0:	0800cc4d 	.word	0x0800cc4d
 800cbb4:	0800cc4d 	.word	0x0800cc4d
 800cbb8:	0800cc4d 	.word	0x0800cc4d
 800cbbc:	0800cc4d 	.word	0x0800cc4d
 800cbc0:	0800cc4d 	.word	0x0800cc4d
 800cbc4:	0800cc4d 	.word	0x0800cc4d
 800cbc8:	0800cc4d 	.word	0x0800cc4d
 800cbcc:	0800cc2d 	.word	0x0800cc2d
 800cbd0:	2b40      	cmp	r3, #64	; 0x40
 800cbd2:	d02e      	beq.n	800cc32 <UART_SetConfig+0xc1e>
 800cbd4:	e03a      	b.n	800cc4c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbd6:	f7fb f993 	bl	8007f00 <HAL_RCC_GetPCLK1Freq>
 800cbda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cbdc:	e03c      	b.n	800cc58 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbde:	f7fb f9a5 	bl	8007f2c <HAL_RCC_GetPCLK2Freq>
 800cbe2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cbe4:	e038      	b.n	800cc58 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbe6:	f107 0314 	add.w	r3, r7, #20
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fc fce8 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cbf4:	e030      	b.n	800cc58 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf6:	f107 0308 	add.w	r3, r7, #8
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fc fe34 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc04:	e028      	b.n	800cc58 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc06:	4b0e      	ldr	r3, [pc, #56]	; (800cc40 <UART_SetConfig+0xc2c>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d009      	beq.n	800cc26 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc12:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <UART_SetConfig+0xc2c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	08db      	lsrs	r3, r3, #3
 800cc18:	f003 0303 	and.w	r3, r3, #3
 800cc1c:	4a09      	ldr	r2, [pc, #36]	; (800cc44 <UART_SetConfig+0xc30>)
 800cc1e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc24:	e018      	b.n	800cc58 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800cc26:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <UART_SetConfig+0xc30>)
 800cc28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc2a:	e015      	b.n	800cc58 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <UART_SetConfig+0xc34>)
 800cc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc30:	e012      	b.n	800cc58 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc38:	e00e      	b.n	800cc58 <UART_SetConfig+0xc44>
 800cc3a:	bf00      	nop
 800cc3c:	0801014c 	.word	0x0801014c
 800cc40:	58024400 	.word	0x58024400
 800cc44:	03d09000 	.word	0x03d09000
 800cc48:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cc56:	bf00      	nop
    }

    if (pclk != 0U)
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d021      	beq.n	800cca2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc62:	4a1a      	ldr	r2, [pc, #104]	; (800cccc <UART_SetConfig+0xcb8>)
 800cc64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	085b      	lsrs	r3, r3, #1
 800cc76:	441a      	add	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc86:	2b0f      	cmp	r3, #15
 800cc88:	d908      	bls.n	800cc9c <UART_SetConfig+0xc88>
 800cc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc90:	d204      	bcs.n	800cc9c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc98:	60da      	str	r2, [r3, #12]
 800cc9a:	e002      	b.n	800cca2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ccbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3738      	adds	r7, #56	; 0x38
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bdb0      	pop	{r4, r5, r7, pc}
 800ccca:	bf00      	nop
 800cccc:	0801014c 	.word	0x0801014c

0800ccd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00a      	beq.n	800ccfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	430a      	orrs	r2, r1
 800ccf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfe:	f003 0302 	and.w	r3, r3, #2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00a      	beq.n	800cd1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd20:	f003 0304 	and.w	r3, r3, #4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00a      	beq.n	800cd3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	430a      	orrs	r2, r1
 800cd3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	f003 0308 	and.w	r3, r3, #8
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00a      	beq.n	800cd60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	430a      	orrs	r2, r1
 800cd5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd64:	f003 0310 	and.w	r3, r3, #16
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00a      	beq.n	800cd82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd86:	f003 0320 	and.w	r3, r3, #32
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00a      	beq.n	800cda4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	430a      	orrs	r2, r1
 800cda2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d01a      	beq.n	800cde6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	430a      	orrs	r2, r1
 800cdc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdce:	d10a      	bne.n	800cde6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	430a      	orrs	r2, r1
 800cde4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00a      	beq.n	800ce08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	430a      	orrs	r2, r1
 800ce06:	605a      	str	r2, [r3, #4]
  }
}
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af02      	add	r7, sp, #8
 800ce1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce24:	f7f5 ff9e 	bl	8002d64 <HAL_GetTick>
 800ce28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 0308 	and.w	r3, r3, #8
 800ce34:	2b08      	cmp	r3, #8
 800ce36:	d10e      	bne.n	800ce56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f82f 	bl	800ceaa <UART_WaitOnFlagUntilTimeout>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e025      	b.n	800cea2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f003 0304 	and.w	r3, r3, #4
 800ce60:	2b04      	cmp	r3, #4
 800ce62:	d10e      	bne.n	800ce82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f819 	bl	800ceaa <UART_WaitOnFlagUntilTimeout>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d001      	beq.n	800ce82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e00f      	b.n	800cea2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2220      	movs	r2, #32
 800ce86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b084      	sub	sp, #16
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	60f8      	str	r0, [r7, #12]
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	603b      	str	r3, [r7, #0]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ceba:	e062      	b.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec2:	d05e      	beq.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cec4:	f7f5 ff4e 	bl	8002d64 <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d302      	bcc.n	800ceda <UART_WaitOnFlagUntilTimeout+0x30>
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d11d      	bne.n	800cf16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cee8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689a      	ldr	r2, [r3, #8]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f022 0201 	bic.w	r2, r2, #1
 800cef8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2220      	movs	r2, #32
 800cefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2220      	movs	r2, #32
 800cf06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e045      	b.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0304 	and.w	r3, r3, #4
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d02e      	beq.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	69db      	ldr	r3, [r3, #28]
 800cf2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf32:	d126      	bne.n	800cf82 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cf4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689a      	ldr	r2, [r3, #8]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f022 0201 	bic.w	r2, r2, #1
 800cf5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2220      	movs	r2, #32
 800cf62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2220      	movs	r2, #32
 800cf6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2220      	movs	r2, #32
 800cf72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	e00f      	b.n	800cfa2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	69da      	ldr	r2, [r3, #28]
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	bf0c      	ite	eq
 800cf92:	2301      	moveq	r3, #1
 800cf94:	2300      	movne	r3, #0
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	461a      	mov	r2, r3
 800cf9a:	79fb      	ldrb	r3, [r7, #7]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d08d      	beq.n	800cebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
	...

0800cfac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cfc2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6899      	ldr	r1, [r3, #8]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b0f      	ldr	r3, [pc, #60]	; (800d00c <UART_EndRxTransfer+0x60>)
 800cfd0:	400b      	ands	r3, r1
 800cfd2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d107      	bne.n	800cfec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f022 0210 	bic.w	r2, r2, #16
 800cfea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2220      	movs	r2, #32
 800cff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	effffffe 	.word	0xeffffffe

0800d010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7fe ffda 	bl	800bfe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d034:	bf00      	nop
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d052:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2220      	movs	r2, #32
 800d058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7fe ffb6 	bl	800bfd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d08c:	bf00      	nop
 800d08e:	370c      	adds	r7, #12
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d0a0:	bf00      	nop
 800d0a2:	370c      	adds	r7, #12
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d101      	bne.n	800d0c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0be:	2302      	movs	r3, #2
 800d0c0:	e027      	b.n	800d112 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2224      	movs	r2, #36	; 0x24
 800d0ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f022 0201 	bic.w	r2, r2, #1
 800d0e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2220      	movs	r2, #32
 800d104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3714      	adds	r7, #20
 800d116:	46bd      	mov	sp, r7
 800d118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11c:	4770      	bx	lr

0800d11e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d101      	bne.n	800d136 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d132:	2302      	movs	r3, #2
 800d134:	e02d      	b.n	800d192 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2201      	movs	r2, #1
 800d13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2224      	movs	r2, #36	; 0x24
 800d142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f022 0201 	bic.w	r2, r2, #1
 800d15c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	430a      	orrs	r2, r1
 800d170:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f850 	bl	800d218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2220      	movs	r2, #32
 800d184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d101      	bne.n	800d1b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	e02d      	b.n	800d20e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2224      	movs	r2, #36	; 0x24
 800d1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f022 0201 	bic.w	r2, r2, #1
 800d1d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f812 	bl	800d218 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2220      	movs	r2, #32
 800d200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2200      	movs	r2, #0
 800d208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
	...

0800d218 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d224:	2b00      	cmp	r3, #0
 800d226:	d108      	bne.n	800d23a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2201      	movs	r2, #1
 800d234:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d238:	e031      	b.n	800d29e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d23a:	2310      	movs	r3, #16
 800d23c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d23e:	2310      	movs	r3, #16
 800d240:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	0e5b      	lsrs	r3, r3, #25
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	f003 0307 	and.w	r3, r3, #7
 800d250:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	0f5b      	lsrs	r3, r3, #29
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	f003 0307 	and.w	r3, r3, #7
 800d260:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d262:	7bbb      	ldrb	r3, [r7, #14]
 800d264:	7b3a      	ldrb	r2, [r7, #12]
 800d266:	4911      	ldr	r1, [pc, #68]	; (800d2ac <UARTEx_SetNbDataToProcess+0x94>)
 800d268:	5c8a      	ldrb	r2, [r1, r2]
 800d26a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d26e:	7b3a      	ldrb	r2, [r7, #12]
 800d270:	490f      	ldr	r1, [pc, #60]	; (800d2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d272:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d274:	fb93 f3f2 	sdiv	r3, r3, r2
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	7b7a      	ldrb	r2, [r7, #13]
 800d284:	4909      	ldr	r1, [pc, #36]	; (800d2ac <UARTEx_SetNbDataToProcess+0x94>)
 800d286:	5c8a      	ldrb	r2, [r1, r2]
 800d288:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d28c:	7b7a      	ldrb	r2, [r7, #13]
 800d28e:	4908      	ldr	r1, [pc, #32]	; (800d2b0 <UARTEx_SetNbDataToProcess+0x98>)
 800d290:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d292:	fb93 f3f2 	sdiv	r3, r3, r2
 800d296:	b29a      	uxth	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	08010164 	.word	0x08010164
 800d2b0:	0801016c 	.word	0x0801016c
 800d2b4:	00000000 	.word	0x00000000

0800d2b8 <exp>:
 800d2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2bc:	b087      	sub	sp, #28
 800d2be:	ed8d 0b00 	vstr	d0, [sp]
 800d2c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2c6:	f46f 7372 	mvn.w	r3, #968	; 0x3c8
 800d2ca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d2ce:	18f7      	adds	r7, r6, r3
 800d2d0:	2f3e      	cmp	r7, #62	; 0x3e
 800d2d2:	d929      	bls.n	800d328 <exp+0x70>
 800d2d4:	2f00      	cmp	r7, #0
 800d2d6:	da08      	bge.n	800d2ea <exp+0x32>
 800d2d8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d2dc:	ed9d 7b00 	vldr	d7, [sp]
 800d2e0:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d2e4:	b007      	add	sp, #28
 800d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ea:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800d2ee:	d91a      	bls.n	800d326 <exp+0x6e>
 800d2f0:	4b65      	ldr	r3, [pc, #404]	; (800d488 <exp+0x1d0>)
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	4299      	cmp	r1, r3
 800d2f6:	bf08      	it	eq
 800d2f8:	4290      	cmpeq	r0, r2
 800d2fa:	f000 80b6 	beq.w	800d46a <exp+0x1b2>
 800d2fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800d302:	429e      	cmp	r6, r3
 800d304:	d0e8      	beq.n	800d2d8 <exp+0x20>
 800d306:	2800      	cmp	r0, #0
 800d308:	f171 0300 	sbcs.w	r3, r1, #0
 800d30c:	f04f 0000 	mov.w	r0, #0
 800d310:	da04      	bge.n	800d31c <exp+0x64>
 800d312:	b007      	add	sp, #28
 800d314:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	f000 b8da 	b.w	800d4d0 <__math_uflow>
 800d31c:	b007      	add	sp, #28
 800d31e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d322:	f000 b8dd 	b.w	800d4e0 <__math_oflow>
 800d326:	2600      	movs	r6, #0
 800d328:	4858      	ldr	r0, [pc, #352]	; (800d48c <exp+0x1d4>)
 800d32a:	ed9d 3b00 	vldr	d3, [sp]
 800d32e:	ed90 6b02 	vldr	d6, [r0, #8]
 800d332:	ed90 7b00 	vldr	d7, [r0]
 800d336:	eeb0 4b46 	vmov.f64	d4, d6
 800d33a:	eea7 4b03 	vfma.f64	d4, d7, d3
 800d33e:	ee34 7b46 	vsub.f64	d7, d4, d6
 800d342:	ed90 6b04 	vldr	d6, [r0, #16]
 800d346:	ee14 ca10 	vmov	ip, s8
 800d34a:	eeb0 4b43 	vmov.f64	d4, d3
 800d34e:	f00c 017f 	and.w	r1, ip, #127	; 0x7f
 800d352:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d356:	eeb0 6b44 	vmov.f64	d6, d4
 800d35a:	ed90 4b06 	vldr	d4, [r0, #24]
 800d35e:	1849      	adds	r1, r1, r1
 800d360:	eb00 09c1 	add.w	r9, r0, r1, lsl #3
 800d364:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800d368:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d36c:	ed90 3b0a 	vldr	d3, [r0, #40]	; 0x28
 800d370:	ee26 2b06 	vmul.f64	d2, d6, d6
 800d374:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800d378:	ed90 4b08 	vldr	d4, [r0, #32]
 800d37c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d380:	e9d9 891e 	ldrd	r8, r9, [r9, #120]	; 0x78
 800d384:	eea3 4b06 	vfma.f64	d4, d3, d6
 800d388:	eea4 7b02 	vfma.f64	d7, d4, d2
 800d38c:	ed90 3b0e 	vldr	d3, [r0, #56]	; 0x38
 800d390:	ee22 2b02 	vmul.f64	d2, d2, d2
 800d394:	ed90 4b0c 	vldr	d4, [r0, #48]	; 0x30
 800d398:	2700      	movs	r7, #0
 800d39a:	ea4f 3e4c 	mov.w	lr, ip, lsl #13
 800d39e:	eb17 0a08 	adds.w	sl, r7, r8
 800d3a2:	eea3 4b06 	vfma.f64	d4, d3, d6
 800d3a6:	eb4e 0b09 	adc.w	fp, lr, r9
 800d3aa:	eea2 7b04 	vfma.f64	d7, d2, d4
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	d156      	bne.n	800d460 <exp+0x1a8>
 800d3b2:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	ea50 0301 	orrs.w	r3, r0, r1
 800d3bc:	d113      	bne.n	800d3e6 <exp+0x12e>
 800d3be:	4a34      	ldr	r2, [pc, #208]	; (800d490 <exp+0x1d8>)
 800d3c0:	eb1a 0407 	adds.w	r4, sl, r7
 800d3c4:	eb4b 0502 	adc.w	r5, fp, r2
 800d3c8:	ec45 4b10 	vmov	d0, r4, r5
 800d3cc:	ec45 4b16 	vmov	d6, r4, r5
 800d3d0:	eea7 0b06 	vfma.f64	d0, d7, d6
 800d3d4:	ed9f 7b26 	vldr	d7, [pc, #152]	; 800d470 <exp+0x1b8>
 800d3d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d3dc:	b007      	add	sp, #28
 800d3de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e2:	f000 b891 	b.w	800d508 <__math_check_oflow>
 800d3e6:	4a2b      	ldr	r2, [pc, #172]	; (800d494 <exp+0x1dc>)
 800d3e8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	eb1a 0301 	adds.w	r3, sl, r1
 800d3f2:	ee05 3a10 	vmov	s10, r3
 800d3f6:	eb4b 0302 	adc.w	r3, fp, r2
 800d3fa:	ee05 3a90 	vmov	s11, r3
 800d3fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d402:	ee35 6b07 	vadd.f64	d6, d5, d7
 800d406:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800d478 <exp+0x1c0>
 800d412:	d51e      	bpl.n	800d452 <exp+0x19a>
 800d414:	ee35 5b46 	vsub.f64	d5, d5, d6
 800d418:	ee36 3b04 	vadd.f64	d3, d6, d4
 800d41c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d420:	ee34 5b43 	vsub.f64	d5, d4, d3
 800d424:	ee35 6b06 	vadd.f64	d6, d5, d6
 800d428:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d42c:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d430:	ee36 6b44 	vsub.f64	d6, d6, d4
 800d434:	eeb5 6b40 	vcmp.f64	d6, #0.0
 800d438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d43c:	d101      	bne.n	800d442 <exp+0x18a>
 800d43e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 800d480 <exp+0x1c8>
 800d442:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d446:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d44a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d44e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d452:	ee26 0b00 	vmul.f64	d0, d6, d0
 800d456:	b007      	add	sp, #28
 800d458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d45c:	f000 b848 	b.w	800d4f0 <__math_check_uflow>
 800d460:	ec4b ab10 	vmov	d0, sl, fp
 800d464:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d468:	e73c      	b.n	800d2e4 <exp+0x2c>
 800d46a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800d480 <exp+0x1c8>
 800d46e:	e739      	b.n	800d2e4 <exp+0x2c>
 800d470:	00000000 	.word	0x00000000
 800d474:	7f000000 	.word	0x7f000000
 800d478:	00000000 	.word	0x00000000
 800d47c:	00100000 	.word	0x00100000
	...
 800d488:	fff00000 	.word	0xfff00000
 800d48c:	08010178 	.word	0x08010178
 800d490:	c0f00000 	.word	0xc0f00000
 800d494:	3fe00000 	.word	0x3fe00000

0800d498 <with_errno>:
 800d498:	b513      	push	{r0, r1, r4, lr}
 800d49a:	4604      	mov	r4, r0
 800d49c:	ed8d 0b00 	vstr	d0, [sp]
 800d4a0:	f000 f84e 	bl	800d540 <__errno>
 800d4a4:	ed9d 0b00 	vldr	d0, [sp]
 800d4a8:	6004      	str	r4, [r0, #0]
 800d4aa:	b002      	add	sp, #8
 800d4ac:	bd10      	pop	{r4, pc}

0800d4ae <xflow>:
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	b158      	cbz	r0, 800d4ca <xflow+0x1c>
 800d4b2:	eeb1 7b40 	vneg.f64	d7, d0
 800d4b6:	ed8d 7b00 	vstr	d7, [sp]
 800d4ba:	ed9d 7b00 	vldr	d7, [sp]
 800d4be:	2022      	movs	r0, #34	; 0x22
 800d4c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d4c4:	b002      	add	sp, #8
 800d4c6:	f7ff bfe7 	b.w	800d498 <with_errno>
 800d4ca:	eeb0 7b40 	vmov.f64	d7, d0
 800d4ce:	e7f2      	b.n	800d4b6 <xflow+0x8>

0800d4d0 <__math_uflow>:
 800d4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d4d8 <__math_uflow+0x8>
 800d4d4:	f7ff bfeb 	b.w	800d4ae <xflow>
 800d4d8:	00000000 	.word	0x00000000
 800d4dc:	10000000 	.word	0x10000000

0800d4e0 <__math_oflow>:
 800d4e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d4e8 <__math_oflow+0x8>
 800d4e4:	f7ff bfe3 	b.w	800d4ae <xflow>
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	70000000 	.word	0x70000000

0800d4f0 <__math_check_uflow>:
 800d4f0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f8:	d102      	bne.n	800d500 <__math_check_uflow+0x10>
 800d4fa:	2022      	movs	r0, #34	; 0x22
 800d4fc:	f7ff bfcc 	b.w	800d498 <with_errno>
 800d500:	4770      	bx	lr
 800d502:	0000      	movs	r0, r0
 800d504:	0000      	movs	r0, r0
	...

0800d508 <__math_check_oflow>:
 800d508:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d528 <__math_check_oflow+0x20>
 800d50c:	eeb0 7bc0 	vabs.f64	d7, d0
 800d510:	eeb4 7b46 	vcmp.f64	d7, d6
 800d514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d518:	dd02      	ble.n	800d520 <__math_check_oflow+0x18>
 800d51a:	2022      	movs	r0, #34	; 0x22
 800d51c:	f7ff bfbc 	b.w	800d498 <with_errno>
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	f3af 8000 	nop.w
 800d528:	ffffffff 	.word	0xffffffff
 800d52c:	7fefffff 	.word	0x7fefffff

0800d530 <calloc>:
 800d530:	4b02      	ldr	r3, [pc, #8]	; (800d53c <calloc+0xc>)
 800d532:	460a      	mov	r2, r1
 800d534:	4601      	mov	r1, r0
 800d536:	6818      	ldr	r0, [r3, #0]
 800d538:	f000 b844 	b.w	800d5c4 <_calloc_r>
 800d53c:	24000af4 	.word	0x24000af4

0800d540 <__errno>:
 800d540:	4b01      	ldr	r3, [pc, #4]	; (800d548 <__errno+0x8>)
 800d542:	6818      	ldr	r0, [r3, #0]
 800d544:	4770      	bx	lr
 800d546:	bf00      	nop
 800d548:	24000af4 	.word	0x24000af4

0800d54c <__libc_init_array>:
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	4d0d      	ldr	r5, [pc, #52]	; (800d584 <__libc_init_array+0x38>)
 800d550:	4c0d      	ldr	r4, [pc, #52]	; (800d588 <__libc_init_array+0x3c>)
 800d552:	1b64      	subs	r4, r4, r5
 800d554:	10a4      	asrs	r4, r4, #2
 800d556:	2600      	movs	r6, #0
 800d558:	42a6      	cmp	r6, r4
 800d55a:	d109      	bne.n	800d570 <__libc_init_array+0x24>
 800d55c:	4d0b      	ldr	r5, [pc, #44]	; (800d58c <__libc_init_array+0x40>)
 800d55e:	4c0c      	ldr	r4, [pc, #48]	; (800d590 <__libc_init_array+0x44>)
 800d560:	f002 fcf4 	bl	800ff4c <_init>
 800d564:	1b64      	subs	r4, r4, r5
 800d566:	10a4      	asrs	r4, r4, #2
 800d568:	2600      	movs	r6, #0
 800d56a:	42a6      	cmp	r6, r4
 800d56c:	d105      	bne.n	800d57a <__libc_init_array+0x2e>
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	f855 3b04 	ldr.w	r3, [r5], #4
 800d574:	4798      	blx	r3
 800d576:	3601      	adds	r6, #1
 800d578:	e7ee      	b.n	800d558 <__libc_init_array+0xc>
 800d57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d57e:	4798      	blx	r3
 800d580:	3601      	adds	r6, #1
 800d582:	e7f2      	b.n	800d56a <__libc_init_array+0x1e>
 800d584:	08010dd4 	.word	0x08010dd4
 800d588:	08010dd4 	.word	0x08010dd4
 800d58c:	08010dd4 	.word	0x08010dd4
 800d590:	08010dd8 	.word	0x08010dd8

0800d594 <malloc>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <malloc+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f000 b873 	b.w	800d684 <_malloc_r>
 800d59e:	bf00      	nop
 800d5a0:	24000af4 	.word	0x24000af4

0800d5a4 <free>:
 800d5a4:	4b02      	ldr	r3, [pc, #8]	; (800d5b0 <free+0xc>)
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	6818      	ldr	r0, [r3, #0]
 800d5aa:	f000 b81b 	b.w	800d5e4 <_free_r>
 800d5ae:	bf00      	nop
 800d5b0:	24000af4 	.word	0x24000af4

0800d5b4 <memset>:
 800d5b4:	4402      	add	r2, r0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d100      	bne.n	800d5be <memset+0xa>
 800d5bc:	4770      	bx	lr
 800d5be:	f803 1b01 	strb.w	r1, [r3], #1
 800d5c2:	e7f9      	b.n	800d5b8 <memset+0x4>

0800d5c4 <_calloc_r>:
 800d5c4:	b513      	push	{r0, r1, r4, lr}
 800d5c6:	434a      	muls	r2, r1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	9201      	str	r2, [sp, #4]
 800d5cc:	f000 f85a 	bl	800d684 <_malloc_r>
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	b118      	cbz	r0, 800d5dc <_calloc_r+0x18>
 800d5d4:	9a01      	ldr	r2, [sp, #4]
 800d5d6:	2100      	movs	r1, #0
 800d5d8:	f7ff ffec 	bl	800d5b4 <memset>
 800d5dc:	4620      	mov	r0, r4
 800d5de:	b002      	add	sp, #8
 800d5e0:	bd10      	pop	{r4, pc}
	...

0800d5e4 <_free_r>:
 800d5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d048      	beq.n	800d67c <_free_r+0x98>
 800d5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5ee:	9001      	str	r0, [sp, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d5f6:	bfb8      	it	lt
 800d5f8:	18e4      	addlt	r4, r4, r3
 800d5fa:	f001 fe7d 	bl	800f2f8 <__malloc_lock>
 800d5fe:	4a20      	ldr	r2, [pc, #128]	; (800d680 <_free_r+0x9c>)
 800d600:	9801      	ldr	r0, [sp, #4]
 800d602:	6813      	ldr	r3, [r2, #0]
 800d604:	4615      	mov	r5, r2
 800d606:	b933      	cbnz	r3, 800d616 <_free_r+0x32>
 800d608:	6063      	str	r3, [r4, #4]
 800d60a:	6014      	str	r4, [r2, #0]
 800d60c:	b003      	add	sp, #12
 800d60e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d612:	f001 be77 	b.w	800f304 <__malloc_unlock>
 800d616:	42a3      	cmp	r3, r4
 800d618:	d90b      	bls.n	800d632 <_free_r+0x4e>
 800d61a:	6821      	ldr	r1, [r4, #0]
 800d61c:	1862      	adds	r2, r4, r1
 800d61e:	4293      	cmp	r3, r2
 800d620:	bf04      	itt	eq
 800d622:	681a      	ldreq	r2, [r3, #0]
 800d624:	685b      	ldreq	r3, [r3, #4]
 800d626:	6063      	str	r3, [r4, #4]
 800d628:	bf04      	itt	eq
 800d62a:	1852      	addeq	r2, r2, r1
 800d62c:	6022      	streq	r2, [r4, #0]
 800d62e:	602c      	str	r4, [r5, #0]
 800d630:	e7ec      	b.n	800d60c <_free_r+0x28>
 800d632:	461a      	mov	r2, r3
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	b10b      	cbz	r3, 800d63c <_free_r+0x58>
 800d638:	42a3      	cmp	r3, r4
 800d63a:	d9fa      	bls.n	800d632 <_free_r+0x4e>
 800d63c:	6811      	ldr	r1, [r2, #0]
 800d63e:	1855      	adds	r5, r2, r1
 800d640:	42a5      	cmp	r5, r4
 800d642:	d10b      	bne.n	800d65c <_free_r+0x78>
 800d644:	6824      	ldr	r4, [r4, #0]
 800d646:	4421      	add	r1, r4
 800d648:	1854      	adds	r4, r2, r1
 800d64a:	42a3      	cmp	r3, r4
 800d64c:	6011      	str	r1, [r2, #0]
 800d64e:	d1dd      	bne.n	800d60c <_free_r+0x28>
 800d650:	681c      	ldr	r4, [r3, #0]
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	6053      	str	r3, [r2, #4]
 800d656:	4421      	add	r1, r4
 800d658:	6011      	str	r1, [r2, #0]
 800d65a:	e7d7      	b.n	800d60c <_free_r+0x28>
 800d65c:	d902      	bls.n	800d664 <_free_r+0x80>
 800d65e:	230c      	movs	r3, #12
 800d660:	6003      	str	r3, [r0, #0]
 800d662:	e7d3      	b.n	800d60c <_free_r+0x28>
 800d664:	6825      	ldr	r5, [r4, #0]
 800d666:	1961      	adds	r1, r4, r5
 800d668:	428b      	cmp	r3, r1
 800d66a:	bf04      	itt	eq
 800d66c:	6819      	ldreq	r1, [r3, #0]
 800d66e:	685b      	ldreq	r3, [r3, #4]
 800d670:	6063      	str	r3, [r4, #4]
 800d672:	bf04      	itt	eq
 800d674:	1949      	addeq	r1, r1, r5
 800d676:	6021      	streq	r1, [r4, #0]
 800d678:	6054      	str	r4, [r2, #4]
 800d67a:	e7c7      	b.n	800d60c <_free_r+0x28>
 800d67c:	b003      	add	sp, #12
 800d67e:	bd30      	pop	{r4, r5, pc}
 800d680:	24000d10 	.word	0x24000d10

0800d684 <_malloc_r>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	1ccd      	adds	r5, r1, #3
 800d688:	f025 0503 	bic.w	r5, r5, #3
 800d68c:	3508      	adds	r5, #8
 800d68e:	2d0c      	cmp	r5, #12
 800d690:	bf38      	it	cc
 800d692:	250c      	movcc	r5, #12
 800d694:	2d00      	cmp	r5, #0
 800d696:	4606      	mov	r6, r0
 800d698:	db01      	blt.n	800d69e <_malloc_r+0x1a>
 800d69a:	42a9      	cmp	r1, r5
 800d69c:	d903      	bls.n	800d6a6 <_malloc_r+0x22>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	6033      	str	r3, [r6, #0]
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a6:	f001 fe27 	bl	800f2f8 <__malloc_lock>
 800d6aa:	4921      	ldr	r1, [pc, #132]	; (800d730 <_malloc_r+0xac>)
 800d6ac:	680a      	ldr	r2, [r1, #0]
 800d6ae:	4614      	mov	r4, r2
 800d6b0:	b99c      	cbnz	r4, 800d6da <_malloc_r+0x56>
 800d6b2:	4f20      	ldr	r7, [pc, #128]	; (800d734 <_malloc_r+0xb0>)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	b923      	cbnz	r3, 800d6c2 <_malloc_r+0x3e>
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f000 fd0c 	bl	800e0d8 <_sbrk_r>
 800d6c0:	6038      	str	r0, [r7, #0]
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f000 fd07 	bl	800e0d8 <_sbrk_r>
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	d123      	bne.n	800d716 <_malloc_r+0x92>
 800d6ce:	230c      	movs	r3, #12
 800d6d0:	6033      	str	r3, [r6, #0]
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f001 fe16 	bl	800f304 <__malloc_unlock>
 800d6d8:	e7e3      	b.n	800d6a2 <_malloc_r+0x1e>
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	1b5b      	subs	r3, r3, r5
 800d6de:	d417      	bmi.n	800d710 <_malloc_r+0x8c>
 800d6e0:	2b0b      	cmp	r3, #11
 800d6e2:	d903      	bls.n	800d6ec <_malloc_r+0x68>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	441c      	add	r4, r3
 800d6e8:	6025      	str	r5, [r4, #0]
 800d6ea:	e004      	b.n	800d6f6 <_malloc_r+0x72>
 800d6ec:	6863      	ldr	r3, [r4, #4]
 800d6ee:	42a2      	cmp	r2, r4
 800d6f0:	bf0c      	ite	eq
 800d6f2:	600b      	streq	r3, [r1, #0]
 800d6f4:	6053      	strne	r3, [r2, #4]
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f001 fe04 	bl	800f304 <__malloc_unlock>
 800d6fc:	f104 000b 	add.w	r0, r4, #11
 800d700:	1d23      	adds	r3, r4, #4
 800d702:	f020 0007 	bic.w	r0, r0, #7
 800d706:	1ac2      	subs	r2, r0, r3
 800d708:	d0cc      	beq.n	800d6a4 <_malloc_r+0x20>
 800d70a:	1a1b      	subs	r3, r3, r0
 800d70c:	50a3      	str	r3, [r4, r2]
 800d70e:	e7c9      	b.n	800d6a4 <_malloc_r+0x20>
 800d710:	4622      	mov	r2, r4
 800d712:	6864      	ldr	r4, [r4, #4]
 800d714:	e7cc      	b.n	800d6b0 <_malloc_r+0x2c>
 800d716:	1cc4      	adds	r4, r0, #3
 800d718:	f024 0403 	bic.w	r4, r4, #3
 800d71c:	42a0      	cmp	r0, r4
 800d71e:	d0e3      	beq.n	800d6e8 <_malloc_r+0x64>
 800d720:	1a21      	subs	r1, r4, r0
 800d722:	4630      	mov	r0, r6
 800d724:	f000 fcd8 	bl	800e0d8 <_sbrk_r>
 800d728:	3001      	adds	r0, #1
 800d72a:	d1dd      	bne.n	800d6e8 <_malloc_r+0x64>
 800d72c:	e7cf      	b.n	800d6ce <_malloc_r+0x4a>
 800d72e:	bf00      	nop
 800d730:	24000d10 	.word	0x24000d10
 800d734:	24000d14 	.word	0x24000d14

0800d738 <__cvt>:
 800d738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d73a:	ed2d 8b02 	vpush	{d8}
 800d73e:	eeb0 8b40 	vmov.f64	d8, d0
 800d742:	b085      	sub	sp, #20
 800d744:	4617      	mov	r7, r2
 800d746:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d748:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d74a:	ee18 2a90 	vmov	r2, s17
 800d74e:	f025 0520 	bic.w	r5, r5, #32
 800d752:	2a00      	cmp	r2, #0
 800d754:	bfb6      	itet	lt
 800d756:	222d      	movlt	r2, #45	; 0x2d
 800d758:	2200      	movge	r2, #0
 800d75a:	eeb1 8b40 	vneglt.f64	d8, d0
 800d75e:	2d46      	cmp	r5, #70	; 0x46
 800d760:	460c      	mov	r4, r1
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	d004      	beq.n	800d770 <__cvt+0x38>
 800d766:	2d45      	cmp	r5, #69	; 0x45
 800d768:	d100      	bne.n	800d76c <__cvt+0x34>
 800d76a:	3401      	adds	r4, #1
 800d76c:	2102      	movs	r1, #2
 800d76e:	e000      	b.n	800d772 <__cvt+0x3a>
 800d770:	2103      	movs	r1, #3
 800d772:	ab03      	add	r3, sp, #12
 800d774:	9301      	str	r3, [sp, #4]
 800d776:	ab02      	add	r3, sp, #8
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	4622      	mov	r2, r4
 800d77c:	4633      	mov	r3, r6
 800d77e:	eeb0 0b48 	vmov.f64	d0, d8
 800d782:	f000 fe05 	bl	800e390 <_dtoa_r>
 800d786:	2d47      	cmp	r5, #71	; 0x47
 800d788:	d109      	bne.n	800d79e <__cvt+0x66>
 800d78a:	07fb      	lsls	r3, r7, #31
 800d78c:	d407      	bmi.n	800d79e <__cvt+0x66>
 800d78e:	9b03      	ldr	r3, [sp, #12]
 800d790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d792:	1a1b      	subs	r3, r3, r0
 800d794:	6013      	str	r3, [r2, #0]
 800d796:	b005      	add	sp, #20
 800d798:	ecbd 8b02 	vpop	{d8}
 800d79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d79e:	2d46      	cmp	r5, #70	; 0x46
 800d7a0:	eb00 0204 	add.w	r2, r0, r4
 800d7a4:	d10c      	bne.n	800d7c0 <__cvt+0x88>
 800d7a6:	7803      	ldrb	r3, [r0, #0]
 800d7a8:	2b30      	cmp	r3, #48	; 0x30
 800d7aa:	d107      	bne.n	800d7bc <__cvt+0x84>
 800d7ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	bf1c      	itt	ne
 800d7b6:	f1c4 0401 	rsbne	r4, r4, #1
 800d7ba:	6034      	strne	r4, [r6, #0]
 800d7bc:	6833      	ldr	r3, [r6, #0]
 800d7be:	441a      	add	r2, r3
 800d7c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c8:	bf08      	it	eq
 800d7ca:	9203      	streq	r2, [sp, #12]
 800d7cc:	2130      	movs	r1, #48	; 0x30
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d2dc      	bcs.n	800d78e <__cvt+0x56>
 800d7d4:	1c5c      	adds	r4, r3, #1
 800d7d6:	9403      	str	r4, [sp, #12]
 800d7d8:	7019      	strb	r1, [r3, #0]
 800d7da:	e7f8      	b.n	800d7ce <__cvt+0x96>

0800d7dc <__exponent>:
 800d7dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2900      	cmp	r1, #0
 800d7e2:	bfb8      	it	lt
 800d7e4:	4249      	neglt	r1, r1
 800d7e6:	f803 2b02 	strb.w	r2, [r3], #2
 800d7ea:	bfb4      	ite	lt
 800d7ec:	222d      	movlt	r2, #45	; 0x2d
 800d7ee:	222b      	movge	r2, #43	; 0x2b
 800d7f0:	2909      	cmp	r1, #9
 800d7f2:	7042      	strb	r2, [r0, #1]
 800d7f4:	dd2a      	ble.n	800d84c <__exponent+0x70>
 800d7f6:	f10d 0407 	add.w	r4, sp, #7
 800d7fa:	46a4      	mov	ip, r4
 800d7fc:	270a      	movs	r7, #10
 800d7fe:	46a6      	mov	lr, r4
 800d800:	460a      	mov	r2, r1
 800d802:	fb91 f6f7 	sdiv	r6, r1, r7
 800d806:	fb07 1516 	mls	r5, r7, r6, r1
 800d80a:	3530      	adds	r5, #48	; 0x30
 800d80c:	2a63      	cmp	r2, #99	; 0x63
 800d80e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d812:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d816:	4631      	mov	r1, r6
 800d818:	dcf1      	bgt.n	800d7fe <__exponent+0x22>
 800d81a:	3130      	adds	r1, #48	; 0x30
 800d81c:	f1ae 0502 	sub.w	r5, lr, #2
 800d820:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d824:	1c44      	adds	r4, r0, #1
 800d826:	4629      	mov	r1, r5
 800d828:	4561      	cmp	r1, ip
 800d82a:	d30a      	bcc.n	800d842 <__exponent+0x66>
 800d82c:	f10d 0209 	add.w	r2, sp, #9
 800d830:	eba2 020e 	sub.w	r2, r2, lr
 800d834:	4565      	cmp	r5, ip
 800d836:	bf88      	it	hi
 800d838:	2200      	movhi	r2, #0
 800d83a:	4413      	add	r3, r2
 800d83c:	1a18      	subs	r0, r3, r0
 800d83e:	b003      	add	sp, #12
 800d840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d842:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d846:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d84a:	e7ed      	b.n	800d828 <__exponent+0x4c>
 800d84c:	2330      	movs	r3, #48	; 0x30
 800d84e:	3130      	adds	r1, #48	; 0x30
 800d850:	7083      	strb	r3, [r0, #2]
 800d852:	70c1      	strb	r1, [r0, #3]
 800d854:	1d03      	adds	r3, r0, #4
 800d856:	e7f1      	b.n	800d83c <__exponent+0x60>

0800d858 <_printf_float>:
 800d858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d85c:	b08b      	sub	sp, #44	; 0x2c
 800d85e:	460c      	mov	r4, r1
 800d860:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d864:	4616      	mov	r6, r2
 800d866:	461f      	mov	r7, r3
 800d868:	4605      	mov	r5, r0
 800d86a:	f001 fccb 	bl	800f204 <_localeconv_r>
 800d86e:	f8d0 b000 	ldr.w	fp, [r0]
 800d872:	4658      	mov	r0, fp
 800d874:	f7f2 fd4c 	bl	8000310 <strlen>
 800d878:	2300      	movs	r3, #0
 800d87a:	9308      	str	r3, [sp, #32]
 800d87c:	f8d8 3000 	ldr.w	r3, [r8]
 800d880:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d884:	6822      	ldr	r2, [r4, #0]
 800d886:	3307      	adds	r3, #7
 800d888:	f023 0307 	bic.w	r3, r3, #7
 800d88c:	f103 0108 	add.w	r1, r3, #8
 800d890:	f8c8 1000 	str.w	r1, [r8]
 800d894:	4682      	mov	sl, r0
 800d896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d89a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d89e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800db00 <_printf_float+0x2a8>
 800d8a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d8a6:	eeb0 6bc0 	vabs.f64	d6, d0
 800d8aa:	eeb4 6b47 	vcmp.f64	d6, d7
 800d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b2:	dd24      	ble.n	800d8fe <_printf_float+0xa6>
 800d8b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8bc:	d502      	bpl.n	800d8c4 <_printf_float+0x6c>
 800d8be:	232d      	movs	r3, #45	; 0x2d
 800d8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c4:	4b90      	ldr	r3, [pc, #576]	; (800db08 <_printf_float+0x2b0>)
 800d8c6:	4891      	ldr	r0, [pc, #580]	; (800db0c <_printf_float+0x2b4>)
 800d8c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d8cc:	bf94      	ite	ls
 800d8ce:	4698      	movls	r8, r3
 800d8d0:	4680      	movhi	r8, r0
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	f022 0204 	bic.w	r2, r2, #4
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6022      	str	r2, [r4, #0]
 800d8de:	9304      	str	r3, [sp, #16]
 800d8e0:	9700      	str	r7, [sp, #0]
 800d8e2:	4633      	mov	r3, r6
 800d8e4:	aa09      	add	r2, sp, #36	; 0x24
 800d8e6:	4621      	mov	r1, r4
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	f000 f9d3 	bl	800dc94 <_printf_common>
 800d8ee:	3001      	adds	r0, #1
 800d8f0:	f040 808a 	bne.w	800da08 <_printf_float+0x1b0>
 800d8f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8f8:	b00b      	add	sp, #44	; 0x2c
 800d8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8fe:	eeb4 0b40 	vcmp.f64	d0, d0
 800d902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d906:	d709      	bvc.n	800d91c <_printf_float+0xc4>
 800d908:	ee10 3a90 	vmov	r3, s1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	bfbc      	itt	lt
 800d910:	232d      	movlt	r3, #45	; 0x2d
 800d912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d916:	487e      	ldr	r0, [pc, #504]	; (800db10 <_printf_float+0x2b8>)
 800d918:	4b7e      	ldr	r3, [pc, #504]	; (800db14 <_printf_float+0x2bc>)
 800d91a:	e7d5      	b.n	800d8c8 <_printf_float+0x70>
 800d91c:	6863      	ldr	r3, [r4, #4]
 800d91e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d922:	9104      	str	r1, [sp, #16]
 800d924:	1c59      	adds	r1, r3, #1
 800d926:	d13c      	bne.n	800d9a2 <_printf_float+0x14a>
 800d928:	2306      	movs	r3, #6
 800d92a:	6063      	str	r3, [r4, #4]
 800d92c:	2300      	movs	r3, #0
 800d92e:	9303      	str	r3, [sp, #12]
 800d930:	ab08      	add	r3, sp, #32
 800d932:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d93a:	ab07      	add	r3, sp, #28
 800d93c:	6861      	ldr	r1, [r4, #4]
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	6022      	str	r2, [r4, #0]
 800d942:	f10d 031b 	add.w	r3, sp, #27
 800d946:	4628      	mov	r0, r5
 800d948:	f7ff fef6 	bl	800d738 <__cvt>
 800d94c:	9b04      	ldr	r3, [sp, #16]
 800d94e:	9907      	ldr	r1, [sp, #28]
 800d950:	2b47      	cmp	r3, #71	; 0x47
 800d952:	4680      	mov	r8, r0
 800d954:	d108      	bne.n	800d968 <_printf_float+0x110>
 800d956:	1cc8      	adds	r0, r1, #3
 800d958:	db02      	blt.n	800d960 <_printf_float+0x108>
 800d95a:	6863      	ldr	r3, [r4, #4]
 800d95c:	4299      	cmp	r1, r3
 800d95e:	dd41      	ble.n	800d9e4 <_printf_float+0x18c>
 800d960:	f1a9 0902 	sub.w	r9, r9, #2
 800d964:	fa5f f989 	uxtb.w	r9, r9
 800d968:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d96c:	d820      	bhi.n	800d9b0 <_printf_float+0x158>
 800d96e:	3901      	subs	r1, #1
 800d970:	464a      	mov	r2, r9
 800d972:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d976:	9107      	str	r1, [sp, #28]
 800d978:	f7ff ff30 	bl	800d7dc <__exponent>
 800d97c:	9a08      	ldr	r2, [sp, #32]
 800d97e:	9004      	str	r0, [sp, #16]
 800d980:	1813      	adds	r3, r2, r0
 800d982:	2a01      	cmp	r2, #1
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	dc02      	bgt.n	800d98e <_printf_float+0x136>
 800d988:	6822      	ldr	r2, [r4, #0]
 800d98a:	07d2      	lsls	r2, r2, #31
 800d98c:	d501      	bpl.n	800d992 <_printf_float+0x13a>
 800d98e:	3301      	adds	r3, #1
 800d990:	6123      	str	r3, [r4, #16]
 800d992:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d0a2      	beq.n	800d8e0 <_printf_float+0x88>
 800d99a:	232d      	movs	r3, #45	; 0x2d
 800d99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9a0:	e79e      	b.n	800d8e0 <_printf_float+0x88>
 800d9a2:	9904      	ldr	r1, [sp, #16]
 800d9a4:	2947      	cmp	r1, #71	; 0x47
 800d9a6:	d1c1      	bne.n	800d92c <_printf_float+0xd4>
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1bf      	bne.n	800d92c <_printf_float+0xd4>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e7bc      	b.n	800d92a <_printf_float+0xd2>
 800d9b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d9b4:	d118      	bne.n	800d9e8 <_printf_float+0x190>
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	6863      	ldr	r3, [r4, #4]
 800d9ba:	dd0b      	ble.n	800d9d4 <_printf_float+0x17c>
 800d9bc:	6121      	str	r1, [r4, #16]
 800d9be:	b913      	cbnz	r3, 800d9c6 <_printf_float+0x16e>
 800d9c0:	6822      	ldr	r2, [r4, #0]
 800d9c2:	07d0      	lsls	r0, r2, #31
 800d9c4:	d502      	bpl.n	800d9cc <_printf_float+0x174>
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	440b      	add	r3, r1
 800d9ca:	6123      	str	r3, [r4, #16]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	65a1      	str	r1, [r4, #88]	; 0x58
 800d9d0:	9304      	str	r3, [sp, #16]
 800d9d2:	e7de      	b.n	800d992 <_printf_float+0x13a>
 800d9d4:	b913      	cbnz	r3, 800d9dc <_printf_float+0x184>
 800d9d6:	6822      	ldr	r2, [r4, #0]
 800d9d8:	07d2      	lsls	r2, r2, #31
 800d9da:	d501      	bpl.n	800d9e0 <_printf_float+0x188>
 800d9dc:	3302      	adds	r3, #2
 800d9de:	e7f4      	b.n	800d9ca <_printf_float+0x172>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e7f2      	b.n	800d9ca <_printf_float+0x172>
 800d9e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d9e8:	9b08      	ldr	r3, [sp, #32]
 800d9ea:	4299      	cmp	r1, r3
 800d9ec:	db05      	blt.n	800d9fa <_printf_float+0x1a2>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	6121      	str	r1, [r4, #16]
 800d9f2:	07d8      	lsls	r0, r3, #31
 800d9f4:	d5ea      	bpl.n	800d9cc <_printf_float+0x174>
 800d9f6:	1c4b      	adds	r3, r1, #1
 800d9f8:	e7e7      	b.n	800d9ca <_printf_float+0x172>
 800d9fa:	2900      	cmp	r1, #0
 800d9fc:	bfd4      	ite	le
 800d9fe:	f1c1 0202 	rsble	r2, r1, #2
 800da02:	2201      	movgt	r2, #1
 800da04:	4413      	add	r3, r2
 800da06:	e7e0      	b.n	800d9ca <_printf_float+0x172>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	055a      	lsls	r2, r3, #21
 800da0c:	d407      	bmi.n	800da1e <_printf_float+0x1c6>
 800da0e:	6923      	ldr	r3, [r4, #16]
 800da10:	4642      	mov	r2, r8
 800da12:	4631      	mov	r1, r6
 800da14:	4628      	mov	r0, r5
 800da16:	47b8      	blx	r7
 800da18:	3001      	adds	r0, #1
 800da1a:	d12a      	bne.n	800da72 <_printf_float+0x21a>
 800da1c:	e76a      	b.n	800d8f4 <_printf_float+0x9c>
 800da1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800da22:	f240 80e2 	bls.w	800dbea <_printf_float+0x392>
 800da26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800da2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da32:	d133      	bne.n	800da9c <_printf_float+0x244>
 800da34:	4a38      	ldr	r2, [pc, #224]	; (800db18 <_printf_float+0x2c0>)
 800da36:	2301      	movs	r3, #1
 800da38:	4631      	mov	r1, r6
 800da3a:	4628      	mov	r0, r5
 800da3c:	47b8      	blx	r7
 800da3e:	3001      	adds	r0, #1
 800da40:	f43f af58 	beq.w	800d8f4 <_printf_float+0x9c>
 800da44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800da48:	429a      	cmp	r2, r3
 800da4a:	db02      	blt.n	800da52 <_printf_float+0x1fa>
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	07d8      	lsls	r0, r3, #31
 800da50:	d50f      	bpl.n	800da72 <_printf_float+0x21a>
 800da52:	4653      	mov	r3, sl
 800da54:	465a      	mov	r2, fp
 800da56:	4631      	mov	r1, r6
 800da58:	4628      	mov	r0, r5
 800da5a:	47b8      	blx	r7
 800da5c:	3001      	adds	r0, #1
 800da5e:	f43f af49 	beq.w	800d8f4 <_printf_float+0x9c>
 800da62:	f04f 0800 	mov.w	r8, #0
 800da66:	f104 091a 	add.w	r9, r4, #26
 800da6a:	9b08      	ldr	r3, [sp, #32]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	4543      	cmp	r3, r8
 800da70:	dc09      	bgt.n	800da86 <_printf_float+0x22e>
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	079b      	lsls	r3, r3, #30
 800da76:	f100 8108 	bmi.w	800dc8a <_printf_float+0x432>
 800da7a:	68e0      	ldr	r0, [r4, #12]
 800da7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da7e:	4298      	cmp	r0, r3
 800da80:	bfb8      	it	lt
 800da82:	4618      	movlt	r0, r3
 800da84:	e738      	b.n	800d8f8 <_printf_float+0xa0>
 800da86:	2301      	movs	r3, #1
 800da88:	464a      	mov	r2, r9
 800da8a:	4631      	mov	r1, r6
 800da8c:	4628      	mov	r0, r5
 800da8e:	47b8      	blx	r7
 800da90:	3001      	adds	r0, #1
 800da92:	f43f af2f 	beq.w	800d8f4 <_printf_float+0x9c>
 800da96:	f108 0801 	add.w	r8, r8, #1
 800da9a:	e7e6      	b.n	800da6a <_printf_float+0x212>
 800da9c:	9b07      	ldr	r3, [sp, #28]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	dc3c      	bgt.n	800db1c <_printf_float+0x2c4>
 800daa2:	4a1d      	ldr	r2, [pc, #116]	; (800db18 <_printf_float+0x2c0>)
 800daa4:	2301      	movs	r3, #1
 800daa6:	4631      	mov	r1, r6
 800daa8:	4628      	mov	r0, r5
 800daaa:	47b8      	blx	r7
 800daac:	3001      	adds	r0, #1
 800daae:	f43f af21 	beq.w	800d8f4 <_printf_float+0x9c>
 800dab2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	d102      	bne.n	800dac0 <_printf_float+0x268>
 800daba:	6823      	ldr	r3, [r4, #0]
 800dabc:	07d9      	lsls	r1, r3, #31
 800dabe:	d5d8      	bpl.n	800da72 <_printf_float+0x21a>
 800dac0:	4653      	mov	r3, sl
 800dac2:	465a      	mov	r2, fp
 800dac4:	4631      	mov	r1, r6
 800dac6:	4628      	mov	r0, r5
 800dac8:	47b8      	blx	r7
 800daca:	3001      	adds	r0, #1
 800dacc:	f43f af12 	beq.w	800d8f4 <_printf_float+0x9c>
 800dad0:	f04f 0900 	mov.w	r9, #0
 800dad4:	f104 0a1a 	add.w	sl, r4, #26
 800dad8:	9b07      	ldr	r3, [sp, #28]
 800dada:	425b      	negs	r3, r3
 800dadc:	454b      	cmp	r3, r9
 800dade:	dc01      	bgt.n	800dae4 <_printf_float+0x28c>
 800dae0:	9b08      	ldr	r3, [sp, #32]
 800dae2:	e795      	b.n	800da10 <_printf_float+0x1b8>
 800dae4:	2301      	movs	r3, #1
 800dae6:	4652      	mov	r2, sl
 800dae8:	4631      	mov	r1, r6
 800daea:	4628      	mov	r0, r5
 800daec:	47b8      	blx	r7
 800daee:	3001      	adds	r0, #1
 800daf0:	f43f af00 	beq.w	800d8f4 <_printf_float+0x9c>
 800daf4:	f109 0901 	add.w	r9, r9, #1
 800daf8:	e7ee      	b.n	800dad8 <_printf_float+0x280>
 800dafa:	bf00      	nop
 800dafc:	f3af 8000 	nop.w
 800db00:	ffffffff 	.word	0xffffffff
 800db04:	7fefffff 	.word	0x7fefffff
 800db08:	080109ec 	.word	0x080109ec
 800db0c:	080109f0 	.word	0x080109f0
 800db10:	080109f8 	.word	0x080109f8
 800db14:	080109f4 	.word	0x080109f4
 800db18:	080109fc 	.word	0x080109fc
 800db1c:	9a08      	ldr	r2, [sp, #32]
 800db1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db20:	429a      	cmp	r2, r3
 800db22:	bfa8      	it	ge
 800db24:	461a      	movge	r2, r3
 800db26:	2a00      	cmp	r2, #0
 800db28:	4691      	mov	r9, r2
 800db2a:	dc38      	bgt.n	800db9e <_printf_float+0x346>
 800db2c:	2300      	movs	r3, #0
 800db2e:	9305      	str	r3, [sp, #20]
 800db30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db34:	f104 021a 	add.w	r2, r4, #26
 800db38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db3a:	9905      	ldr	r1, [sp, #20]
 800db3c:	9304      	str	r3, [sp, #16]
 800db3e:	eba3 0309 	sub.w	r3, r3, r9
 800db42:	428b      	cmp	r3, r1
 800db44:	dc33      	bgt.n	800dbae <_printf_float+0x356>
 800db46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	db3c      	blt.n	800dbc8 <_printf_float+0x370>
 800db4e:	6823      	ldr	r3, [r4, #0]
 800db50:	07da      	lsls	r2, r3, #31
 800db52:	d439      	bmi.n	800dbc8 <_printf_float+0x370>
 800db54:	9a08      	ldr	r2, [sp, #32]
 800db56:	9b04      	ldr	r3, [sp, #16]
 800db58:	9907      	ldr	r1, [sp, #28]
 800db5a:	1ad3      	subs	r3, r2, r3
 800db5c:	eba2 0901 	sub.w	r9, r2, r1
 800db60:	4599      	cmp	r9, r3
 800db62:	bfa8      	it	ge
 800db64:	4699      	movge	r9, r3
 800db66:	f1b9 0f00 	cmp.w	r9, #0
 800db6a:	dc35      	bgt.n	800dbd8 <_printf_float+0x380>
 800db6c:	f04f 0800 	mov.w	r8, #0
 800db70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db74:	f104 0a1a 	add.w	sl, r4, #26
 800db78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800db7c:	1a9b      	subs	r3, r3, r2
 800db7e:	eba3 0309 	sub.w	r3, r3, r9
 800db82:	4543      	cmp	r3, r8
 800db84:	f77f af75 	ble.w	800da72 <_printf_float+0x21a>
 800db88:	2301      	movs	r3, #1
 800db8a:	4652      	mov	r2, sl
 800db8c:	4631      	mov	r1, r6
 800db8e:	4628      	mov	r0, r5
 800db90:	47b8      	blx	r7
 800db92:	3001      	adds	r0, #1
 800db94:	f43f aeae 	beq.w	800d8f4 <_printf_float+0x9c>
 800db98:	f108 0801 	add.w	r8, r8, #1
 800db9c:	e7ec      	b.n	800db78 <_printf_float+0x320>
 800db9e:	4613      	mov	r3, r2
 800dba0:	4631      	mov	r1, r6
 800dba2:	4642      	mov	r2, r8
 800dba4:	4628      	mov	r0, r5
 800dba6:	47b8      	blx	r7
 800dba8:	3001      	adds	r0, #1
 800dbaa:	d1bf      	bne.n	800db2c <_printf_float+0x2d4>
 800dbac:	e6a2      	b.n	800d8f4 <_printf_float+0x9c>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4631      	mov	r1, r6
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	9204      	str	r2, [sp, #16]
 800dbb6:	47b8      	blx	r7
 800dbb8:	3001      	adds	r0, #1
 800dbba:	f43f ae9b 	beq.w	800d8f4 <_printf_float+0x9c>
 800dbbe:	9b05      	ldr	r3, [sp, #20]
 800dbc0:	9a04      	ldr	r2, [sp, #16]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9305      	str	r3, [sp, #20]
 800dbc6:	e7b7      	b.n	800db38 <_printf_float+0x2e0>
 800dbc8:	4653      	mov	r3, sl
 800dbca:	465a      	mov	r2, fp
 800dbcc:	4631      	mov	r1, r6
 800dbce:	4628      	mov	r0, r5
 800dbd0:	47b8      	blx	r7
 800dbd2:	3001      	adds	r0, #1
 800dbd4:	d1be      	bne.n	800db54 <_printf_float+0x2fc>
 800dbd6:	e68d      	b.n	800d8f4 <_printf_float+0x9c>
 800dbd8:	9a04      	ldr	r2, [sp, #16]
 800dbda:	464b      	mov	r3, r9
 800dbdc:	4442      	add	r2, r8
 800dbde:	4631      	mov	r1, r6
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	47b8      	blx	r7
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	d1c1      	bne.n	800db6c <_printf_float+0x314>
 800dbe8:	e684      	b.n	800d8f4 <_printf_float+0x9c>
 800dbea:	9a08      	ldr	r2, [sp, #32]
 800dbec:	2a01      	cmp	r2, #1
 800dbee:	dc01      	bgt.n	800dbf4 <_printf_float+0x39c>
 800dbf0:	07db      	lsls	r3, r3, #31
 800dbf2:	d537      	bpl.n	800dc64 <_printf_float+0x40c>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	4642      	mov	r2, r8
 800dbf8:	4631      	mov	r1, r6
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	47b8      	blx	r7
 800dbfe:	3001      	adds	r0, #1
 800dc00:	f43f ae78 	beq.w	800d8f4 <_printf_float+0x9c>
 800dc04:	4653      	mov	r3, sl
 800dc06:	465a      	mov	r2, fp
 800dc08:	4631      	mov	r1, r6
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	47b8      	blx	r7
 800dc0e:	3001      	adds	r0, #1
 800dc10:	f43f ae70 	beq.w	800d8f4 <_printf_float+0x9c>
 800dc14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dc18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc20:	d01b      	beq.n	800dc5a <_printf_float+0x402>
 800dc22:	9b08      	ldr	r3, [sp, #32]
 800dc24:	f108 0201 	add.w	r2, r8, #1
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	4631      	mov	r1, r6
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	47b8      	blx	r7
 800dc30:	3001      	adds	r0, #1
 800dc32:	d10e      	bne.n	800dc52 <_printf_float+0x3fa>
 800dc34:	e65e      	b.n	800d8f4 <_printf_float+0x9c>
 800dc36:	2301      	movs	r3, #1
 800dc38:	464a      	mov	r2, r9
 800dc3a:	4631      	mov	r1, r6
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	47b8      	blx	r7
 800dc40:	3001      	adds	r0, #1
 800dc42:	f43f ae57 	beq.w	800d8f4 <_printf_float+0x9c>
 800dc46:	f108 0801 	add.w	r8, r8, #1
 800dc4a:	9b08      	ldr	r3, [sp, #32]
 800dc4c:	3b01      	subs	r3, #1
 800dc4e:	4543      	cmp	r3, r8
 800dc50:	dcf1      	bgt.n	800dc36 <_printf_float+0x3de>
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc58:	e6db      	b.n	800da12 <_printf_float+0x1ba>
 800dc5a:	f04f 0800 	mov.w	r8, #0
 800dc5e:	f104 091a 	add.w	r9, r4, #26
 800dc62:	e7f2      	b.n	800dc4a <_printf_float+0x3f2>
 800dc64:	2301      	movs	r3, #1
 800dc66:	4642      	mov	r2, r8
 800dc68:	e7df      	b.n	800dc2a <_printf_float+0x3d2>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	464a      	mov	r2, r9
 800dc6e:	4631      	mov	r1, r6
 800dc70:	4628      	mov	r0, r5
 800dc72:	47b8      	blx	r7
 800dc74:	3001      	adds	r0, #1
 800dc76:	f43f ae3d 	beq.w	800d8f4 <_printf_float+0x9c>
 800dc7a:	f108 0801 	add.w	r8, r8, #1
 800dc7e:	68e3      	ldr	r3, [r4, #12]
 800dc80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc82:	1a5b      	subs	r3, r3, r1
 800dc84:	4543      	cmp	r3, r8
 800dc86:	dcf0      	bgt.n	800dc6a <_printf_float+0x412>
 800dc88:	e6f7      	b.n	800da7a <_printf_float+0x222>
 800dc8a:	f04f 0800 	mov.w	r8, #0
 800dc8e:	f104 0919 	add.w	r9, r4, #25
 800dc92:	e7f4      	b.n	800dc7e <_printf_float+0x426>

0800dc94 <_printf_common>:
 800dc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc98:	4616      	mov	r6, r2
 800dc9a:	4699      	mov	r9, r3
 800dc9c:	688a      	ldr	r2, [r1, #8]
 800dc9e:	690b      	ldr	r3, [r1, #16]
 800dca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dca4:	4293      	cmp	r3, r2
 800dca6:	bfb8      	it	lt
 800dca8:	4613      	movlt	r3, r2
 800dcaa:	6033      	str	r3, [r6, #0]
 800dcac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcb0:	4607      	mov	r7, r0
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	b10a      	cbz	r2, 800dcba <_printf_common+0x26>
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	6033      	str	r3, [r6, #0]
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	0699      	lsls	r1, r3, #26
 800dcbe:	bf42      	ittt	mi
 800dcc0:	6833      	ldrmi	r3, [r6, #0]
 800dcc2:	3302      	addmi	r3, #2
 800dcc4:	6033      	strmi	r3, [r6, #0]
 800dcc6:	6825      	ldr	r5, [r4, #0]
 800dcc8:	f015 0506 	ands.w	r5, r5, #6
 800dccc:	d106      	bne.n	800dcdc <_printf_common+0x48>
 800dcce:	f104 0a19 	add.w	sl, r4, #25
 800dcd2:	68e3      	ldr	r3, [r4, #12]
 800dcd4:	6832      	ldr	r2, [r6, #0]
 800dcd6:	1a9b      	subs	r3, r3, r2
 800dcd8:	42ab      	cmp	r3, r5
 800dcda:	dc26      	bgt.n	800dd2a <_printf_common+0x96>
 800dcdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dce0:	1e13      	subs	r3, r2, #0
 800dce2:	6822      	ldr	r2, [r4, #0]
 800dce4:	bf18      	it	ne
 800dce6:	2301      	movne	r3, #1
 800dce8:	0692      	lsls	r2, r2, #26
 800dcea:	d42b      	bmi.n	800dd44 <_printf_common+0xb0>
 800dcec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcf0:	4649      	mov	r1, r9
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	47c0      	blx	r8
 800dcf6:	3001      	adds	r0, #1
 800dcf8:	d01e      	beq.n	800dd38 <_printf_common+0xa4>
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	68e5      	ldr	r5, [r4, #12]
 800dcfe:	6832      	ldr	r2, [r6, #0]
 800dd00:	f003 0306 	and.w	r3, r3, #6
 800dd04:	2b04      	cmp	r3, #4
 800dd06:	bf08      	it	eq
 800dd08:	1aad      	subeq	r5, r5, r2
 800dd0a:	68a3      	ldr	r3, [r4, #8]
 800dd0c:	6922      	ldr	r2, [r4, #16]
 800dd0e:	bf0c      	ite	eq
 800dd10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd14:	2500      	movne	r5, #0
 800dd16:	4293      	cmp	r3, r2
 800dd18:	bfc4      	itt	gt
 800dd1a:	1a9b      	subgt	r3, r3, r2
 800dd1c:	18ed      	addgt	r5, r5, r3
 800dd1e:	2600      	movs	r6, #0
 800dd20:	341a      	adds	r4, #26
 800dd22:	42b5      	cmp	r5, r6
 800dd24:	d11a      	bne.n	800dd5c <_printf_common+0xc8>
 800dd26:	2000      	movs	r0, #0
 800dd28:	e008      	b.n	800dd3c <_printf_common+0xa8>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	4652      	mov	r2, sl
 800dd2e:	4649      	mov	r1, r9
 800dd30:	4638      	mov	r0, r7
 800dd32:	47c0      	blx	r8
 800dd34:	3001      	adds	r0, #1
 800dd36:	d103      	bne.n	800dd40 <_printf_common+0xac>
 800dd38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd40:	3501      	adds	r5, #1
 800dd42:	e7c6      	b.n	800dcd2 <_printf_common+0x3e>
 800dd44:	18e1      	adds	r1, r4, r3
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	2030      	movs	r0, #48	; 0x30
 800dd4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd4e:	4422      	add	r2, r4
 800dd50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd58:	3302      	adds	r3, #2
 800dd5a:	e7c7      	b.n	800dcec <_printf_common+0x58>
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	4622      	mov	r2, r4
 800dd60:	4649      	mov	r1, r9
 800dd62:	4638      	mov	r0, r7
 800dd64:	47c0      	blx	r8
 800dd66:	3001      	adds	r0, #1
 800dd68:	d0e6      	beq.n	800dd38 <_printf_common+0xa4>
 800dd6a:	3601      	adds	r6, #1
 800dd6c:	e7d9      	b.n	800dd22 <_printf_common+0x8e>
	...

0800dd70 <_printf_i>:
 800dd70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd74:	460c      	mov	r4, r1
 800dd76:	4691      	mov	r9, r2
 800dd78:	7e27      	ldrb	r7, [r4, #24]
 800dd7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dd7c:	2f78      	cmp	r7, #120	; 0x78
 800dd7e:	4680      	mov	r8, r0
 800dd80:	469a      	mov	sl, r3
 800dd82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd86:	d807      	bhi.n	800dd98 <_printf_i+0x28>
 800dd88:	2f62      	cmp	r7, #98	; 0x62
 800dd8a:	d80a      	bhi.n	800dda2 <_printf_i+0x32>
 800dd8c:	2f00      	cmp	r7, #0
 800dd8e:	f000 80d8 	beq.w	800df42 <_printf_i+0x1d2>
 800dd92:	2f58      	cmp	r7, #88	; 0x58
 800dd94:	f000 80a3 	beq.w	800dede <_printf_i+0x16e>
 800dd98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dd9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dda0:	e03a      	b.n	800de18 <_printf_i+0xa8>
 800dda2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dda6:	2b15      	cmp	r3, #21
 800dda8:	d8f6      	bhi.n	800dd98 <_printf_i+0x28>
 800ddaa:	a001      	add	r0, pc, #4	; (adr r0, 800ddb0 <_printf_i+0x40>)
 800ddac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ddb0:	0800de09 	.word	0x0800de09
 800ddb4:	0800de1d 	.word	0x0800de1d
 800ddb8:	0800dd99 	.word	0x0800dd99
 800ddbc:	0800dd99 	.word	0x0800dd99
 800ddc0:	0800dd99 	.word	0x0800dd99
 800ddc4:	0800dd99 	.word	0x0800dd99
 800ddc8:	0800de1d 	.word	0x0800de1d
 800ddcc:	0800dd99 	.word	0x0800dd99
 800ddd0:	0800dd99 	.word	0x0800dd99
 800ddd4:	0800dd99 	.word	0x0800dd99
 800ddd8:	0800dd99 	.word	0x0800dd99
 800dddc:	0800df29 	.word	0x0800df29
 800dde0:	0800de4d 	.word	0x0800de4d
 800dde4:	0800df0b 	.word	0x0800df0b
 800dde8:	0800dd99 	.word	0x0800dd99
 800ddec:	0800dd99 	.word	0x0800dd99
 800ddf0:	0800df4b 	.word	0x0800df4b
 800ddf4:	0800dd99 	.word	0x0800dd99
 800ddf8:	0800de4d 	.word	0x0800de4d
 800ddfc:	0800dd99 	.word	0x0800dd99
 800de00:	0800dd99 	.word	0x0800dd99
 800de04:	0800df13 	.word	0x0800df13
 800de08:	680b      	ldr	r3, [r1, #0]
 800de0a:	1d1a      	adds	r2, r3, #4
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	600a      	str	r2, [r1, #0]
 800de10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800de14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de18:	2301      	movs	r3, #1
 800de1a:	e0a3      	b.n	800df64 <_printf_i+0x1f4>
 800de1c:	6825      	ldr	r5, [r4, #0]
 800de1e:	6808      	ldr	r0, [r1, #0]
 800de20:	062e      	lsls	r6, r5, #24
 800de22:	f100 0304 	add.w	r3, r0, #4
 800de26:	d50a      	bpl.n	800de3e <_printf_i+0xce>
 800de28:	6805      	ldr	r5, [r0, #0]
 800de2a:	600b      	str	r3, [r1, #0]
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	da03      	bge.n	800de38 <_printf_i+0xc8>
 800de30:	232d      	movs	r3, #45	; 0x2d
 800de32:	426d      	negs	r5, r5
 800de34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de38:	485e      	ldr	r0, [pc, #376]	; (800dfb4 <_printf_i+0x244>)
 800de3a:	230a      	movs	r3, #10
 800de3c:	e019      	b.n	800de72 <_printf_i+0x102>
 800de3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800de42:	6805      	ldr	r5, [r0, #0]
 800de44:	600b      	str	r3, [r1, #0]
 800de46:	bf18      	it	ne
 800de48:	b22d      	sxthne	r5, r5
 800de4a:	e7ef      	b.n	800de2c <_printf_i+0xbc>
 800de4c:	680b      	ldr	r3, [r1, #0]
 800de4e:	6825      	ldr	r5, [r4, #0]
 800de50:	1d18      	adds	r0, r3, #4
 800de52:	6008      	str	r0, [r1, #0]
 800de54:	0628      	lsls	r0, r5, #24
 800de56:	d501      	bpl.n	800de5c <_printf_i+0xec>
 800de58:	681d      	ldr	r5, [r3, #0]
 800de5a:	e002      	b.n	800de62 <_printf_i+0xf2>
 800de5c:	0669      	lsls	r1, r5, #25
 800de5e:	d5fb      	bpl.n	800de58 <_printf_i+0xe8>
 800de60:	881d      	ldrh	r5, [r3, #0]
 800de62:	4854      	ldr	r0, [pc, #336]	; (800dfb4 <_printf_i+0x244>)
 800de64:	2f6f      	cmp	r7, #111	; 0x6f
 800de66:	bf0c      	ite	eq
 800de68:	2308      	moveq	r3, #8
 800de6a:	230a      	movne	r3, #10
 800de6c:	2100      	movs	r1, #0
 800de6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de72:	6866      	ldr	r6, [r4, #4]
 800de74:	60a6      	str	r6, [r4, #8]
 800de76:	2e00      	cmp	r6, #0
 800de78:	bfa2      	ittt	ge
 800de7a:	6821      	ldrge	r1, [r4, #0]
 800de7c:	f021 0104 	bicge.w	r1, r1, #4
 800de80:	6021      	strge	r1, [r4, #0]
 800de82:	b90d      	cbnz	r5, 800de88 <_printf_i+0x118>
 800de84:	2e00      	cmp	r6, #0
 800de86:	d04d      	beq.n	800df24 <_printf_i+0x1b4>
 800de88:	4616      	mov	r6, r2
 800de8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800de8e:	fb03 5711 	mls	r7, r3, r1, r5
 800de92:	5dc7      	ldrb	r7, [r0, r7]
 800de94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de98:	462f      	mov	r7, r5
 800de9a:	42bb      	cmp	r3, r7
 800de9c:	460d      	mov	r5, r1
 800de9e:	d9f4      	bls.n	800de8a <_printf_i+0x11a>
 800dea0:	2b08      	cmp	r3, #8
 800dea2:	d10b      	bne.n	800debc <_printf_i+0x14c>
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	07df      	lsls	r7, r3, #31
 800dea8:	d508      	bpl.n	800debc <_printf_i+0x14c>
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	6861      	ldr	r1, [r4, #4]
 800deae:	4299      	cmp	r1, r3
 800deb0:	bfde      	ittt	le
 800deb2:	2330      	movle	r3, #48	; 0x30
 800deb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800deb8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800debc:	1b92      	subs	r2, r2, r6
 800debe:	6122      	str	r2, [r4, #16]
 800dec0:	f8cd a000 	str.w	sl, [sp]
 800dec4:	464b      	mov	r3, r9
 800dec6:	aa03      	add	r2, sp, #12
 800dec8:	4621      	mov	r1, r4
 800deca:	4640      	mov	r0, r8
 800decc:	f7ff fee2 	bl	800dc94 <_printf_common>
 800ded0:	3001      	adds	r0, #1
 800ded2:	d14c      	bne.n	800df6e <_printf_i+0x1fe>
 800ded4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded8:	b004      	add	sp, #16
 800deda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dede:	4835      	ldr	r0, [pc, #212]	; (800dfb4 <_printf_i+0x244>)
 800dee0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	680e      	ldr	r6, [r1, #0]
 800dee8:	061f      	lsls	r7, r3, #24
 800deea:	f856 5b04 	ldr.w	r5, [r6], #4
 800deee:	600e      	str	r6, [r1, #0]
 800def0:	d514      	bpl.n	800df1c <_printf_i+0x1ac>
 800def2:	07d9      	lsls	r1, r3, #31
 800def4:	bf44      	itt	mi
 800def6:	f043 0320 	orrmi.w	r3, r3, #32
 800defa:	6023      	strmi	r3, [r4, #0]
 800defc:	b91d      	cbnz	r5, 800df06 <_printf_i+0x196>
 800defe:	6823      	ldr	r3, [r4, #0]
 800df00:	f023 0320 	bic.w	r3, r3, #32
 800df04:	6023      	str	r3, [r4, #0]
 800df06:	2310      	movs	r3, #16
 800df08:	e7b0      	b.n	800de6c <_printf_i+0xfc>
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	f043 0320 	orr.w	r3, r3, #32
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	2378      	movs	r3, #120	; 0x78
 800df14:	4828      	ldr	r0, [pc, #160]	; (800dfb8 <_printf_i+0x248>)
 800df16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df1a:	e7e3      	b.n	800dee4 <_printf_i+0x174>
 800df1c:	065e      	lsls	r6, r3, #25
 800df1e:	bf48      	it	mi
 800df20:	b2ad      	uxthmi	r5, r5
 800df22:	e7e6      	b.n	800def2 <_printf_i+0x182>
 800df24:	4616      	mov	r6, r2
 800df26:	e7bb      	b.n	800dea0 <_printf_i+0x130>
 800df28:	680b      	ldr	r3, [r1, #0]
 800df2a:	6826      	ldr	r6, [r4, #0]
 800df2c:	6960      	ldr	r0, [r4, #20]
 800df2e:	1d1d      	adds	r5, r3, #4
 800df30:	600d      	str	r5, [r1, #0]
 800df32:	0635      	lsls	r5, r6, #24
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	d501      	bpl.n	800df3c <_printf_i+0x1cc>
 800df38:	6018      	str	r0, [r3, #0]
 800df3a:	e002      	b.n	800df42 <_printf_i+0x1d2>
 800df3c:	0671      	lsls	r1, r6, #25
 800df3e:	d5fb      	bpl.n	800df38 <_printf_i+0x1c8>
 800df40:	8018      	strh	r0, [r3, #0]
 800df42:	2300      	movs	r3, #0
 800df44:	6123      	str	r3, [r4, #16]
 800df46:	4616      	mov	r6, r2
 800df48:	e7ba      	b.n	800dec0 <_printf_i+0x150>
 800df4a:	680b      	ldr	r3, [r1, #0]
 800df4c:	1d1a      	adds	r2, r3, #4
 800df4e:	600a      	str	r2, [r1, #0]
 800df50:	681e      	ldr	r6, [r3, #0]
 800df52:	6862      	ldr	r2, [r4, #4]
 800df54:	2100      	movs	r1, #0
 800df56:	4630      	mov	r0, r6
 800df58:	f7f2 f9e2 	bl	8000320 <memchr>
 800df5c:	b108      	cbz	r0, 800df62 <_printf_i+0x1f2>
 800df5e:	1b80      	subs	r0, r0, r6
 800df60:	6060      	str	r0, [r4, #4]
 800df62:	6863      	ldr	r3, [r4, #4]
 800df64:	6123      	str	r3, [r4, #16]
 800df66:	2300      	movs	r3, #0
 800df68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df6c:	e7a8      	b.n	800dec0 <_printf_i+0x150>
 800df6e:	6923      	ldr	r3, [r4, #16]
 800df70:	4632      	mov	r2, r6
 800df72:	4649      	mov	r1, r9
 800df74:	4640      	mov	r0, r8
 800df76:	47d0      	blx	sl
 800df78:	3001      	adds	r0, #1
 800df7a:	d0ab      	beq.n	800ded4 <_printf_i+0x164>
 800df7c:	6823      	ldr	r3, [r4, #0]
 800df7e:	079b      	lsls	r3, r3, #30
 800df80:	d413      	bmi.n	800dfaa <_printf_i+0x23a>
 800df82:	68e0      	ldr	r0, [r4, #12]
 800df84:	9b03      	ldr	r3, [sp, #12]
 800df86:	4298      	cmp	r0, r3
 800df88:	bfb8      	it	lt
 800df8a:	4618      	movlt	r0, r3
 800df8c:	e7a4      	b.n	800ded8 <_printf_i+0x168>
 800df8e:	2301      	movs	r3, #1
 800df90:	4632      	mov	r2, r6
 800df92:	4649      	mov	r1, r9
 800df94:	4640      	mov	r0, r8
 800df96:	47d0      	blx	sl
 800df98:	3001      	adds	r0, #1
 800df9a:	d09b      	beq.n	800ded4 <_printf_i+0x164>
 800df9c:	3501      	adds	r5, #1
 800df9e:	68e3      	ldr	r3, [r4, #12]
 800dfa0:	9903      	ldr	r1, [sp, #12]
 800dfa2:	1a5b      	subs	r3, r3, r1
 800dfa4:	42ab      	cmp	r3, r5
 800dfa6:	dcf2      	bgt.n	800df8e <_printf_i+0x21e>
 800dfa8:	e7eb      	b.n	800df82 <_printf_i+0x212>
 800dfaa:	2500      	movs	r5, #0
 800dfac:	f104 0619 	add.w	r6, r4, #25
 800dfb0:	e7f5      	b.n	800df9e <_printf_i+0x22e>
 800dfb2:	bf00      	nop
 800dfb4:	080109fe 	.word	0x080109fe
 800dfb8:	08010a0f 	.word	0x08010a0f

0800dfbc <iprintf>:
 800dfbc:	b40f      	push	{r0, r1, r2, r3}
 800dfbe:	4b0a      	ldr	r3, [pc, #40]	; (800dfe8 <iprintf+0x2c>)
 800dfc0:	b513      	push	{r0, r1, r4, lr}
 800dfc2:	681c      	ldr	r4, [r3, #0]
 800dfc4:	b124      	cbz	r4, 800dfd0 <iprintf+0x14>
 800dfc6:	69a3      	ldr	r3, [r4, #24]
 800dfc8:	b913      	cbnz	r3, 800dfd0 <iprintf+0x14>
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f001 f87c 	bl	800f0c8 <__sinit>
 800dfd0:	ab05      	add	r3, sp, #20
 800dfd2:	9a04      	ldr	r2, [sp, #16]
 800dfd4:	68a1      	ldr	r1, [r4, #8]
 800dfd6:	9301      	str	r3, [sp, #4]
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f001 fd41 	bl	800fa60 <_vfiprintf_r>
 800dfde:	b002      	add	sp, #8
 800dfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfe4:	b004      	add	sp, #16
 800dfe6:	4770      	bx	lr
 800dfe8:	24000af4 	.word	0x24000af4

0800dfec <_puts_r>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	460e      	mov	r6, r1
 800dff0:	4605      	mov	r5, r0
 800dff2:	b118      	cbz	r0, 800dffc <_puts_r+0x10>
 800dff4:	6983      	ldr	r3, [r0, #24]
 800dff6:	b90b      	cbnz	r3, 800dffc <_puts_r+0x10>
 800dff8:	f001 f866 	bl	800f0c8 <__sinit>
 800dffc:	69ab      	ldr	r3, [r5, #24]
 800dffe:	68ac      	ldr	r4, [r5, #8]
 800e000:	b913      	cbnz	r3, 800e008 <_puts_r+0x1c>
 800e002:	4628      	mov	r0, r5
 800e004:	f001 f860 	bl	800f0c8 <__sinit>
 800e008:	4b2c      	ldr	r3, [pc, #176]	; (800e0bc <_puts_r+0xd0>)
 800e00a:	429c      	cmp	r4, r3
 800e00c:	d120      	bne.n	800e050 <_puts_r+0x64>
 800e00e:	686c      	ldr	r4, [r5, #4]
 800e010:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e012:	07db      	lsls	r3, r3, #31
 800e014:	d405      	bmi.n	800e022 <_puts_r+0x36>
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	0598      	lsls	r0, r3, #22
 800e01a:	d402      	bmi.n	800e022 <_puts_r+0x36>
 800e01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e01e:	f001 f8f6 	bl	800f20e <__retarget_lock_acquire_recursive>
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	0719      	lsls	r1, r3, #28
 800e026:	d51d      	bpl.n	800e064 <_puts_r+0x78>
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	b1db      	cbz	r3, 800e064 <_puts_r+0x78>
 800e02c:	3e01      	subs	r6, #1
 800e02e:	68a3      	ldr	r3, [r4, #8]
 800e030:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e034:	3b01      	subs	r3, #1
 800e036:	60a3      	str	r3, [r4, #8]
 800e038:	bb39      	cbnz	r1, 800e08a <_puts_r+0x9e>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	da38      	bge.n	800e0b0 <_puts_r+0xc4>
 800e03e:	4622      	mov	r2, r4
 800e040:	210a      	movs	r1, #10
 800e042:	4628      	mov	r0, r5
 800e044:	f000 f858 	bl	800e0f8 <__swbuf_r>
 800e048:	3001      	adds	r0, #1
 800e04a:	d011      	beq.n	800e070 <_puts_r+0x84>
 800e04c:	250a      	movs	r5, #10
 800e04e:	e011      	b.n	800e074 <_puts_r+0x88>
 800e050:	4b1b      	ldr	r3, [pc, #108]	; (800e0c0 <_puts_r+0xd4>)
 800e052:	429c      	cmp	r4, r3
 800e054:	d101      	bne.n	800e05a <_puts_r+0x6e>
 800e056:	68ac      	ldr	r4, [r5, #8]
 800e058:	e7da      	b.n	800e010 <_puts_r+0x24>
 800e05a:	4b1a      	ldr	r3, [pc, #104]	; (800e0c4 <_puts_r+0xd8>)
 800e05c:	429c      	cmp	r4, r3
 800e05e:	bf08      	it	eq
 800e060:	68ec      	ldreq	r4, [r5, #12]
 800e062:	e7d5      	b.n	800e010 <_puts_r+0x24>
 800e064:	4621      	mov	r1, r4
 800e066:	4628      	mov	r0, r5
 800e068:	f000 f898 	bl	800e19c <__swsetup_r>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d0dd      	beq.n	800e02c <_puts_r+0x40>
 800e070:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e076:	07da      	lsls	r2, r3, #31
 800e078:	d405      	bmi.n	800e086 <_puts_r+0x9a>
 800e07a:	89a3      	ldrh	r3, [r4, #12]
 800e07c:	059b      	lsls	r3, r3, #22
 800e07e:	d402      	bmi.n	800e086 <_puts_r+0x9a>
 800e080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e082:	f001 f8c5 	bl	800f210 <__retarget_lock_release_recursive>
 800e086:	4628      	mov	r0, r5
 800e088:	bd70      	pop	{r4, r5, r6, pc}
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	da04      	bge.n	800e098 <_puts_r+0xac>
 800e08e:	69a2      	ldr	r2, [r4, #24]
 800e090:	429a      	cmp	r2, r3
 800e092:	dc06      	bgt.n	800e0a2 <_puts_r+0xb6>
 800e094:	290a      	cmp	r1, #10
 800e096:	d004      	beq.n	800e0a2 <_puts_r+0xb6>
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	6022      	str	r2, [r4, #0]
 800e09e:	7019      	strb	r1, [r3, #0]
 800e0a0:	e7c5      	b.n	800e02e <_puts_r+0x42>
 800e0a2:	4622      	mov	r2, r4
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f000 f827 	bl	800e0f8 <__swbuf_r>
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	d1bf      	bne.n	800e02e <_puts_r+0x42>
 800e0ae:	e7df      	b.n	800e070 <_puts_r+0x84>
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	250a      	movs	r5, #10
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	6022      	str	r2, [r4, #0]
 800e0b8:	701d      	strb	r5, [r3, #0]
 800e0ba:	e7db      	b.n	800e074 <_puts_r+0x88>
 800e0bc:	08010ad4 	.word	0x08010ad4
 800e0c0:	08010af4 	.word	0x08010af4
 800e0c4:	08010ab4 	.word	0x08010ab4

0800e0c8 <puts>:
 800e0c8:	4b02      	ldr	r3, [pc, #8]	; (800e0d4 <puts+0xc>)
 800e0ca:	4601      	mov	r1, r0
 800e0cc:	6818      	ldr	r0, [r3, #0]
 800e0ce:	f7ff bf8d 	b.w	800dfec <_puts_r>
 800e0d2:	bf00      	nop
 800e0d4:	24000af4 	.word	0x24000af4

0800e0d8 <_sbrk_r>:
 800e0d8:	b538      	push	{r3, r4, r5, lr}
 800e0da:	4d06      	ldr	r5, [pc, #24]	; (800e0f4 <_sbrk_r+0x1c>)
 800e0dc:	2300      	movs	r3, #0
 800e0de:	4604      	mov	r4, r0
 800e0e0:	4608      	mov	r0, r1
 800e0e2:	602b      	str	r3, [r5, #0]
 800e0e4:	f7f4 fcdc 	bl	8002aa0 <_sbrk>
 800e0e8:	1c43      	adds	r3, r0, #1
 800e0ea:	d102      	bne.n	800e0f2 <_sbrk_r+0x1a>
 800e0ec:	682b      	ldr	r3, [r5, #0]
 800e0ee:	b103      	cbz	r3, 800e0f2 <_sbrk_r+0x1a>
 800e0f0:	6023      	str	r3, [r4, #0]
 800e0f2:	bd38      	pop	{r3, r4, r5, pc}
 800e0f4:	240011b0 	.word	0x240011b0

0800e0f8 <__swbuf_r>:
 800e0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fa:	460e      	mov	r6, r1
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	4605      	mov	r5, r0
 800e100:	b118      	cbz	r0, 800e10a <__swbuf_r+0x12>
 800e102:	6983      	ldr	r3, [r0, #24]
 800e104:	b90b      	cbnz	r3, 800e10a <__swbuf_r+0x12>
 800e106:	f000 ffdf 	bl	800f0c8 <__sinit>
 800e10a:	4b21      	ldr	r3, [pc, #132]	; (800e190 <__swbuf_r+0x98>)
 800e10c:	429c      	cmp	r4, r3
 800e10e:	d12b      	bne.n	800e168 <__swbuf_r+0x70>
 800e110:	686c      	ldr	r4, [r5, #4]
 800e112:	69a3      	ldr	r3, [r4, #24]
 800e114:	60a3      	str	r3, [r4, #8]
 800e116:	89a3      	ldrh	r3, [r4, #12]
 800e118:	071a      	lsls	r2, r3, #28
 800e11a:	d52f      	bpl.n	800e17c <__swbuf_r+0x84>
 800e11c:	6923      	ldr	r3, [r4, #16]
 800e11e:	b36b      	cbz	r3, 800e17c <__swbuf_r+0x84>
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	6820      	ldr	r0, [r4, #0]
 800e124:	1ac0      	subs	r0, r0, r3
 800e126:	6963      	ldr	r3, [r4, #20]
 800e128:	b2f6      	uxtb	r6, r6
 800e12a:	4283      	cmp	r3, r0
 800e12c:	4637      	mov	r7, r6
 800e12e:	dc04      	bgt.n	800e13a <__swbuf_r+0x42>
 800e130:	4621      	mov	r1, r4
 800e132:	4628      	mov	r0, r5
 800e134:	f000 ff34 	bl	800efa0 <_fflush_r>
 800e138:	bb30      	cbnz	r0, 800e188 <__swbuf_r+0x90>
 800e13a:	68a3      	ldr	r3, [r4, #8]
 800e13c:	3b01      	subs	r3, #1
 800e13e:	60a3      	str	r3, [r4, #8]
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	1c5a      	adds	r2, r3, #1
 800e144:	6022      	str	r2, [r4, #0]
 800e146:	701e      	strb	r6, [r3, #0]
 800e148:	6963      	ldr	r3, [r4, #20]
 800e14a:	3001      	adds	r0, #1
 800e14c:	4283      	cmp	r3, r0
 800e14e:	d004      	beq.n	800e15a <__swbuf_r+0x62>
 800e150:	89a3      	ldrh	r3, [r4, #12]
 800e152:	07db      	lsls	r3, r3, #31
 800e154:	d506      	bpl.n	800e164 <__swbuf_r+0x6c>
 800e156:	2e0a      	cmp	r6, #10
 800e158:	d104      	bne.n	800e164 <__swbuf_r+0x6c>
 800e15a:	4621      	mov	r1, r4
 800e15c:	4628      	mov	r0, r5
 800e15e:	f000 ff1f 	bl	800efa0 <_fflush_r>
 800e162:	b988      	cbnz	r0, 800e188 <__swbuf_r+0x90>
 800e164:	4638      	mov	r0, r7
 800e166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e168:	4b0a      	ldr	r3, [pc, #40]	; (800e194 <__swbuf_r+0x9c>)
 800e16a:	429c      	cmp	r4, r3
 800e16c:	d101      	bne.n	800e172 <__swbuf_r+0x7a>
 800e16e:	68ac      	ldr	r4, [r5, #8]
 800e170:	e7cf      	b.n	800e112 <__swbuf_r+0x1a>
 800e172:	4b09      	ldr	r3, [pc, #36]	; (800e198 <__swbuf_r+0xa0>)
 800e174:	429c      	cmp	r4, r3
 800e176:	bf08      	it	eq
 800e178:	68ec      	ldreq	r4, [r5, #12]
 800e17a:	e7ca      	b.n	800e112 <__swbuf_r+0x1a>
 800e17c:	4621      	mov	r1, r4
 800e17e:	4628      	mov	r0, r5
 800e180:	f000 f80c 	bl	800e19c <__swsetup_r>
 800e184:	2800      	cmp	r0, #0
 800e186:	d0cb      	beq.n	800e120 <__swbuf_r+0x28>
 800e188:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e18c:	e7ea      	b.n	800e164 <__swbuf_r+0x6c>
 800e18e:	bf00      	nop
 800e190:	08010ad4 	.word	0x08010ad4
 800e194:	08010af4 	.word	0x08010af4
 800e198:	08010ab4 	.word	0x08010ab4

0800e19c <__swsetup_r>:
 800e19c:	4b32      	ldr	r3, [pc, #200]	; (800e268 <__swsetup_r+0xcc>)
 800e19e:	b570      	push	{r4, r5, r6, lr}
 800e1a0:	681d      	ldr	r5, [r3, #0]
 800e1a2:	4606      	mov	r6, r0
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	b125      	cbz	r5, 800e1b2 <__swsetup_r+0x16>
 800e1a8:	69ab      	ldr	r3, [r5, #24]
 800e1aa:	b913      	cbnz	r3, 800e1b2 <__swsetup_r+0x16>
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f000 ff8b 	bl	800f0c8 <__sinit>
 800e1b2:	4b2e      	ldr	r3, [pc, #184]	; (800e26c <__swsetup_r+0xd0>)
 800e1b4:	429c      	cmp	r4, r3
 800e1b6:	d10f      	bne.n	800e1d8 <__swsetup_r+0x3c>
 800e1b8:	686c      	ldr	r4, [r5, #4]
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1c0:	0719      	lsls	r1, r3, #28
 800e1c2:	d42c      	bmi.n	800e21e <__swsetup_r+0x82>
 800e1c4:	06dd      	lsls	r5, r3, #27
 800e1c6:	d411      	bmi.n	800e1ec <__swsetup_r+0x50>
 800e1c8:	2309      	movs	r3, #9
 800e1ca:	6033      	str	r3, [r6, #0]
 800e1cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e1d0:	81a3      	strh	r3, [r4, #12]
 800e1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1d6:	e03e      	b.n	800e256 <__swsetup_r+0xba>
 800e1d8:	4b25      	ldr	r3, [pc, #148]	; (800e270 <__swsetup_r+0xd4>)
 800e1da:	429c      	cmp	r4, r3
 800e1dc:	d101      	bne.n	800e1e2 <__swsetup_r+0x46>
 800e1de:	68ac      	ldr	r4, [r5, #8]
 800e1e0:	e7eb      	b.n	800e1ba <__swsetup_r+0x1e>
 800e1e2:	4b24      	ldr	r3, [pc, #144]	; (800e274 <__swsetup_r+0xd8>)
 800e1e4:	429c      	cmp	r4, r3
 800e1e6:	bf08      	it	eq
 800e1e8:	68ec      	ldreq	r4, [r5, #12]
 800e1ea:	e7e6      	b.n	800e1ba <__swsetup_r+0x1e>
 800e1ec:	0758      	lsls	r0, r3, #29
 800e1ee:	d512      	bpl.n	800e216 <__swsetup_r+0x7a>
 800e1f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1f2:	b141      	cbz	r1, 800e206 <__swsetup_r+0x6a>
 800e1f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1f8:	4299      	cmp	r1, r3
 800e1fa:	d002      	beq.n	800e202 <__swsetup_r+0x66>
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f7ff f9f1 	bl	800d5e4 <_free_r>
 800e202:	2300      	movs	r3, #0
 800e204:	6363      	str	r3, [r4, #52]	; 0x34
 800e206:	89a3      	ldrh	r3, [r4, #12]
 800e208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e20c:	81a3      	strh	r3, [r4, #12]
 800e20e:	2300      	movs	r3, #0
 800e210:	6063      	str	r3, [r4, #4]
 800e212:	6923      	ldr	r3, [r4, #16]
 800e214:	6023      	str	r3, [r4, #0]
 800e216:	89a3      	ldrh	r3, [r4, #12]
 800e218:	f043 0308 	orr.w	r3, r3, #8
 800e21c:	81a3      	strh	r3, [r4, #12]
 800e21e:	6923      	ldr	r3, [r4, #16]
 800e220:	b94b      	cbnz	r3, 800e236 <__swsetup_r+0x9a>
 800e222:	89a3      	ldrh	r3, [r4, #12]
 800e224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e22c:	d003      	beq.n	800e236 <__swsetup_r+0x9a>
 800e22e:	4621      	mov	r1, r4
 800e230:	4630      	mov	r0, r6
 800e232:	f001 f813 	bl	800f25c <__smakebuf_r>
 800e236:	89a0      	ldrh	r0, [r4, #12]
 800e238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e23c:	f010 0301 	ands.w	r3, r0, #1
 800e240:	d00a      	beq.n	800e258 <__swsetup_r+0xbc>
 800e242:	2300      	movs	r3, #0
 800e244:	60a3      	str	r3, [r4, #8]
 800e246:	6963      	ldr	r3, [r4, #20]
 800e248:	425b      	negs	r3, r3
 800e24a:	61a3      	str	r3, [r4, #24]
 800e24c:	6923      	ldr	r3, [r4, #16]
 800e24e:	b943      	cbnz	r3, 800e262 <__swsetup_r+0xc6>
 800e250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e254:	d1ba      	bne.n	800e1cc <__swsetup_r+0x30>
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	0781      	lsls	r1, r0, #30
 800e25a:	bf58      	it	pl
 800e25c:	6963      	ldrpl	r3, [r4, #20]
 800e25e:	60a3      	str	r3, [r4, #8]
 800e260:	e7f4      	b.n	800e24c <__swsetup_r+0xb0>
 800e262:	2000      	movs	r0, #0
 800e264:	e7f7      	b.n	800e256 <__swsetup_r+0xba>
 800e266:	bf00      	nop
 800e268:	24000af4 	.word	0x24000af4
 800e26c:	08010ad4 	.word	0x08010ad4
 800e270:	08010af4 	.word	0x08010af4
 800e274:	08010ab4 	.word	0x08010ab4

0800e278 <quorem>:
 800e278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	6903      	ldr	r3, [r0, #16]
 800e27e:	690c      	ldr	r4, [r1, #16]
 800e280:	42a3      	cmp	r3, r4
 800e282:	4607      	mov	r7, r0
 800e284:	f2c0 8081 	blt.w	800e38a <quorem+0x112>
 800e288:	3c01      	subs	r4, #1
 800e28a:	f101 0814 	add.w	r8, r1, #20
 800e28e:	f100 0514 	add.w	r5, r0, #20
 800e292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e29c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e2a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e2ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800e2b0:	d331      	bcc.n	800e316 <quorem+0x9e>
 800e2b2:	f04f 0e00 	mov.w	lr, #0
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	46ac      	mov	ip, r5
 800e2ba:	46f2      	mov	sl, lr
 800e2bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800e2c0:	b293      	uxth	r3, r2
 800e2c2:	fb06 e303 	mla	r3, r6, r3, lr
 800e2c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	ebaa 0303 	sub.w	r3, sl, r3
 800e2d0:	0c12      	lsrs	r2, r2, #16
 800e2d2:	f8dc a000 	ldr.w	sl, [ip]
 800e2d6:	fb06 e202 	mla	r2, r6, r2, lr
 800e2da:	fa13 f38a 	uxtah	r3, r3, sl
 800e2de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e2e2:	fa1f fa82 	uxth.w	sl, r2
 800e2e6:	f8dc 2000 	ldr.w	r2, [ip]
 800e2ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e2ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2f8:	4581      	cmp	r9, r0
 800e2fa:	f84c 3b04 	str.w	r3, [ip], #4
 800e2fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e302:	d2db      	bcs.n	800e2bc <quorem+0x44>
 800e304:	f855 300b 	ldr.w	r3, [r5, fp]
 800e308:	b92b      	cbnz	r3, 800e316 <quorem+0x9e>
 800e30a:	9b01      	ldr	r3, [sp, #4]
 800e30c:	3b04      	subs	r3, #4
 800e30e:	429d      	cmp	r5, r3
 800e310:	461a      	mov	r2, r3
 800e312:	d32e      	bcc.n	800e372 <quorem+0xfa>
 800e314:	613c      	str	r4, [r7, #16]
 800e316:	4638      	mov	r0, r7
 800e318:	f001 fa78 	bl	800f80c <__mcmp>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	db24      	blt.n	800e36a <quorem+0xf2>
 800e320:	3601      	adds	r6, #1
 800e322:	4628      	mov	r0, r5
 800e324:	f04f 0c00 	mov.w	ip, #0
 800e328:	f858 2b04 	ldr.w	r2, [r8], #4
 800e32c:	f8d0 e000 	ldr.w	lr, [r0]
 800e330:	b293      	uxth	r3, r2
 800e332:	ebac 0303 	sub.w	r3, ip, r3
 800e336:	0c12      	lsrs	r2, r2, #16
 800e338:	fa13 f38e 	uxtah	r3, r3, lr
 800e33c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e344:	b29b      	uxth	r3, r3
 800e346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e34a:	45c1      	cmp	r9, r8
 800e34c:	f840 3b04 	str.w	r3, [r0], #4
 800e350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e354:	d2e8      	bcs.n	800e328 <quorem+0xb0>
 800e356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e35a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e35e:	b922      	cbnz	r2, 800e36a <quorem+0xf2>
 800e360:	3b04      	subs	r3, #4
 800e362:	429d      	cmp	r5, r3
 800e364:	461a      	mov	r2, r3
 800e366:	d30a      	bcc.n	800e37e <quorem+0x106>
 800e368:	613c      	str	r4, [r7, #16]
 800e36a:	4630      	mov	r0, r6
 800e36c:	b003      	add	sp, #12
 800e36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e372:	6812      	ldr	r2, [r2, #0]
 800e374:	3b04      	subs	r3, #4
 800e376:	2a00      	cmp	r2, #0
 800e378:	d1cc      	bne.n	800e314 <quorem+0x9c>
 800e37a:	3c01      	subs	r4, #1
 800e37c:	e7c7      	b.n	800e30e <quorem+0x96>
 800e37e:	6812      	ldr	r2, [r2, #0]
 800e380:	3b04      	subs	r3, #4
 800e382:	2a00      	cmp	r2, #0
 800e384:	d1f0      	bne.n	800e368 <quorem+0xf0>
 800e386:	3c01      	subs	r4, #1
 800e388:	e7eb      	b.n	800e362 <quorem+0xea>
 800e38a:	2000      	movs	r0, #0
 800e38c:	e7ee      	b.n	800e36c <quorem+0xf4>
	...

0800e390 <_dtoa_r>:
 800e390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e394:	ec59 8b10 	vmov	r8, r9, d0
 800e398:	b095      	sub	sp, #84	; 0x54
 800e39a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e39c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e39e:	9107      	str	r1, [sp, #28]
 800e3a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e3a8:	9310      	str	r3, [sp, #64]	; 0x40
 800e3aa:	b975      	cbnz	r5, 800e3ca <_dtoa_r+0x3a>
 800e3ac:	2010      	movs	r0, #16
 800e3ae:	f7ff f8f1 	bl	800d594 <malloc>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	6270      	str	r0, [r6, #36]	; 0x24
 800e3b6:	b920      	cbnz	r0, 800e3c2 <_dtoa_r+0x32>
 800e3b8:	4bab      	ldr	r3, [pc, #684]	; (800e668 <_dtoa_r+0x2d8>)
 800e3ba:	21ea      	movs	r1, #234	; 0xea
 800e3bc:	48ab      	ldr	r0, [pc, #684]	; (800e66c <_dtoa_r+0x2dc>)
 800e3be:	f001 fcd5 	bl	800fd6c <__assert_func>
 800e3c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3c6:	6005      	str	r5, [r0, #0]
 800e3c8:	60c5      	str	r5, [r0, #12]
 800e3ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e3cc:	6819      	ldr	r1, [r3, #0]
 800e3ce:	b151      	cbz	r1, 800e3e6 <_dtoa_r+0x56>
 800e3d0:	685a      	ldr	r2, [r3, #4]
 800e3d2:	604a      	str	r2, [r1, #4]
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	4093      	lsls	r3, r2
 800e3d8:	608b      	str	r3, [r1, #8]
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f000 ffd8 	bl	800f390 <_Bfree>
 800e3e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	f1b9 0300 	subs.w	r3, r9, #0
 800e3ea:	bfbb      	ittet	lt
 800e3ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e3f0:	9303      	strlt	r3, [sp, #12]
 800e3f2:	2300      	movge	r3, #0
 800e3f4:	2201      	movlt	r2, #1
 800e3f6:	bfac      	ite	ge
 800e3f8:	6023      	strge	r3, [r4, #0]
 800e3fa:	6022      	strlt	r2, [r4, #0]
 800e3fc:	4b9c      	ldr	r3, [pc, #624]	; (800e670 <_dtoa_r+0x2e0>)
 800e3fe:	9c03      	ldr	r4, [sp, #12]
 800e400:	43a3      	bics	r3, r4
 800e402:	d11a      	bne.n	800e43a <_dtoa_r+0xaa>
 800e404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e406:	f242 730f 	movw	r3, #9999	; 0x270f
 800e40a:	6013      	str	r3, [r2, #0]
 800e40c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e410:	ea53 0308 	orrs.w	r3, r3, r8
 800e414:	f000 8512 	beq.w	800ee3c <_dtoa_r+0xaac>
 800e418:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e41a:	b953      	cbnz	r3, 800e432 <_dtoa_r+0xa2>
 800e41c:	4b95      	ldr	r3, [pc, #596]	; (800e674 <_dtoa_r+0x2e4>)
 800e41e:	e01f      	b.n	800e460 <_dtoa_r+0xd0>
 800e420:	4b95      	ldr	r3, [pc, #596]	; (800e678 <_dtoa_r+0x2e8>)
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	3308      	adds	r3, #8
 800e426:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e428:	6013      	str	r3, [r2, #0]
 800e42a:	9800      	ldr	r0, [sp, #0]
 800e42c:	b015      	add	sp, #84	; 0x54
 800e42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e432:	4b90      	ldr	r3, [pc, #576]	; (800e674 <_dtoa_r+0x2e4>)
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	3303      	adds	r3, #3
 800e438:	e7f5      	b.n	800e426 <_dtoa_r+0x96>
 800e43a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e43e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e446:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e44a:	d10b      	bne.n	800e464 <_dtoa_r+0xd4>
 800e44c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e44e:	2301      	movs	r3, #1
 800e450:	6013      	str	r3, [r2, #0]
 800e452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 84ee 	beq.w	800ee36 <_dtoa_r+0xaa6>
 800e45a:	4888      	ldr	r0, [pc, #544]	; (800e67c <_dtoa_r+0x2ec>)
 800e45c:	6018      	str	r0, [r3, #0]
 800e45e:	1e43      	subs	r3, r0, #1
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	e7e2      	b.n	800e42a <_dtoa_r+0x9a>
 800e464:	a913      	add	r1, sp, #76	; 0x4c
 800e466:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e46a:	aa12      	add	r2, sp, #72	; 0x48
 800e46c:	4630      	mov	r0, r6
 800e46e:	f001 fa71 	bl	800f954 <__d2b>
 800e472:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e476:	4605      	mov	r5, r0
 800e478:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e47a:	2900      	cmp	r1, #0
 800e47c:	d047      	beq.n	800e50e <_dtoa_r+0x17e>
 800e47e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e480:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e484:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e488:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e48c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e490:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e494:	2400      	movs	r4, #0
 800e496:	ec43 2b16 	vmov	d6, r2, r3
 800e49a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e49e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e650 <_dtoa_r+0x2c0>
 800e4a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e4a6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e658 <_dtoa_r+0x2c8>
 800e4aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e4ae:	eeb0 7b46 	vmov.f64	d7, d6
 800e4b2:	ee06 1a90 	vmov	s13, r1
 800e4b6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e4ba:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e660 <_dtoa_r+0x2d0>
 800e4be:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e4c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e4c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ce:	ee16 ba90 	vmov	fp, s13
 800e4d2:	9411      	str	r4, [sp, #68]	; 0x44
 800e4d4:	d508      	bpl.n	800e4e8 <_dtoa_r+0x158>
 800e4d6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e4da:	eeb4 6b47 	vcmp.f64	d6, d7
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	bf18      	it	ne
 800e4e4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800e4e8:	f1bb 0f16 	cmp.w	fp, #22
 800e4ec:	d832      	bhi.n	800e554 <_dtoa_r+0x1c4>
 800e4ee:	4b64      	ldr	r3, [pc, #400]	; (800e680 <_dtoa_r+0x2f0>)
 800e4f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e4f4:	ed93 7b00 	vldr	d7, [r3]
 800e4f8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e4fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e504:	d501      	bpl.n	800e50a <_dtoa_r+0x17a>
 800e506:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e50a:	2300      	movs	r3, #0
 800e50c:	e023      	b.n	800e556 <_dtoa_r+0x1c6>
 800e50e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e510:	4401      	add	r1, r0
 800e512:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e516:	2b20      	cmp	r3, #32
 800e518:	bfc3      	ittte	gt
 800e51a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e51e:	fa04 f303 	lslgt.w	r3, r4, r3
 800e522:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e526:	f1c3 0320 	rsble	r3, r3, #32
 800e52a:	bfc6      	itte	gt
 800e52c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e530:	ea43 0308 	orrgt.w	r3, r3, r8
 800e534:	fa08 f303 	lslle.w	r3, r8, r3
 800e538:	ee07 3a90 	vmov	s15, r3
 800e53c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e540:	3901      	subs	r1, #1
 800e542:	ed8d 7b00 	vstr	d7, [sp]
 800e546:	9c01      	ldr	r4, [sp, #4]
 800e548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e54c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e550:	2401      	movs	r4, #1
 800e552:	e7a0      	b.n	800e496 <_dtoa_r+0x106>
 800e554:	2301      	movs	r3, #1
 800e556:	930f      	str	r3, [sp, #60]	; 0x3c
 800e558:	1a43      	subs	r3, r0, r1
 800e55a:	1e5a      	subs	r2, r3, #1
 800e55c:	bf45      	ittet	mi
 800e55e:	f1c3 0301 	rsbmi	r3, r3, #1
 800e562:	9305      	strmi	r3, [sp, #20]
 800e564:	2300      	movpl	r3, #0
 800e566:	2300      	movmi	r3, #0
 800e568:	9206      	str	r2, [sp, #24]
 800e56a:	bf54      	ite	pl
 800e56c:	9305      	strpl	r3, [sp, #20]
 800e56e:	9306      	strmi	r3, [sp, #24]
 800e570:	f1bb 0f00 	cmp.w	fp, #0
 800e574:	db18      	blt.n	800e5a8 <_dtoa_r+0x218>
 800e576:	9b06      	ldr	r3, [sp, #24]
 800e578:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e57c:	445b      	add	r3, fp
 800e57e:	9306      	str	r3, [sp, #24]
 800e580:	2300      	movs	r3, #0
 800e582:	9a07      	ldr	r2, [sp, #28]
 800e584:	2a09      	cmp	r2, #9
 800e586:	d849      	bhi.n	800e61c <_dtoa_r+0x28c>
 800e588:	2a05      	cmp	r2, #5
 800e58a:	bfc4      	itt	gt
 800e58c:	3a04      	subgt	r2, #4
 800e58e:	9207      	strgt	r2, [sp, #28]
 800e590:	9a07      	ldr	r2, [sp, #28]
 800e592:	f1a2 0202 	sub.w	r2, r2, #2
 800e596:	bfcc      	ite	gt
 800e598:	2400      	movgt	r4, #0
 800e59a:	2401      	movle	r4, #1
 800e59c:	2a03      	cmp	r2, #3
 800e59e:	d848      	bhi.n	800e632 <_dtoa_r+0x2a2>
 800e5a0:	e8df f002 	tbb	[pc, r2]
 800e5a4:	3a2c2e0b 	.word	0x3a2c2e0b
 800e5a8:	9b05      	ldr	r3, [sp, #20]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	eba3 030b 	sub.w	r3, r3, fp
 800e5b0:	9305      	str	r3, [sp, #20]
 800e5b2:	920e      	str	r2, [sp, #56]	; 0x38
 800e5b4:	f1cb 0300 	rsb	r3, fp, #0
 800e5b8:	e7e3      	b.n	800e582 <_dtoa_r+0x1f2>
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	9208      	str	r2, [sp, #32]
 800e5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5c0:	2a00      	cmp	r2, #0
 800e5c2:	dc39      	bgt.n	800e638 <_dtoa_r+0x2a8>
 800e5c4:	f04f 0a01 	mov.w	sl, #1
 800e5c8:	46d1      	mov	r9, sl
 800e5ca:	4652      	mov	r2, sl
 800e5cc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e5d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6079      	str	r1, [r7, #4]
 800e5d6:	2004      	movs	r0, #4
 800e5d8:	f100 0c14 	add.w	ip, r0, #20
 800e5dc:	4594      	cmp	ip, r2
 800e5de:	6879      	ldr	r1, [r7, #4]
 800e5e0:	d92f      	bls.n	800e642 <_dtoa_r+0x2b2>
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	930c      	str	r3, [sp, #48]	; 0x30
 800e5e6:	f000 fe93 	bl	800f310 <_Balloc>
 800e5ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5ec:	9000      	str	r0, [sp, #0]
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d149      	bne.n	800e688 <_dtoa_r+0x2f8>
 800e5f4:	4b23      	ldr	r3, [pc, #140]	; (800e684 <_dtoa_r+0x2f4>)
 800e5f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e5fa:	e6df      	b.n	800e3bc <_dtoa_r+0x2c>
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	e7dd      	b.n	800e5bc <_dtoa_r+0x22c>
 800e600:	2200      	movs	r2, #0
 800e602:	9208      	str	r2, [sp, #32]
 800e604:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e606:	eb0b 0a02 	add.w	sl, fp, r2
 800e60a:	f10a 0901 	add.w	r9, sl, #1
 800e60e:	464a      	mov	r2, r9
 800e610:	2a01      	cmp	r2, #1
 800e612:	bfb8      	it	lt
 800e614:	2201      	movlt	r2, #1
 800e616:	e7db      	b.n	800e5d0 <_dtoa_r+0x240>
 800e618:	2201      	movs	r2, #1
 800e61a:	e7f2      	b.n	800e602 <_dtoa_r+0x272>
 800e61c:	2401      	movs	r4, #1
 800e61e:	2200      	movs	r2, #0
 800e620:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e624:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e628:	2100      	movs	r1, #0
 800e62a:	46d1      	mov	r9, sl
 800e62c:	2212      	movs	r2, #18
 800e62e:	9109      	str	r1, [sp, #36]	; 0x24
 800e630:	e7ce      	b.n	800e5d0 <_dtoa_r+0x240>
 800e632:	2201      	movs	r2, #1
 800e634:	9208      	str	r2, [sp, #32]
 800e636:	e7f5      	b.n	800e624 <_dtoa_r+0x294>
 800e638:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e63c:	46d1      	mov	r9, sl
 800e63e:	4652      	mov	r2, sl
 800e640:	e7c6      	b.n	800e5d0 <_dtoa_r+0x240>
 800e642:	3101      	adds	r1, #1
 800e644:	6079      	str	r1, [r7, #4]
 800e646:	0040      	lsls	r0, r0, #1
 800e648:	e7c6      	b.n	800e5d8 <_dtoa_r+0x248>
 800e64a:	bf00      	nop
 800e64c:	f3af 8000 	nop.w
 800e650:	636f4361 	.word	0x636f4361
 800e654:	3fd287a7 	.word	0x3fd287a7
 800e658:	8b60c8b3 	.word	0x8b60c8b3
 800e65c:	3fc68a28 	.word	0x3fc68a28
 800e660:	509f79fb 	.word	0x509f79fb
 800e664:	3fd34413 	.word	0x3fd34413
 800e668:	08010a2d 	.word	0x08010a2d
 800e66c:	08010a44 	.word	0x08010a44
 800e670:	7ff00000 	.word	0x7ff00000
 800e674:	08010a29 	.word	0x08010a29
 800e678:	08010a20 	.word	0x08010a20
 800e67c:	080109fd 	.word	0x080109fd
 800e680:	08010ba0 	.word	0x08010ba0
 800e684:	08010aa3 	.word	0x08010aa3
 800e688:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e68a:	9900      	ldr	r1, [sp, #0]
 800e68c:	6011      	str	r1, [r2, #0]
 800e68e:	f1b9 0f0e 	cmp.w	r9, #14
 800e692:	d872      	bhi.n	800e77a <_dtoa_r+0x3ea>
 800e694:	2c00      	cmp	r4, #0
 800e696:	d070      	beq.n	800e77a <_dtoa_r+0x3ea>
 800e698:	f1bb 0f00 	cmp.w	fp, #0
 800e69c:	f340 80a6 	ble.w	800e7ec <_dtoa_r+0x45c>
 800e6a0:	49ca      	ldr	r1, [pc, #808]	; (800e9cc <_dtoa_r+0x63c>)
 800e6a2:	f00b 020f 	and.w	r2, fp, #15
 800e6a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e6aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e6ae:	ed92 7b00 	vldr	d7, [r2]
 800e6b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e6b6:	f000 808d 	beq.w	800e7d4 <_dtoa_r+0x444>
 800e6ba:	4ac5      	ldr	r2, [pc, #788]	; (800e9d0 <_dtoa_r+0x640>)
 800e6bc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e6c0:	ed92 6b08 	vldr	d6, [r2, #32]
 800e6c4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e6c8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e6cc:	f001 010f 	and.w	r1, r1, #15
 800e6d0:	2203      	movs	r2, #3
 800e6d2:	48bf      	ldr	r0, [pc, #764]	; (800e9d0 <_dtoa_r+0x640>)
 800e6d4:	2900      	cmp	r1, #0
 800e6d6:	d17f      	bne.n	800e7d8 <_dtoa_r+0x448>
 800e6d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e6dc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e6e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e6e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e6e6:	2900      	cmp	r1, #0
 800e6e8:	f000 80b2 	beq.w	800e850 <_dtoa_r+0x4c0>
 800e6ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e6f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fc:	f140 80a8 	bpl.w	800e850 <_dtoa_r+0x4c0>
 800e700:	f1b9 0f00 	cmp.w	r9, #0
 800e704:	f000 80a4 	beq.w	800e850 <_dtoa_r+0x4c0>
 800e708:	f1ba 0f00 	cmp.w	sl, #0
 800e70c:	dd31      	ble.n	800e772 <_dtoa_r+0x3e2>
 800e70e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e712:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e716:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e71a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e71e:	3201      	adds	r2, #1
 800e720:	4650      	mov	r0, sl
 800e722:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e726:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e72a:	ee07 2a90 	vmov	s15, r2
 800e72e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e732:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e736:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e73a:	9c03      	ldr	r4, [sp, #12]
 800e73c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e740:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e744:	2800      	cmp	r0, #0
 800e746:	f040 8086 	bne.w	800e856 <_dtoa_r+0x4c6>
 800e74a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e74e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e752:	ec42 1b17 	vmov	d7, r1, r2
 800e756:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75e:	f300 8272 	bgt.w	800ec46 <_dtoa_r+0x8b6>
 800e762:	eeb1 7b47 	vneg.f64	d7, d7
 800e766:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76e:	f100 8267 	bmi.w	800ec40 <_dtoa_r+0x8b0>
 800e772:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e776:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e77a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e77c:	2a00      	cmp	r2, #0
 800e77e:	f2c0 8129 	blt.w	800e9d4 <_dtoa_r+0x644>
 800e782:	f1bb 0f0e 	cmp.w	fp, #14
 800e786:	f300 8125 	bgt.w	800e9d4 <_dtoa_r+0x644>
 800e78a:	4b90      	ldr	r3, [pc, #576]	; (800e9cc <_dtoa_r+0x63c>)
 800e78c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e790:	ed93 6b00 	vldr	d6, [r3]
 800e794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e796:	2b00      	cmp	r3, #0
 800e798:	f280 80c3 	bge.w	800e922 <_dtoa_r+0x592>
 800e79c:	f1b9 0f00 	cmp.w	r9, #0
 800e7a0:	f300 80bf 	bgt.w	800e922 <_dtoa_r+0x592>
 800e7a4:	f040 824c 	bne.w	800ec40 <_dtoa_r+0x8b0>
 800e7a8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e7ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e7b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7bc:	464c      	mov	r4, r9
 800e7be:	464f      	mov	r7, r9
 800e7c0:	f280 8222 	bge.w	800ec08 <_dtoa_r+0x878>
 800e7c4:	f8dd 8000 	ldr.w	r8, [sp]
 800e7c8:	2331      	movs	r3, #49	; 0x31
 800e7ca:	f808 3b01 	strb.w	r3, [r8], #1
 800e7ce:	f10b 0b01 	add.w	fp, fp, #1
 800e7d2:	e21e      	b.n	800ec12 <_dtoa_r+0x882>
 800e7d4:	2202      	movs	r2, #2
 800e7d6:	e77c      	b.n	800e6d2 <_dtoa_r+0x342>
 800e7d8:	07cc      	lsls	r4, r1, #31
 800e7da:	d504      	bpl.n	800e7e6 <_dtoa_r+0x456>
 800e7dc:	ed90 6b00 	vldr	d6, [r0]
 800e7e0:	3201      	adds	r2, #1
 800e7e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7e6:	1049      	asrs	r1, r1, #1
 800e7e8:	3008      	adds	r0, #8
 800e7ea:	e773      	b.n	800e6d4 <_dtoa_r+0x344>
 800e7ec:	d02e      	beq.n	800e84c <_dtoa_r+0x4bc>
 800e7ee:	f1cb 0100 	rsb	r1, fp, #0
 800e7f2:	4a76      	ldr	r2, [pc, #472]	; (800e9cc <_dtoa_r+0x63c>)
 800e7f4:	f001 000f 	and.w	r0, r1, #15
 800e7f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e7fc:	ed92 7b00 	vldr	d7, [r2]
 800e800:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e804:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e808:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e80c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e810:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e814:	486e      	ldr	r0, [pc, #440]	; (800e9d0 <_dtoa_r+0x640>)
 800e816:	1109      	asrs	r1, r1, #4
 800e818:	2400      	movs	r4, #0
 800e81a:	2202      	movs	r2, #2
 800e81c:	b939      	cbnz	r1, 800e82e <_dtoa_r+0x49e>
 800e81e:	2c00      	cmp	r4, #0
 800e820:	f43f af60 	beq.w	800e6e4 <_dtoa_r+0x354>
 800e824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e82c:	e75a      	b.n	800e6e4 <_dtoa_r+0x354>
 800e82e:	07cf      	lsls	r7, r1, #31
 800e830:	d509      	bpl.n	800e846 <_dtoa_r+0x4b6>
 800e832:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e836:	ed90 7b00 	vldr	d7, [r0]
 800e83a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e83e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e842:	3201      	adds	r2, #1
 800e844:	2401      	movs	r4, #1
 800e846:	1049      	asrs	r1, r1, #1
 800e848:	3008      	adds	r0, #8
 800e84a:	e7e7      	b.n	800e81c <_dtoa_r+0x48c>
 800e84c:	2202      	movs	r2, #2
 800e84e:	e749      	b.n	800e6e4 <_dtoa_r+0x354>
 800e850:	465f      	mov	r7, fp
 800e852:	4648      	mov	r0, r9
 800e854:	e765      	b.n	800e722 <_dtoa_r+0x392>
 800e856:	ec42 1b17 	vmov	d7, r1, r2
 800e85a:	4a5c      	ldr	r2, [pc, #368]	; (800e9cc <_dtoa_r+0x63c>)
 800e85c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e860:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e864:	9a00      	ldr	r2, [sp, #0]
 800e866:	1814      	adds	r4, r2, r0
 800e868:	9a08      	ldr	r2, [sp, #32]
 800e86a:	b352      	cbz	r2, 800e8c2 <_dtoa_r+0x532>
 800e86c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e870:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e874:	f8dd 8000 	ldr.w	r8, [sp]
 800e878:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e87c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e880:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e884:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e888:	ee14 2a90 	vmov	r2, s9
 800e88c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e890:	3230      	adds	r2, #48	; 0x30
 800e892:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89e:	f808 2b01 	strb.w	r2, [r8], #1
 800e8a2:	d439      	bmi.n	800e918 <_dtoa_r+0x588>
 800e8a4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e8a8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b0:	d472      	bmi.n	800e998 <_dtoa_r+0x608>
 800e8b2:	45a0      	cmp	r8, r4
 800e8b4:	f43f af5d 	beq.w	800e772 <_dtoa_r+0x3e2>
 800e8b8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e8bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e8c0:	e7e0      	b.n	800e884 <_dtoa_r+0x4f4>
 800e8c2:	f8dd 8000 	ldr.w	r8, [sp]
 800e8c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e8ca:	4621      	mov	r1, r4
 800e8cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e8d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e8d4:	ee14 2a90 	vmov	r2, s9
 800e8d8:	3230      	adds	r2, #48	; 0x30
 800e8da:	f808 2b01 	strb.w	r2, [r8], #1
 800e8de:	45a0      	cmp	r8, r4
 800e8e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e8e4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e8e8:	d118      	bne.n	800e91c <_dtoa_r+0x58c>
 800e8ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e8ee:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e8f2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8fa:	dc4d      	bgt.n	800e998 <_dtoa_r+0x608>
 800e8fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e900:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e908:	f57f af33 	bpl.w	800e772 <_dtoa_r+0x3e2>
 800e90c:	4688      	mov	r8, r1
 800e90e:	3901      	subs	r1, #1
 800e910:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e914:	2b30      	cmp	r3, #48	; 0x30
 800e916:	d0f9      	beq.n	800e90c <_dtoa_r+0x57c>
 800e918:	46bb      	mov	fp, r7
 800e91a:	e02a      	b.n	800e972 <_dtoa_r+0x5e2>
 800e91c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e920:	e7d6      	b.n	800e8d0 <_dtoa_r+0x540>
 800e922:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e926:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e92a:	f8dd 8000 	ldr.w	r8, [sp]
 800e92e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e932:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e936:	ee15 3a10 	vmov	r3, s10
 800e93a:	3330      	adds	r3, #48	; 0x30
 800e93c:	f808 3b01 	strb.w	r3, [r8], #1
 800e940:	9b00      	ldr	r3, [sp, #0]
 800e942:	eba8 0303 	sub.w	r3, r8, r3
 800e946:	4599      	cmp	r9, r3
 800e948:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e94c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e950:	d133      	bne.n	800e9ba <_dtoa_r+0x62a>
 800e952:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e956:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95e:	dc1a      	bgt.n	800e996 <_dtoa_r+0x606>
 800e960:	eeb4 7b46 	vcmp.f64	d7, d6
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	d103      	bne.n	800e972 <_dtoa_r+0x5e2>
 800e96a:	ee15 3a10 	vmov	r3, s10
 800e96e:	07d9      	lsls	r1, r3, #31
 800e970:	d411      	bmi.n	800e996 <_dtoa_r+0x606>
 800e972:	4629      	mov	r1, r5
 800e974:	4630      	mov	r0, r6
 800e976:	f000 fd0b 	bl	800f390 <_Bfree>
 800e97a:	2300      	movs	r3, #0
 800e97c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e97e:	f888 3000 	strb.w	r3, [r8]
 800e982:	f10b 0301 	add.w	r3, fp, #1
 800e986:	6013      	str	r3, [r2, #0]
 800e988:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f43f ad4d 	beq.w	800e42a <_dtoa_r+0x9a>
 800e990:	f8c3 8000 	str.w	r8, [r3]
 800e994:	e549      	b.n	800e42a <_dtoa_r+0x9a>
 800e996:	465f      	mov	r7, fp
 800e998:	4643      	mov	r3, r8
 800e99a:	4698      	mov	r8, r3
 800e99c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9a0:	2a39      	cmp	r2, #57	; 0x39
 800e9a2:	d106      	bne.n	800e9b2 <_dtoa_r+0x622>
 800e9a4:	9a00      	ldr	r2, [sp, #0]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d1f7      	bne.n	800e99a <_dtoa_r+0x60a>
 800e9aa:	9900      	ldr	r1, [sp, #0]
 800e9ac:	2230      	movs	r2, #48	; 0x30
 800e9ae:	3701      	adds	r7, #1
 800e9b0:	700a      	strb	r2, [r1, #0]
 800e9b2:	781a      	ldrb	r2, [r3, #0]
 800e9b4:	3201      	adds	r2, #1
 800e9b6:	701a      	strb	r2, [r3, #0]
 800e9b8:	e7ae      	b.n	800e918 <_dtoa_r+0x588>
 800e9ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e9be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c6:	d1b2      	bne.n	800e92e <_dtoa_r+0x59e>
 800e9c8:	e7d3      	b.n	800e972 <_dtoa_r+0x5e2>
 800e9ca:	bf00      	nop
 800e9cc:	08010ba0 	.word	0x08010ba0
 800e9d0:	08010b78 	.word	0x08010b78
 800e9d4:	9908      	ldr	r1, [sp, #32]
 800e9d6:	2900      	cmp	r1, #0
 800e9d8:	f000 80d1 	beq.w	800eb7e <_dtoa_r+0x7ee>
 800e9dc:	9907      	ldr	r1, [sp, #28]
 800e9de:	2901      	cmp	r1, #1
 800e9e0:	f300 80b4 	bgt.w	800eb4c <_dtoa_r+0x7bc>
 800e9e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e9e6:	2900      	cmp	r1, #0
 800e9e8:	f000 80ac 	beq.w	800eb44 <_dtoa_r+0x7b4>
 800e9ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e9f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e9f4:	461c      	mov	r4, r3
 800e9f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9f8:	9b05      	ldr	r3, [sp, #20]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	9305      	str	r3, [sp, #20]
 800e9fe:	9b06      	ldr	r3, [sp, #24]
 800ea00:	2101      	movs	r1, #1
 800ea02:	4413      	add	r3, r2
 800ea04:	4630      	mov	r0, r6
 800ea06:	9306      	str	r3, [sp, #24]
 800ea08:	f000 fd7e 	bl	800f508 <__i2b>
 800ea0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea0e:	4607      	mov	r7, r0
 800ea10:	f1b8 0f00 	cmp.w	r8, #0
 800ea14:	dd0d      	ble.n	800ea32 <_dtoa_r+0x6a2>
 800ea16:	9a06      	ldr	r2, [sp, #24]
 800ea18:	2a00      	cmp	r2, #0
 800ea1a:	dd0a      	ble.n	800ea32 <_dtoa_r+0x6a2>
 800ea1c:	4542      	cmp	r2, r8
 800ea1e:	9905      	ldr	r1, [sp, #20]
 800ea20:	bfa8      	it	ge
 800ea22:	4642      	movge	r2, r8
 800ea24:	1a89      	subs	r1, r1, r2
 800ea26:	9105      	str	r1, [sp, #20]
 800ea28:	9906      	ldr	r1, [sp, #24]
 800ea2a:	eba8 0802 	sub.w	r8, r8, r2
 800ea2e:	1a8a      	subs	r2, r1, r2
 800ea30:	9206      	str	r2, [sp, #24]
 800ea32:	b303      	cbz	r3, 800ea76 <_dtoa_r+0x6e6>
 800ea34:	9a08      	ldr	r2, [sp, #32]
 800ea36:	2a00      	cmp	r2, #0
 800ea38:	f000 80a6 	beq.w	800eb88 <_dtoa_r+0x7f8>
 800ea3c:	2c00      	cmp	r4, #0
 800ea3e:	dd13      	ble.n	800ea68 <_dtoa_r+0x6d8>
 800ea40:	4639      	mov	r1, r7
 800ea42:	4622      	mov	r2, r4
 800ea44:	4630      	mov	r0, r6
 800ea46:	930c      	str	r3, [sp, #48]	; 0x30
 800ea48:	f000 fe1a 	bl	800f680 <__pow5mult>
 800ea4c:	462a      	mov	r2, r5
 800ea4e:	4601      	mov	r1, r0
 800ea50:	4607      	mov	r7, r0
 800ea52:	4630      	mov	r0, r6
 800ea54:	f000 fd6e 	bl	800f534 <__multiply>
 800ea58:	4629      	mov	r1, r5
 800ea5a:	900a      	str	r0, [sp, #40]	; 0x28
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f000 fc97 	bl	800f390 <_Bfree>
 800ea62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea66:	4615      	mov	r5, r2
 800ea68:	1b1a      	subs	r2, r3, r4
 800ea6a:	d004      	beq.n	800ea76 <_dtoa_r+0x6e6>
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	4630      	mov	r0, r6
 800ea70:	f000 fe06 	bl	800f680 <__pow5mult>
 800ea74:	4605      	mov	r5, r0
 800ea76:	2101      	movs	r1, #1
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f000 fd45 	bl	800f508 <__i2b>
 800ea7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	4604      	mov	r4, r0
 800ea84:	f340 8082 	ble.w	800eb8c <_dtoa_r+0x7fc>
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	f000 fdf7 	bl	800f680 <__pow5mult>
 800ea92:	9b07      	ldr	r3, [sp, #28]
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	4604      	mov	r4, r0
 800ea98:	dd7b      	ble.n	800eb92 <_dtoa_r+0x802>
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ea9e:	6922      	ldr	r2, [r4, #16]
 800eaa0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800eaa4:	6910      	ldr	r0, [r2, #16]
 800eaa6:	f000 fcdf 	bl	800f468 <__hi0bits>
 800eaaa:	f1c0 0020 	rsb	r0, r0, #32
 800eaae:	9b06      	ldr	r3, [sp, #24]
 800eab0:	4418      	add	r0, r3
 800eab2:	f010 001f 	ands.w	r0, r0, #31
 800eab6:	f000 808d 	beq.w	800ebd4 <_dtoa_r+0x844>
 800eaba:	f1c0 0220 	rsb	r2, r0, #32
 800eabe:	2a04      	cmp	r2, #4
 800eac0:	f340 8086 	ble.w	800ebd0 <_dtoa_r+0x840>
 800eac4:	f1c0 001c 	rsb	r0, r0, #28
 800eac8:	9b05      	ldr	r3, [sp, #20]
 800eaca:	4403      	add	r3, r0
 800eacc:	9305      	str	r3, [sp, #20]
 800eace:	9b06      	ldr	r3, [sp, #24]
 800ead0:	4403      	add	r3, r0
 800ead2:	4480      	add	r8, r0
 800ead4:	9306      	str	r3, [sp, #24]
 800ead6:	9b05      	ldr	r3, [sp, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	dd05      	ble.n	800eae8 <_dtoa_r+0x758>
 800eadc:	4629      	mov	r1, r5
 800eade:	461a      	mov	r2, r3
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 fe27 	bl	800f734 <__lshift>
 800eae6:	4605      	mov	r5, r0
 800eae8:	9b06      	ldr	r3, [sp, #24]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	dd05      	ble.n	800eafa <_dtoa_r+0x76a>
 800eaee:	4621      	mov	r1, r4
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f000 fe1e 	bl	800f734 <__lshift>
 800eaf8:	4604      	mov	r4, r0
 800eafa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d06b      	beq.n	800ebd8 <_dtoa_r+0x848>
 800eb00:	4621      	mov	r1, r4
 800eb02:	4628      	mov	r0, r5
 800eb04:	f000 fe82 	bl	800f80c <__mcmp>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	da65      	bge.n	800ebd8 <_dtoa_r+0x848>
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	4629      	mov	r1, r5
 800eb10:	220a      	movs	r2, #10
 800eb12:	4630      	mov	r0, r6
 800eb14:	f000 fc5e 	bl	800f3d4 <__multadd>
 800eb18:	9b08      	ldr	r3, [sp, #32]
 800eb1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800eb1e:	4605      	mov	r5, r0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f000 8192 	beq.w	800ee4a <_dtoa_r+0xaba>
 800eb26:	4639      	mov	r1, r7
 800eb28:	2300      	movs	r3, #0
 800eb2a:	220a      	movs	r2, #10
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f000 fc51 	bl	800f3d4 <__multadd>
 800eb32:	f1ba 0f00 	cmp.w	sl, #0
 800eb36:	4607      	mov	r7, r0
 800eb38:	f300 808e 	bgt.w	800ec58 <_dtoa_r+0x8c8>
 800eb3c:	9b07      	ldr	r3, [sp, #28]
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	dc51      	bgt.n	800ebe6 <_dtoa_r+0x856>
 800eb42:	e089      	b.n	800ec58 <_dtoa_r+0x8c8>
 800eb44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb4a:	e751      	b.n	800e9f0 <_dtoa_r+0x660>
 800eb4c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800eb50:	42a3      	cmp	r3, r4
 800eb52:	bfbf      	itttt	lt
 800eb54:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800eb56:	1ae3      	sublt	r3, r4, r3
 800eb58:	18d2      	addlt	r2, r2, r3
 800eb5a:	4613      	movlt	r3, r2
 800eb5c:	bfb7      	itett	lt
 800eb5e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eb60:	1b1c      	subge	r4, r3, r4
 800eb62:	4623      	movlt	r3, r4
 800eb64:	2400      	movlt	r4, #0
 800eb66:	f1b9 0f00 	cmp.w	r9, #0
 800eb6a:	bfb5      	itete	lt
 800eb6c:	9a05      	ldrlt	r2, [sp, #20]
 800eb6e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800eb72:	eba2 0809 	sublt.w	r8, r2, r9
 800eb76:	464a      	movge	r2, r9
 800eb78:	bfb8      	it	lt
 800eb7a:	2200      	movlt	r2, #0
 800eb7c:	e73b      	b.n	800e9f6 <_dtoa_r+0x666>
 800eb7e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800eb82:	9f08      	ldr	r7, [sp, #32]
 800eb84:	461c      	mov	r4, r3
 800eb86:	e743      	b.n	800ea10 <_dtoa_r+0x680>
 800eb88:	461a      	mov	r2, r3
 800eb8a:	e76f      	b.n	800ea6c <_dtoa_r+0x6dc>
 800eb8c:	9b07      	ldr	r3, [sp, #28]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	dc18      	bgt.n	800ebc4 <_dtoa_r+0x834>
 800eb92:	9b02      	ldr	r3, [sp, #8]
 800eb94:	b9b3      	cbnz	r3, 800ebc4 <_dtoa_r+0x834>
 800eb96:	9b03      	ldr	r3, [sp, #12]
 800eb98:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800eb9c:	b9a2      	cbnz	r2, 800ebc8 <_dtoa_r+0x838>
 800eb9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800eba2:	0d12      	lsrs	r2, r2, #20
 800eba4:	0512      	lsls	r2, r2, #20
 800eba6:	b18a      	cbz	r2, 800ebcc <_dtoa_r+0x83c>
 800eba8:	9b05      	ldr	r3, [sp, #20]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	9305      	str	r3, [sp, #20]
 800ebae:	9b06      	ldr	r3, [sp, #24]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	9306      	str	r3, [sp, #24]
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ebb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f47f af6f 	bne.w	800ea9e <_dtoa_r+0x70e>
 800ebc0:	2001      	movs	r0, #1
 800ebc2:	e774      	b.n	800eaae <_dtoa_r+0x71e>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	e7f6      	b.n	800ebb6 <_dtoa_r+0x826>
 800ebc8:	9b02      	ldr	r3, [sp, #8]
 800ebca:	e7f4      	b.n	800ebb6 <_dtoa_r+0x826>
 800ebcc:	920a      	str	r2, [sp, #40]	; 0x28
 800ebce:	e7f3      	b.n	800ebb8 <_dtoa_r+0x828>
 800ebd0:	d081      	beq.n	800ead6 <_dtoa_r+0x746>
 800ebd2:	4610      	mov	r0, r2
 800ebd4:	301c      	adds	r0, #28
 800ebd6:	e777      	b.n	800eac8 <_dtoa_r+0x738>
 800ebd8:	f1b9 0f00 	cmp.w	r9, #0
 800ebdc:	dc37      	bgt.n	800ec4e <_dtoa_r+0x8be>
 800ebde:	9b07      	ldr	r3, [sp, #28]
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	dd34      	ble.n	800ec4e <_dtoa_r+0x8be>
 800ebe4:	46ca      	mov	sl, r9
 800ebe6:	f1ba 0f00 	cmp.w	sl, #0
 800ebea:	d10d      	bne.n	800ec08 <_dtoa_r+0x878>
 800ebec:	4621      	mov	r1, r4
 800ebee:	4653      	mov	r3, sl
 800ebf0:	2205      	movs	r2, #5
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f000 fbee 	bl	800f3d4 <__multadd>
 800ebf8:	4601      	mov	r1, r0
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f000 fe05 	bl	800f80c <__mcmp>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f73f adde 	bgt.w	800e7c4 <_dtoa_r+0x434>
 800ec08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec0a:	f8dd 8000 	ldr.w	r8, [sp]
 800ec0e:	ea6f 0b03 	mvn.w	fp, r3
 800ec12:	f04f 0900 	mov.w	r9, #0
 800ec16:	4621      	mov	r1, r4
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f000 fbb9 	bl	800f390 <_Bfree>
 800ec1e:	2f00      	cmp	r7, #0
 800ec20:	f43f aea7 	beq.w	800e972 <_dtoa_r+0x5e2>
 800ec24:	f1b9 0f00 	cmp.w	r9, #0
 800ec28:	d005      	beq.n	800ec36 <_dtoa_r+0x8a6>
 800ec2a:	45b9      	cmp	r9, r7
 800ec2c:	d003      	beq.n	800ec36 <_dtoa_r+0x8a6>
 800ec2e:	4649      	mov	r1, r9
 800ec30:	4630      	mov	r0, r6
 800ec32:	f000 fbad 	bl	800f390 <_Bfree>
 800ec36:	4639      	mov	r1, r7
 800ec38:	4630      	mov	r0, r6
 800ec3a:	f000 fba9 	bl	800f390 <_Bfree>
 800ec3e:	e698      	b.n	800e972 <_dtoa_r+0x5e2>
 800ec40:	2400      	movs	r4, #0
 800ec42:	4627      	mov	r7, r4
 800ec44:	e7e0      	b.n	800ec08 <_dtoa_r+0x878>
 800ec46:	46bb      	mov	fp, r7
 800ec48:	4604      	mov	r4, r0
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	e5ba      	b.n	800e7c4 <_dtoa_r+0x434>
 800ec4e:	9b08      	ldr	r3, [sp, #32]
 800ec50:	46ca      	mov	sl, r9
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f000 8100 	beq.w	800ee58 <_dtoa_r+0xac8>
 800ec58:	f1b8 0f00 	cmp.w	r8, #0
 800ec5c:	dd05      	ble.n	800ec6a <_dtoa_r+0x8da>
 800ec5e:	4639      	mov	r1, r7
 800ec60:	4642      	mov	r2, r8
 800ec62:	4630      	mov	r0, r6
 800ec64:	f000 fd66 	bl	800f734 <__lshift>
 800ec68:	4607      	mov	r7, r0
 800ec6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d05d      	beq.n	800ed2c <_dtoa_r+0x99c>
 800ec70:	6879      	ldr	r1, [r7, #4]
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 fb4c 	bl	800f310 <_Balloc>
 800ec78:	4680      	mov	r8, r0
 800ec7a:	b928      	cbnz	r0, 800ec88 <_dtoa_r+0x8f8>
 800ec7c:	4b82      	ldr	r3, [pc, #520]	; (800ee88 <_dtoa_r+0xaf8>)
 800ec7e:	4602      	mov	r2, r0
 800ec80:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ec84:	f7ff bb9a 	b.w	800e3bc <_dtoa_r+0x2c>
 800ec88:	693a      	ldr	r2, [r7, #16]
 800ec8a:	3202      	adds	r2, #2
 800ec8c:	0092      	lsls	r2, r2, #2
 800ec8e:	f107 010c 	add.w	r1, r7, #12
 800ec92:	300c      	adds	r0, #12
 800ec94:	f000 fb22 	bl	800f2dc <memcpy>
 800ec98:	2201      	movs	r2, #1
 800ec9a:	4641      	mov	r1, r8
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f000 fd49 	bl	800f734 <__lshift>
 800eca2:	9b00      	ldr	r3, [sp, #0]
 800eca4:	3301      	adds	r3, #1
 800eca6:	9305      	str	r3, [sp, #20]
 800eca8:	9b00      	ldr	r3, [sp, #0]
 800ecaa:	4453      	add	r3, sl
 800ecac:	9309      	str	r3, [sp, #36]	; 0x24
 800ecae:	9b02      	ldr	r3, [sp, #8]
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	46b9      	mov	r9, r7
 800ecb6:	9308      	str	r3, [sp, #32]
 800ecb8:	4607      	mov	r7, r0
 800ecba:	9b05      	ldr	r3, [sp, #20]
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	3b01      	subs	r3, #1
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	9302      	str	r3, [sp, #8]
 800ecc4:	f7ff fad8 	bl	800e278 <quorem>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	3330      	adds	r3, #48	; 0x30
 800eccc:	9006      	str	r0, [sp, #24]
 800ecce:	4649      	mov	r1, r9
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	930a      	str	r3, [sp, #40]	; 0x28
 800ecd4:	f000 fd9a 	bl	800f80c <__mcmp>
 800ecd8:	463a      	mov	r2, r7
 800ecda:	4682      	mov	sl, r0
 800ecdc:	4621      	mov	r1, r4
 800ecde:	4630      	mov	r0, r6
 800ece0:	f000 fdb0 	bl	800f844 <__mdiff>
 800ece4:	68c2      	ldr	r2, [r0, #12]
 800ece6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ece8:	4680      	mov	r8, r0
 800ecea:	bb0a      	cbnz	r2, 800ed30 <_dtoa_r+0x9a0>
 800ecec:	4601      	mov	r1, r0
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f000 fd8c 	bl	800f80c <__mcmp>
 800ecf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	4641      	mov	r1, r8
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	920e      	str	r2, [sp, #56]	; 0x38
 800ecfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ed00:	f000 fb46 	bl	800f390 <_Bfree>
 800ed04:	9b07      	ldr	r3, [sp, #28]
 800ed06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ed08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ed0c:	ea43 0102 	orr.w	r1, r3, r2
 800ed10:	9b08      	ldr	r3, [sp, #32]
 800ed12:	430b      	orrs	r3, r1
 800ed14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed16:	d10d      	bne.n	800ed34 <_dtoa_r+0x9a4>
 800ed18:	2b39      	cmp	r3, #57	; 0x39
 800ed1a:	d029      	beq.n	800ed70 <_dtoa_r+0x9e0>
 800ed1c:	f1ba 0f00 	cmp.w	sl, #0
 800ed20:	dd01      	ble.n	800ed26 <_dtoa_r+0x996>
 800ed22:	9b06      	ldr	r3, [sp, #24]
 800ed24:	3331      	adds	r3, #49	; 0x31
 800ed26:	9a02      	ldr	r2, [sp, #8]
 800ed28:	7013      	strb	r3, [r2, #0]
 800ed2a:	e774      	b.n	800ec16 <_dtoa_r+0x886>
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	e7b8      	b.n	800eca2 <_dtoa_r+0x912>
 800ed30:	2201      	movs	r2, #1
 800ed32:	e7e1      	b.n	800ecf8 <_dtoa_r+0x968>
 800ed34:	f1ba 0f00 	cmp.w	sl, #0
 800ed38:	db06      	blt.n	800ed48 <_dtoa_r+0x9b8>
 800ed3a:	9907      	ldr	r1, [sp, #28]
 800ed3c:	ea41 0a0a 	orr.w	sl, r1, sl
 800ed40:	9908      	ldr	r1, [sp, #32]
 800ed42:	ea5a 0101 	orrs.w	r1, sl, r1
 800ed46:	d120      	bne.n	800ed8a <_dtoa_r+0x9fa>
 800ed48:	2a00      	cmp	r2, #0
 800ed4a:	ddec      	ble.n	800ed26 <_dtoa_r+0x996>
 800ed4c:	4629      	mov	r1, r5
 800ed4e:	2201      	movs	r2, #1
 800ed50:	4630      	mov	r0, r6
 800ed52:	9305      	str	r3, [sp, #20]
 800ed54:	f000 fcee 	bl	800f734 <__lshift>
 800ed58:	4621      	mov	r1, r4
 800ed5a:	4605      	mov	r5, r0
 800ed5c:	f000 fd56 	bl	800f80c <__mcmp>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	9b05      	ldr	r3, [sp, #20]
 800ed64:	dc02      	bgt.n	800ed6c <_dtoa_r+0x9dc>
 800ed66:	d1de      	bne.n	800ed26 <_dtoa_r+0x996>
 800ed68:	07da      	lsls	r2, r3, #31
 800ed6a:	d5dc      	bpl.n	800ed26 <_dtoa_r+0x996>
 800ed6c:	2b39      	cmp	r3, #57	; 0x39
 800ed6e:	d1d8      	bne.n	800ed22 <_dtoa_r+0x992>
 800ed70:	9a02      	ldr	r2, [sp, #8]
 800ed72:	2339      	movs	r3, #57	; 0x39
 800ed74:	7013      	strb	r3, [r2, #0]
 800ed76:	4643      	mov	r3, r8
 800ed78:	4698      	mov	r8, r3
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ed80:	2a39      	cmp	r2, #57	; 0x39
 800ed82:	d051      	beq.n	800ee28 <_dtoa_r+0xa98>
 800ed84:	3201      	adds	r2, #1
 800ed86:	701a      	strb	r2, [r3, #0]
 800ed88:	e745      	b.n	800ec16 <_dtoa_r+0x886>
 800ed8a:	2a00      	cmp	r2, #0
 800ed8c:	dd03      	ble.n	800ed96 <_dtoa_r+0xa06>
 800ed8e:	2b39      	cmp	r3, #57	; 0x39
 800ed90:	d0ee      	beq.n	800ed70 <_dtoa_r+0x9e0>
 800ed92:	3301      	adds	r3, #1
 800ed94:	e7c7      	b.n	800ed26 <_dtoa_r+0x996>
 800ed96:	9a05      	ldr	r2, [sp, #20]
 800ed98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ed9e:	428a      	cmp	r2, r1
 800eda0:	d02b      	beq.n	800edfa <_dtoa_r+0xa6a>
 800eda2:	4629      	mov	r1, r5
 800eda4:	2300      	movs	r3, #0
 800eda6:	220a      	movs	r2, #10
 800eda8:	4630      	mov	r0, r6
 800edaa:	f000 fb13 	bl	800f3d4 <__multadd>
 800edae:	45b9      	cmp	r9, r7
 800edb0:	4605      	mov	r5, r0
 800edb2:	f04f 0300 	mov.w	r3, #0
 800edb6:	f04f 020a 	mov.w	r2, #10
 800edba:	4649      	mov	r1, r9
 800edbc:	4630      	mov	r0, r6
 800edbe:	d107      	bne.n	800edd0 <_dtoa_r+0xa40>
 800edc0:	f000 fb08 	bl	800f3d4 <__multadd>
 800edc4:	4681      	mov	r9, r0
 800edc6:	4607      	mov	r7, r0
 800edc8:	9b05      	ldr	r3, [sp, #20]
 800edca:	3301      	adds	r3, #1
 800edcc:	9305      	str	r3, [sp, #20]
 800edce:	e774      	b.n	800ecba <_dtoa_r+0x92a>
 800edd0:	f000 fb00 	bl	800f3d4 <__multadd>
 800edd4:	4639      	mov	r1, r7
 800edd6:	4681      	mov	r9, r0
 800edd8:	2300      	movs	r3, #0
 800edda:	220a      	movs	r2, #10
 800eddc:	4630      	mov	r0, r6
 800edde:	f000 faf9 	bl	800f3d4 <__multadd>
 800ede2:	4607      	mov	r7, r0
 800ede4:	e7f0      	b.n	800edc8 <_dtoa_r+0xa38>
 800ede6:	f1ba 0f00 	cmp.w	sl, #0
 800edea:	9a00      	ldr	r2, [sp, #0]
 800edec:	bfcc      	ite	gt
 800edee:	46d0      	movgt	r8, sl
 800edf0:	f04f 0801 	movle.w	r8, #1
 800edf4:	4490      	add	r8, r2
 800edf6:	f04f 0900 	mov.w	r9, #0
 800edfa:	4629      	mov	r1, r5
 800edfc:	2201      	movs	r2, #1
 800edfe:	4630      	mov	r0, r6
 800ee00:	9302      	str	r3, [sp, #8]
 800ee02:	f000 fc97 	bl	800f734 <__lshift>
 800ee06:	4621      	mov	r1, r4
 800ee08:	4605      	mov	r5, r0
 800ee0a:	f000 fcff 	bl	800f80c <__mcmp>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	dcb1      	bgt.n	800ed76 <_dtoa_r+0x9e6>
 800ee12:	d102      	bne.n	800ee1a <_dtoa_r+0xa8a>
 800ee14:	9b02      	ldr	r3, [sp, #8]
 800ee16:	07db      	lsls	r3, r3, #31
 800ee18:	d4ad      	bmi.n	800ed76 <_dtoa_r+0x9e6>
 800ee1a:	4643      	mov	r3, r8
 800ee1c:	4698      	mov	r8, r3
 800ee1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee22:	2a30      	cmp	r2, #48	; 0x30
 800ee24:	d0fa      	beq.n	800ee1c <_dtoa_r+0xa8c>
 800ee26:	e6f6      	b.n	800ec16 <_dtoa_r+0x886>
 800ee28:	9a00      	ldr	r2, [sp, #0]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d1a4      	bne.n	800ed78 <_dtoa_r+0x9e8>
 800ee2e:	f10b 0b01 	add.w	fp, fp, #1
 800ee32:	2331      	movs	r3, #49	; 0x31
 800ee34:	e778      	b.n	800ed28 <_dtoa_r+0x998>
 800ee36:	4b15      	ldr	r3, [pc, #84]	; (800ee8c <_dtoa_r+0xafc>)
 800ee38:	f7ff bb12 	b.w	800e460 <_dtoa_r+0xd0>
 800ee3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f47f aaee 	bne.w	800e420 <_dtoa_r+0x90>
 800ee44:	4b12      	ldr	r3, [pc, #72]	; (800ee90 <_dtoa_r+0xb00>)
 800ee46:	f7ff bb0b 	b.w	800e460 <_dtoa_r+0xd0>
 800ee4a:	f1ba 0f00 	cmp.w	sl, #0
 800ee4e:	dc03      	bgt.n	800ee58 <_dtoa_r+0xac8>
 800ee50:	9b07      	ldr	r3, [sp, #28]
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	f73f aec7 	bgt.w	800ebe6 <_dtoa_r+0x856>
 800ee58:	f8dd 8000 	ldr.w	r8, [sp]
 800ee5c:	4621      	mov	r1, r4
 800ee5e:	4628      	mov	r0, r5
 800ee60:	f7ff fa0a 	bl	800e278 <quorem>
 800ee64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ee68:	f808 3b01 	strb.w	r3, [r8], #1
 800ee6c:	9a00      	ldr	r2, [sp, #0]
 800ee6e:	eba8 0202 	sub.w	r2, r8, r2
 800ee72:	4592      	cmp	sl, r2
 800ee74:	ddb7      	ble.n	800ede6 <_dtoa_r+0xa56>
 800ee76:	4629      	mov	r1, r5
 800ee78:	2300      	movs	r3, #0
 800ee7a:	220a      	movs	r2, #10
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	f000 faa9 	bl	800f3d4 <__multadd>
 800ee82:	4605      	mov	r5, r0
 800ee84:	e7ea      	b.n	800ee5c <_dtoa_r+0xacc>
 800ee86:	bf00      	nop
 800ee88:	08010aa3 	.word	0x08010aa3
 800ee8c:	080109fc 	.word	0x080109fc
 800ee90:	08010a20 	.word	0x08010a20

0800ee94 <__sflush_r>:
 800ee94:	898a      	ldrh	r2, [r1, #12]
 800ee96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	0710      	lsls	r0, r2, #28
 800ee9e:	460c      	mov	r4, r1
 800eea0:	d458      	bmi.n	800ef54 <__sflush_r+0xc0>
 800eea2:	684b      	ldr	r3, [r1, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	dc05      	bgt.n	800eeb4 <__sflush_r+0x20>
 800eea8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	dc02      	bgt.n	800eeb4 <__sflush_r+0x20>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eeb6:	2e00      	cmp	r6, #0
 800eeb8:	d0f9      	beq.n	800eeae <__sflush_r+0x1a>
 800eeba:	2300      	movs	r3, #0
 800eebc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eec0:	682f      	ldr	r7, [r5, #0]
 800eec2:	602b      	str	r3, [r5, #0]
 800eec4:	d032      	beq.n	800ef2c <__sflush_r+0x98>
 800eec6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	075a      	lsls	r2, r3, #29
 800eecc:	d505      	bpl.n	800eeda <__sflush_r+0x46>
 800eece:	6863      	ldr	r3, [r4, #4]
 800eed0:	1ac0      	subs	r0, r0, r3
 800eed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eed4:	b10b      	cbz	r3, 800eeda <__sflush_r+0x46>
 800eed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eed8:	1ac0      	subs	r0, r0, r3
 800eeda:	2300      	movs	r3, #0
 800eedc:	4602      	mov	r2, r0
 800eede:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eee0:	6a21      	ldr	r1, [r4, #32]
 800eee2:	4628      	mov	r0, r5
 800eee4:	47b0      	blx	r6
 800eee6:	1c43      	adds	r3, r0, #1
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	d106      	bne.n	800eefa <__sflush_r+0x66>
 800eeec:	6829      	ldr	r1, [r5, #0]
 800eeee:	291d      	cmp	r1, #29
 800eef0:	d82c      	bhi.n	800ef4c <__sflush_r+0xb8>
 800eef2:	4a2a      	ldr	r2, [pc, #168]	; (800ef9c <__sflush_r+0x108>)
 800eef4:	40ca      	lsrs	r2, r1
 800eef6:	07d6      	lsls	r6, r2, #31
 800eef8:	d528      	bpl.n	800ef4c <__sflush_r+0xb8>
 800eefa:	2200      	movs	r2, #0
 800eefc:	6062      	str	r2, [r4, #4]
 800eefe:	04d9      	lsls	r1, r3, #19
 800ef00:	6922      	ldr	r2, [r4, #16]
 800ef02:	6022      	str	r2, [r4, #0]
 800ef04:	d504      	bpl.n	800ef10 <__sflush_r+0x7c>
 800ef06:	1c42      	adds	r2, r0, #1
 800ef08:	d101      	bne.n	800ef0e <__sflush_r+0x7a>
 800ef0a:	682b      	ldr	r3, [r5, #0]
 800ef0c:	b903      	cbnz	r3, 800ef10 <__sflush_r+0x7c>
 800ef0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef12:	602f      	str	r7, [r5, #0]
 800ef14:	2900      	cmp	r1, #0
 800ef16:	d0ca      	beq.n	800eeae <__sflush_r+0x1a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__sflush_r+0x92>
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7fe fb5f 	bl	800d5e4 <_free_r>
 800ef26:	2000      	movs	r0, #0
 800ef28:	6360      	str	r0, [r4, #52]	; 0x34
 800ef2a:	e7c1      	b.n	800eeb0 <__sflush_r+0x1c>
 800ef2c:	6a21      	ldr	r1, [r4, #32]
 800ef2e:	2301      	movs	r3, #1
 800ef30:	4628      	mov	r0, r5
 800ef32:	47b0      	blx	r6
 800ef34:	1c41      	adds	r1, r0, #1
 800ef36:	d1c7      	bne.n	800eec8 <__sflush_r+0x34>
 800ef38:	682b      	ldr	r3, [r5, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0c4      	beq.n	800eec8 <__sflush_r+0x34>
 800ef3e:	2b1d      	cmp	r3, #29
 800ef40:	d001      	beq.n	800ef46 <__sflush_r+0xb2>
 800ef42:	2b16      	cmp	r3, #22
 800ef44:	d101      	bne.n	800ef4a <__sflush_r+0xb6>
 800ef46:	602f      	str	r7, [r5, #0]
 800ef48:	e7b1      	b.n	800eeae <__sflush_r+0x1a>
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	e7ad      	b.n	800eeb0 <__sflush_r+0x1c>
 800ef54:	690f      	ldr	r7, [r1, #16]
 800ef56:	2f00      	cmp	r7, #0
 800ef58:	d0a9      	beq.n	800eeae <__sflush_r+0x1a>
 800ef5a:	0793      	lsls	r3, r2, #30
 800ef5c:	680e      	ldr	r6, [r1, #0]
 800ef5e:	bf08      	it	eq
 800ef60:	694b      	ldreq	r3, [r1, #20]
 800ef62:	600f      	str	r7, [r1, #0]
 800ef64:	bf18      	it	ne
 800ef66:	2300      	movne	r3, #0
 800ef68:	eba6 0807 	sub.w	r8, r6, r7
 800ef6c:	608b      	str	r3, [r1, #8]
 800ef6e:	f1b8 0f00 	cmp.w	r8, #0
 800ef72:	dd9c      	ble.n	800eeae <__sflush_r+0x1a>
 800ef74:	6a21      	ldr	r1, [r4, #32]
 800ef76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef78:	4643      	mov	r3, r8
 800ef7a:	463a      	mov	r2, r7
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	47b0      	blx	r6
 800ef80:	2800      	cmp	r0, #0
 800ef82:	dc06      	bgt.n	800ef92 <__sflush_r+0xfe>
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef8a:	81a3      	strh	r3, [r4, #12]
 800ef8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef90:	e78e      	b.n	800eeb0 <__sflush_r+0x1c>
 800ef92:	4407      	add	r7, r0
 800ef94:	eba8 0800 	sub.w	r8, r8, r0
 800ef98:	e7e9      	b.n	800ef6e <__sflush_r+0xda>
 800ef9a:	bf00      	nop
 800ef9c:	20400001 	.word	0x20400001

0800efa0 <_fflush_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	690b      	ldr	r3, [r1, #16]
 800efa4:	4605      	mov	r5, r0
 800efa6:	460c      	mov	r4, r1
 800efa8:	b913      	cbnz	r3, 800efb0 <_fflush_r+0x10>
 800efaa:	2500      	movs	r5, #0
 800efac:	4628      	mov	r0, r5
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	b118      	cbz	r0, 800efba <_fflush_r+0x1a>
 800efb2:	6983      	ldr	r3, [r0, #24]
 800efb4:	b90b      	cbnz	r3, 800efba <_fflush_r+0x1a>
 800efb6:	f000 f887 	bl	800f0c8 <__sinit>
 800efba:	4b14      	ldr	r3, [pc, #80]	; (800f00c <_fflush_r+0x6c>)
 800efbc:	429c      	cmp	r4, r3
 800efbe:	d11b      	bne.n	800eff8 <_fflush_r+0x58>
 800efc0:	686c      	ldr	r4, [r5, #4]
 800efc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d0ef      	beq.n	800efaa <_fflush_r+0xa>
 800efca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efcc:	07d0      	lsls	r0, r2, #31
 800efce:	d404      	bmi.n	800efda <_fflush_r+0x3a>
 800efd0:	0599      	lsls	r1, r3, #22
 800efd2:	d402      	bmi.n	800efda <_fflush_r+0x3a>
 800efd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efd6:	f000 f91a 	bl	800f20e <__retarget_lock_acquire_recursive>
 800efda:	4628      	mov	r0, r5
 800efdc:	4621      	mov	r1, r4
 800efde:	f7ff ff59 	bl	800ee94 <__sflush_r>
 800efe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efe4:	07da      	lsls	r2, r3, #31
 800efe6:	4605      	mov	r5, r0
 800efe8:	d4e0      	bmi.n	800efac <_fflush_r+0xc>
 800efea:	89a3      	ldrh	r3, [r4, #12]
 800efec:	059b      	lsls	r3, r3, #22
 800efee:	d4dd      	bmi.n	800efac <_fflush_r+0xc>
 800eff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eff2:	f000 f90d 	bl	800f210 <__retarget_lock_release_recursive>
 800eff6:	e7d9      	b.n	800efac <_fflush_r+0xc>
 800eff8:	4b05      	ldr	r3, [pc, #20]	; (800f010 <_fflush_r+0x70>)
 800effa:	429c      	cmp	r4, r3
 800effc:	d101      	bne.n	800f002 <_fflush_r+0x62>
 800effe:	68ac      	ldr	r4, [r5, #8]
 800f000:	e7df      	b.n	800efc2 <_fflush_r+0x22>
 800f002:	4b04      	ldr	r3, [pc, #16]	; (800f014 <_fflush_r+0x74>)
 800f004:	429c      	cmp	r4, r3
 800f006:	bf08      	it	eq
 800f008:	68ec      	ldreq	r4, [r5, #12]
 800f00a:	e7da      	b.n	800efc2 <_fflush_r+0x22>
 800f00c:	08010ad4 	.word	0x08010ad4
 800f010:	08010af4 	.word	0x08010af4
 800f014:	08010ab4 	.word	0x08010ab4

0800f018 <std>:
 800f018:	2300      	movs	r3, #0
 800f01a:	b510      	push	{r4, lr}
 800f01c:	4604      	mov	r4, r0
 800f01e:	e9c0 3300 	strd	r3, r3, [r0]
 800f022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f026:	6083      	str	r3, [r0, #8]
 800f028:	8181      	strh	r1, [r0, #12]
 800f02a:	6643      	str	r3, [r0, #100]	; 0x64
 800f02c:	81c2      	strh	r2, [r0, #14]
 800f02e:	6183      	str	r3, [r0, #24]
 800f030:	4619      	mov	r1, r3
 800f032:	2208      	movs	r2, #8
 800f034:	305c      	adds	r0, #92	; 0x5c
 800f036:	f7fe fabd 	bl	800d5b4 <memset>
 800f03a:	4b05      	ldr	r3, [pc, #20]	; (800f050 <std+0x38>)
 800f03c:	6263      	str	r3, [r4, #36]	; 0x24
 800f03e:	4b05      	ldr	r3, [pc, #20]	; (800f054 <std+0x3c>)
 800f040:	62a3      	str	r3, [r4, #40]	; 0x28
 800f042:	4b05      	ldr	r3, [pc, #20]	; (800f058 <std+0x40>)
 800f044:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f046:	4b05      	ldr	r3, [pc, #20]	; (800f05c <std+0x44>)
 800f048:	6224      	str	r4, [r4, #32]
 800f04a:	6323      	str	r3, [r4, #48]	; 0x30
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	bf00      	nop
 800f050:	0800fcc1 	.word	0x0800fcc1
 800f054:	0800fce3 	.word	0x0800fce3
 800f058:	0800fd1b 	.word	0x0800fd1b
 800f05c:	0800fd3f 	.word	0x0800fd3f

0800f060 <_cleanup_r>:
 800f060:	4901      	ldr	r1, [pc, #4]	; (800f068 <_cleanup_r+0x8>)
 800f062:	f000 b8af 	b.w	800f1c4 <_fwalk_reent>
 800f066:	bf00      	nop
 800f068:	0800efa1 	.word	0x0800efa1

0800f06c <__sfmoreglue>:
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	1e4a      	subs	r2, r1, #1
 800f070:	2568      	movs	r5, #104	; 0x68
 800f072:	4355      	muls	r5, r2
 800f074:	460e      	mov	r6, r1
 800f076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f07a:	f7fe fb03 	bl	800d684 <_malloc_r>
 800f07e:	4604      	mov	r4, r0
 800f080:	b140      	cbz	r0, 800f094 <__sfmoreglue+0x28>
 800f082:	2100      	movs	r1, #0
 800f084:	e9c0 1600 	strd	r1, r6, [r0]
 800f088:	300c      	adds	r0, #12
 800f08a:	60a0      	str	r0, [r4, #8]
 800f08c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f090:	f7fe fa90 	bl	800d5b4 <memset>
 800f094:	4620      	mov	r0, r4
 800f096:	bd70      	pop	{r4, r5, r6, pc}

0800f098 <__sfp_lock_acquire>:
 800f098:	4801      	ldr	r0, [pc, #4]	; (800f0a0 <__sfp_lock_acquire+0x8>)
 800f09a:	f000 b8b8 	b.w	800f20e <__retarget_lock_acquire_recursive>
 800f09e:	bf00      	nop
 800f0a0:	240011ac 	.word	0x240011ac

0800f0a4 <__sfp_lock_release>:
 800f0a4:	4801      	ldr	r0, [pc, #4]	; (800f0ac <__sfp_lock_release+0x8>)
 800f0a6:	f000 b8b3 	b.w	800f210 <__retarget_lock_release_recursive>
 800f0aa:	bf00      	nop
 800f0ac:	240011ac 	.word	0x240011ac

0800f0b0 <__sinit_lock_acquire>:
 800f0b0:	4801      	ldr	r0, [pc, #4]	; (800f0b8 <__sinit_lock_acquire+0x8>)
 800f0b2:	f000 b8ac 	b.w	800f20e <__retarget_lock_acquire_recursive>
 800f0b6:	bf00      	nop
 800f0b8:	240011a7 	.word	0x240011a7

0800f0bc <__sinit_lock_release>:
 800f0bc:	4801      	ldr	r0, [pc, #4]	; (800f0c4 <__sinit_lock_release+0x8>)
 800f0be:	f000 b8a7 	b.w	800f210 <__retarget_lock_release_recursive>
 800f0c2:	bf00      	nop
 800f0c4:	240011a7 	.word	0x240011a7

0800f0c8 <__sinit>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	f7ff fff0 	bl	800f0b0 <__sinit_lock_acquire>
 800f0d0:	69a3      	ldr	r3, [r4, #24]
 800f0d2:	b11b      	cbz	r3, 800f0dc <__sinit+0x14>
 800f0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0d8:	f7ff bff0 	b.w	800f0bc <__sinit_lock_release>
 800f0dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0e0:	6523      	str	r3, [r4, #80]	; 0x50
 800f0e2:	4b13      	ldr	r3, [pc, #76]	; (800f130 <__sinit+0x68>)
 800f0e4:	4a13      	ldr	r2, [pc, #76]	; (800f134 <__sinit+0x6c>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0ea:	42a3      	cmp	r3, r4
 800f0ec:	bf04      	itt	eq
 800f0ee:	2301      	moveq	r3, #1
 800f0f0:	61a3      	streq	r3, [r4, #24]
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f000 f820 	bl	800f138 <__sfp>
 800f0f8:	6060      	str	r0, [r4, #4]
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f000 f81c 	bl	800f138 <__sfp>
 800f100:	60a0      	str	r0, [r4, #8]
 800f102:	4620      	mov	r0, r4
 800f104:	f000 f818 	bl	800f138 <__sfp>
 800f108:	2200      	movs	r2, #0
 800f10a:	60e0      	str	r0, [r4, #12]
 800f10c:	2104      	movs	r1, #4
 800f10e:	6860      	ldr	r0, [r4, #4]
 800f110:	f7ff ff82 	bl	800f018 <std>
 800f114:	68a0      	ldr	r0, [r4, #8]
 800f116:	2201      	movs	r2, #1
 800f118:	2109      	movs	r1, #9
 800f11a:	f7ff ff7d 	bl	800f018 <std>
 800f11e:	68e0      	ldr	r0, [r4, #12]
 800f120:	2202      	movs	r2, #2
 800f122:	2112      	movs	r1, #18
 800f124:	f7ff ff78 	bl	800f018 <std>
 800f128:	2301      	movs	r3, #1
 800f12a:	61a3      	str	r3, [r4, #24]
 800f12c:	e7d2      	b.n	800f0d4 <__sinit+0xc>
 800f12e:	bf00      	nop
 800f130:	080109e8 	.word	0x080109e8
 800f134:	0800f061 	.word	0x0800f061

0800f138 <__sfp>:
 800f138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13a:	4607      	mov	r7, r0
 800f13c:	f7ff ffac 	bl	800f098 <__sfp_lock_acquire>
 800f140:	4b1e      	ldr	r3, [pc, #120]	; (800f1bc <__sfp+0x84>)
 800f142:	681e      	ldr	r6, [r3, #0]
 800f144:	69b3      	ldr	r3, [r6, #24]
 800f146:	b913      	cbnz	r3, 800f14e <__sfp+0x16>
 800f148:	4630      	mov	r0, r6
 800f14a:	f7ff ffbd 	bl	800f0c8 <__sinit>
 800f14e:	3648      	adds	r6, #72	; 0x48
 800f150:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f154:	3b01      	subs	r3, #1
 800f156:	d503      	bpl.n	800f160 <__sfp+0x28>
 800f158:	6833      	ldr	r3, [r6, #0]
 800f15a:	b30b      	cbz	r3, 800f1a0 <__sfp+0x68>
 800f15c:	6836      	ldr	r6, [r6, #0]
 800f15e:	e7f7      	b.n	800f150 <__sfp+0x18>
 800f160:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f164:	b9d5      	cbnz	r5, 800f19c <__sfp+0x64>
 800f166:	4b16      	ldr	r3, [pc, #88]	; (800f1c0 <__sfp+0x88>)
 800f168:	60e3      	str	r3, [r4, #12]
 800f16a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f16e:	6665      	str	r5, [r4, #100]	; 0x64
 800f170:	f000 f84c 	bl	800f20c <__retarget_lock_init_recursive>
 800f174:	f7ff ff96 	bl	800f0a4 <__sfp_lock_release>
 800f178:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f17c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f180:	6025      	str	r5, [r4, #0]
 800f182:	61a5      	str	r5, [r4, #24]
 800f184:	2208      	movs	r2, #8
 800f186:	4629      	mov	r1, r5
 800f188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f18c:	f7fe fa12 	bl	800d5b4 <memset>
 800f190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f198:	4620      	mov	r0, r4
 800f19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19c:	3468      	adds	r4, #104	; 0x68
 800f19e:	e7d9      	b.n	800f154 <__sfp+0x1c>
 800f1a0:	2104      	movs	r1, #4
 800f1a2:	4638      	mov	r0, r7
 800f1a4:	f7ff ff62 	bl	800f06c <__sfmoreglue>
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	6030      	str	r0, [r6, #0]
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1d5      	bne.n	800f15c <__sfp+0x24>
 800f1b0:	f7ff ff78 	bl	800f0a4 <__sfp_lock_release>
 800f1b4:	230c      	movs	r3, #12
 800f1b6:	603b      	str	r3, [r7, #0]
 800f1b8:	e7ee      	b.n	800f198 <__sfp+0x60>
 800f1ba:	bf00      	nop
 800f1bc:	080109e8 	.word	0x080109e8
 800f1c0:	ffff0001 	.word	0xffff0001

0800f1c4 <_fwalk_reent>:
 800f1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	4688      	mov	r8, r1
 800f1cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1d0:	2700      	movs	r7, #0
 800f1d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1d6:	f1b9 0901 	subs.w	r9, r9, #1
 800f1da:	d505      	bpl.n	800f1e8 <_fwalk_reent+0x24>
 800f1dc:	6824      	ldr	r4, [r4, #0]
 800f1de:	2c00      	cmp	r4, #0
 800f1e0:	d1f7      	bne.n	800f1d2 <_fwalk_reent+0xe>
 800f1e2:	4638      	mov	r0, r7
 800f1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e8:	89ab      	ldrh	r3, [r5, #12]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d907      	bls.n	800f1fe <_fwalk_reent+0x3a>
 800f1ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	d003      	beq.n	800f1fe <_fwalk_reent+0x3a>
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	47c0      	blx	r8
 800f1fc:	4307      	orrs	r7, r0
 800f1fe:	3568      	adds	r5, #104	; 0x68
 800f200:	e7e9      	b.n	800f1d6 <_fwalk_reent+0x12>
	...

0800f204 <_localeconv_r>:
 800f204:	4800      	ldr	r0, [pc, #0]	; (800f208 <_localeconv_r+0x4>)
 800f206:	4770      	bx	lr
 800f208:	24000c48 	.word	0x24000c48

0800f20c <__retarget_lock_init_recursive>:
 800f20c:	4770      	bx	lr

0800f20e <__retarget_lock_acquire_recursive>:
 800f20e:	4770      	bx	lr

0800f210 <__retarget_lock_release_recursive>:
 800f210:	4770      	bx	lr

0800f212 <__swhatbuf_r>:
 800f212:	b570      	push	{r4, r5, r6, lr}
 800f214:	460e      	mov	r6, r1
 800f216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f21a:	2900      	cmp	r1, #0
 800f21c:	b096      	sub	sp, #88	; 0x58
 800f21e:	4614      	mov	r4, r2
 800f220:	461d      	mov	r5, r3
 800f222:	da07      	bge.n	800f234 <__swhatbuf_r+0x22>
 800f224:	2300      	movs	r3, #0
 800f226:	602b      	str	r3, [r5, #0]
 800f228:	89b3      	ldrh	r3, [r6, #12]
 800f22a:	061a      	lsls	r2, r3, #24
 800f22c:	d410      	bmi.n	800f250 <__swhatbuf_r+0x3e>
 800f22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f232:	e00e      	b.n	800f252 <__swhatbuf_r+0x40>
 800f234:	466a      	mov	r2, sp
 800f236:	f000 fdd9 	bl	800fdec <_fstat_r>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	dbf2      	blt.n	800f224 <__swhatbuf_r+0x12>
 800f23e:	9a01      	ldr	r2, [sp, #4]
 800f240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f248:	425a      	negs	r2, r3
 800f24a:	415a      	adcs	r2, r3
 800f24c:	602a      	str	r2, [r5, #0]
 800f24e:	e7ee      	b.n	800f22e <__swhatbuf_r+0x1c>
 800f250:	2340      	movs	r3, #64	; 0x40
 800f252:	2000      	movs	r0, #0
 800f254:	6023      	str	r3, [r4, #0]
 800f256:	b016      	add	sp, #88	; 0x58
 800f258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f25c <__smakebuf_r>:
 800f25c:	898b      	ldrh	r3, [r1, #12]
 800f25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f260:	079d      	lsls	r5, r3, #30
 800f262:	4606      	mov	r6, r0
 800f264:	460c      	mov	r4, r1
 800f266:	d507      	bpl.n	800f278 <__smakebuf_r+0x1c>
 800f268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f26c:	6023      	str	r3, [r4, #0]
 800f26e:	6123      	str	r3, [r4, #16]
 800f270:	2301      	movs	r3, #1
 800f272:	6163      	str	r3, [r4, #20]
 800f274:	b002      	add	sp, #8
 800f276:	bd70      	pop	{r4, r5, r6, pc}
 800f278:	ab01      	add	r3, sp, #4
 800f27a:	466a      	mov	r2, sp
 800f27c:	f7ff ffc9 	bl	800f212 <__swhatbuf_r>
 800f280:	9900      	ldr	r1, [sp, #0]
 800f282:	4605      	mov	r5, r0
 800f284:	4630      	mov	r0, r6
 800f286:	f7fe f9fd 	bl	800d684 <_malloc_r>
 800f28a:	b948      	cbnz	r0, 800f2a0 <__smakebuf_r+0x44>
 800f28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f290:	059a      	lsls	r2, r3, #22
 800f292:	d4ef      	bmi.n	800f274 <__smakebuf_r+0x18>
 800f294:	f023 0303 	bic.w	r3, r3, #3
 800f298:	f043 0302 	orr.w	r3, r3, #2
 800f29c:	81a3      	strh	r3, [r4, #12]
 800f29e:	e7e3      	b.n	800f268 <__smakebuf_r+0xc>
 800f2a0:	4b0d      	ldr	r3, [pc, #52]	; (800f2d8 <__smakebuf_r+0x7c>)
 800f2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2a4:	89a3      	ldrh	r3, [r4, #12]
 800f2a6:	6020      	str	r0, [r4, #0]
 800f2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	9b00      	ldr	r3, [sp, #0]
 800f2b0:	6163      	str	r3, [r4, #20]
 800f2b2:	9b01      	ldr	r3, [sp, #4]
 800f2b4:	6120      	str	r0, [r4, #16]
 800f2b6:	b15b      	cbz	r3, 800f2d0 <__smakebuf_r+0x74>
 800f2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2bc:	4630      	mov	r0, r6
 800f2be:	f000 fda7 	bl	800fe10 <_isatty_r>
 800f2c2:	b128      	cbz	r0, 800f2d0 <__smakebuf_r+0x74>
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	f023 0303 	bic.w	r3, r3, #3
 800f2ca:	f043 0301 	orr.w	r3, r3, #1
 800f2ce:	81a3      	strh	r3, [r4, #12]
 800f2d0:	89a0      	ldrh	r0, [r4, #12]
 800f2d2:	4305      	orrs	r5, r0
 800f2d4:	81a5      	strh	r5, [r4, #12]
 800f2d6:	e7cd      	b.n	800f274 <__smakebuf_r+0x18>
 800f2d8:	0800f061 	.word	0x0800f061

0800f2dc <memcpy>:
 800f2dc:	440a      	add	r2, r1
 800f2de:	4291      	cmp	r1, r2
 800f2e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f2e4:	d100      	bne.n	800f2e8 <memcpy+0xc>
 800f2e6:	4770      	bx	lr
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2f2:	4291      	cmp	r1, r2
 800f2f4:	d1f9      	bne.n	800f2ea <memcpy+0xe>
 800f2f6:	bd10      	pop	{r4, pc}

0800f2f8 <__malloc_lock>:
 800f2f8:	4801      	ldr	r0, [pc, #4]	; (800f300 <__malloc_lock+0x8>)
 800f2fa:	f7ff bf88 	b.w	800f20e <__retarget_lock_acquire_recursive>
 800f2fe:	bf00      	nop
 800f300:	240011a8 	.word	0x240011a8

0800f304 <__malloc_unlock>:
 800f304:	4801      	ldr	r0, [pc, #4]	; (800f30c <__malloc_unlock+0x8>)
 800f306:	f7ff bf83 	b.w	800f210 <__retarget_lock_release_recursive>
 800f30a:	bf00      	nop
 800f30c:	240011a8 	.word	0x240011a8

0800f310 <_Balloc>:
 800f310:	b570      	push	{r4, r5, r6, lr}
 800f312:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f314:	4604      	mov	r4, r0
 800f316:	460d      	mov	r5, r1
 800f318:	b976      	cbnz	r6, 800f338 <_Balloc+0x28>
 800f31a:	2010      	movs	r0, #16
 800f31c:	f7fe f93a 	bl	800d594 <malloc>
 800f320:	4602      	mov	r2, r0
 800f322:	6260      	str	r0, [r4, #36]	; 0x24
 800f324:	b920      	cbnz	r0, 800f330 <_Balloc+0x20>
 800f326:	4b18      	ldr	r3, [pc, #96]	; (800f388 <_Balloc+0x78>)
 800f328:	4818      	ldr	r0, [pc, #96]	; (800f38c <_Balloc+0x7c>)
 800f32a:	2166      	movs	r1, #102	; 0x66
 800f32c:	f000 fd1e 	bl	800fd6c <__assert_func>
 800f330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f334:	6006      	str	r6, [r0, #0]
 800f336:	60c6      	str	r6, [r0, #12]
 800f338:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f33a:	68f3      	ldr	r3, [r6, #12]
 800f33c:	b183      	cbz	r3, 800f360 <_Balloc+0x50>
 800f33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f346:	b9b8      	cbnz	r0, 800f378 <_Balloc+0x68>
 800f348:	2101      	movs	r1, #1
 800f34a:	fa01 f605 	lsl.w	r6, r1, r5
 800f34e:	1d72      	adds	r2, r6, #5
 800f350:	0092      	lsls	r2, r2, #2
 800f352:	4620      	mov	r0, r4
 800f354:	f7fe f936 	bl	800d5c4 <_calloc_r>
 800f358:	b160      	cbz	r0, 800f374 <_Balloc+0x64>
 800f35a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f35e:	e00e      	b.n	800f37e <_Balloc+0x6e>
 800f360:	2221      	movs	r2, #33	; 0x21
 800f362:	2104      	movs	r1, #4
 800f364:	4620      	mov	r0, r4
 800f366:	f7fe f92d 	bl	800d5c4 <_calloc_r>
 800f36a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f36c:	60f0      	str	r0, [r6, #12]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d1e4      	bne.n	800f33e <_Balloc+0x2e>
 800f374:	2000      	movs	r0, #0
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	6802      	ldr	r2, [r0, #0]
 800f37a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f37e:	2300      	movs	r3, #0
 800f380:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f384:	e7f7      	b.n	800f376 <_Balloc+0x66>
 800f386:	bf00      	nop
 800f388:	08010a2d 	.word	0x08010a2d
 800f38c:	08010b14 	.word	0x08010b14

0800f390 <_Bfree>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f394:	4605      	mov	r5, r0
 800f396:	460c      	mov	r4, r1
 800f398:	b976      	cbnz	r6, 800f3b8 <_Bfree+0x28>
 800f39a:	2010      	movs	r0, #16
 800f39c:	f7fe f8fa 	bl	800d594 <malloc>
 800f3a0:	4602      	mov	r2, r0
 800f3a2:	6268      	str	r0, [r5, #36]	; 0x24
 800f3a4:	b920      	cbnz	r0, 800f3b0 <_Bfree+0x20>
 800f3a6:	4b09      	ldr	r3, [pc, #36]	; (800f3cc <_Bfree+0x3c>)
 800f3a8:	4809      	ldr	r0, [pc, #36]	; (800f3d0 <_Bfree+0x40>)
 800f3aa:	218a      	movs	r1, #138	; 0x8a
 800f3ac:	f000 fcde 	bl	800fd6c <__assert_func>
 800f3b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3b4:	6006      	str	r6, [r0, #0]
 800f3b6:	60c6      	str	r6, [r0, #12]
 800f3b8:	b13c      	cbz	r4, 800f3ca <_Bfree+0x3a>
 800f3ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3bc:	6862      	ldr	r2, [r4, #4]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3c4:	6021      	str	r1, [r4, #0]
 800f3c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3ca:	bd70      	pop	{r4, r5, r6, pc}
 800f3cc:	08010a2d 	.word	0x08010a2d
 800f3d0:	08010b14 	.word	0x08010b14

0800f3d4 <__multadd>:
 800f3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d8:	690e      	ldr	r6, [r1, #16]
 800f3da:	4607      	mov	r7, r0
 800f3dc:	4698      	mov	r8, r3
 800f3de:	460c      	mov	r4, r1
 800f3e0:	f101 0014 	add.w	r0, r1, #20
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	6805      	ldr	r5, [r0, #0]
 800f3e8:	b2a9      	uxth	r1, r5
 800f3ea:	fb02 8101 	mla	r1, r2, r1, r8
 800f3ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f3f2:	0c2d      	lsrs	r5, r5, #16
 800f3f4:	fb02 c505 	mla	r5, r2, r5, ip
 800f3f8:	b289      	uxth	r1, r1
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f400:	429e      	cmp	r6, r3
 800f402:	f840 1b04 	str.w	r1, [r0], #4
 800f406:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f40a:	dcec      	bgt.n	800f3e6 <__multadd+0x12>
 800f40c:	f1b8 0f00 	cmp.w	r8, #0
 800f410:	d022      	beq.n	800f458 <__multadd+0x84>
 800f412:	68a3      	ldr	r3, [r4, #8]
 800f414:	42b3      	cmp	r3, r6
 800f416:	dc19      	bgt.n	800f44c <__multadd+0x78>
 800f418:	6861      	ldr	r1, [r4, #4]
 800f41a:	4638      	mov	r0, r7
 800f41c:	3101      	adds	r1, #1
 800f41e:	f7ff ff77 	bl	800f310 <_Balloc>
 800f422:	4605      	mov	r5, r0
 800f424:	b928      	cbnz	r0, 800f432 <__multadd+0x5e>
 800f426:	4602      	mov	r2, r0
 800f428:	4b0d      	ldr	r3, [pc, #52]	; (800f460 <__multadd+0x8c>)
 800f42a:	480e      	ldr	r0, [pc, #56]	; (800f464 <__multadd+0x90>)
 800f42c:	21b5      	movs	r1, #181	; 0xb5
 800f42e:	f000 fc9d 	bl	800fd6c <__assert_func>
 800f432:	6922      	ldr	r2, [r4, #16]
 800f434:	3202      	adds	r2, #2
 800f436:	f104 010c 	add.w	r1, r4, #12
 800f43a:	0092      	lsls	r2, r2, #2
 800f43c:	300c      	adds	r0, #12
 800f43e:	f7ff ff4d 	bl	800f2dc <memcpy>
 800f442:	4621      	mov	r1, r4
 800f444:	4638      	mov	r0, r7
 800f446:	f7ff ffa3 	bl	800f390 <_Bfree>
 800f44a:	462c      	mov	r4, r5
 800f44c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f450:	3601      	adds	r6, #1
 800f452:	f8c3 8014 	str.w	r8, [r3, #20]
 800f456:	6126      	str	r6, [r4, #16]
 800f458:	4620      	mov	r0, r4
 800f45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f45e:	bf00      	nop
 800f460:	08010aa3 	.word	0x08010aa3
 800f464:	08010b14 	.word	0x08010b14

0800f468 <__hi0bits>:
 800f468:	0c03      	lsrs	r3, r0, #16
 800f46a:	041b      	lsls	r3, r3, #16
 800f46c:	b9d3      	cbnz	r3, 800f4a4 <__hi0bits+0x3c>
 800f46e:	0400      	lsls	r0, r0, #16
 800f470:	2310      	movs	r3, #16
 800f472:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f476:	bf04      	itt	eq
 800f478:	0200      	lsleq	r0, r0, #8
 800f47a:	3308      	addeq	r3, #8
 800f47c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f480:	bf04      	itt	eq
 800f482:	0100      	lsleq	r0, r0, #4
 800f484:	3304      	addeq	r3, #4
 800f486:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f48a:	bf04      	itt	eq
 800f48c:	0080      	lsleq	r0, r0, #2
 800f48e:	3302      	addeq	r3, #2
 800f490:	2800      	cmp	r0, #0
 800f492:	db05      	blt.n	800f4a0 <__hi0bits+0x38>
 800f494:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f498:	f103 0301 	add.w	r3, r3, #1
 800f49c:	bf08      	it	eq
 800f49e:	2320      	moveq	r3, #32
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	4770      	bx	lr
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	e7e4      	b.n	800f472 <__hi0bits+0xa>

0800f4a8 <__lo0bits>:
 800f4a8:	6803      	ldr	r3, [r0, #0]
 800f4aa:	f013 0207 	ands.w	r2, r3, #7
 800f4ae:	4601      	mov	r1, r0
 800f4b0:	d00b      	beq.n	800f4ca <__lo0bits+0x22>
 800f4b2:	07da      	lsls	r2, r3, #31
 800f4b4:	d424      	bmi.n	800f500 <__lo0bits+0x58>
 800f4b6:	0798      	lsls	r0, r3, #30
 800f4b8:	bf49      	itett	mi
 800f4ba:	085b      	lsrmi	r3, r3, #1
 800f4bc:	089b      	lsrpl	r3, r3, #2
 800f4be:	2001      	movmi	r0, #1
 800f4c0:	600b      	strmi	r3, [r1, #0]
 800f4c2:	bf5c      	itt	pl
 800f4c4:	600b      	strpl	r3, [r1, #0]
 800f4c6:	2002      	movpl	r0, #2
 800f4c8:	4770      	bx	lr
 800f4ca:	b298      	uxth	r0, r3
 800f4cc:	b9b0      	cbnz	r0, 800f4fc <__lo0bits+0x54>
 800f4ce:	0c1b      	lsrs	r3, r3, #16
 800f4d0:	2010      	movs	r0, #16
 800f4d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f4d6:	bf04      	itt	eq
 800f4d8:	0a1b      	lsreq	r3, r3, #8
 800f4da:	3008      	addeq	r0, #8
 800f4dc:	071a      	lsls	r2, r3, #28
 800f4de:	bf04      	itt	eq
 800f4e0:	091b      	lsreq	r3, r3, #4
 800f4e2:	3004      	addeq	r0, #4
 800f4e4:	079a      	lsls	r2, r3, #30
 800f4e6:	bf04      	itt	eq
 800f4e8:	089b      	lsreq	r3, r3, #2
 800f4ea:	3002      	addeq	r0, #2
 800f4ec:	07da      	lsls	r2, r3, #31
 800f4ee:	d403      	bmi.n	800f4f8 <__lo0bits+0x50>
 800f4f0:	085b      	lsrs	r3, r3, #1
 800f4f2:	f100 0001 	add.w	r0, r0, #1
 800f4f6:	d005      	beq.n	800f504 <__lo0bits+0x5c>
 800f4f8:	600b      	str	r3, [r1, #0]
 800f4fa:	4770      	bx	lr
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	e7e8      	b.n	800f4d2 <__lo0bits+0x2a>
 800f500:	2000      	movs	r0, #0
 800f502:	4770      	bx	lr
 800f504:	2020      	movs	r0, #32
 800f506:	4770      	bx	lr

0800f508 <__i2b>:
 800f508:	b510      	push	{r4, lr}
 800f50a:	460c      	mov	r4, r1
 800f50c:	2101      	movs	r1, #1
 800f50e:	f7ff feff 	bl	800f310 <_Balloc>
 800f512:	4602      	mov	r2, r0
 800f514:	b928      	cbnz	r0, 800f522 <__i2b+0x1a>
 800f516:	4b05      	ldr	r3, [pc, #20]	; (800f52c <__i2b+0x24>)
 800f518:	4805      	ldr	r0, [pc, #20]	; (800f530 <__i2b+0x28>)
 800f51a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f51e:	f000 fc25 	bl	800fd6c <__assert_func>
 800f522:	2301      	movs	r3, #1
 800f524:	6144      	str	r4, [r0, #20]
 800f526:	6103      	str	r3, [r0, #16]
 800f528:	bd10      	pop	{r4, pc}
 800f52a:	bf00      	nop
 800f52c:	08010aa3 	.word	0x08010aa3
 800f530:	08010b14 	.word	0x08010b14

0800f534 <__multiply>:
 800f534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f538:	4614      	mov	r4, r2
 800f53a:	690a      	ldr	r2, [r1, #16]
 800f53c:	6923      	ldr	r3, [r4, #16]
 800f53e:	429a      	cmp	r2, r3
 800f540:	bfb8      	it	lt
 800f542:	460b      	movlt	r3, r1
 800f544:	460d      	mov	r5, r1
 800f546:	bfbc      	itt	lt
 800f548:	4625      	movlt	r5, r4
 800f54a:	461c      	movlt	r4, r3
 800f54c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f550:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f554:	68ab      	ldr	r3, [r5, #8]
 800f556:	6869      	ldr	r1, [r5, #4]
 800f558:	eb0a 0709 	add.w	r7, sl, r9
 800f55c:	42bb      	cmp	r3, r7
 800f55e:	b085      	sub	sp, #20
 800f560:	bfb8      	it	lt
 800f562:	3101      	addlt	r1, #1
 800f564:	f7ff fed4 	bl	800f310 <_Balloc>
 800f568:	b930      	cbnz	r0, 800f578 <__multiply+0x44>
 800f56a:	4602      	mov	r2, r0
 800f56c:	4b42      	ldr	r3, [pc, #264]	; (800f678 <__multiply+0x144>)
 800f56e:	4843      	ldr	r0, [pc, #268]	; (800f67c <__multiply+0x148>)
 800f570:	f240 115d 	movw	r1, #349	; 0x15d
 800f574:	f000 fbfa 	bl	800fd6c <__assert_func>
 800f578:	f100 0614 	add.w	r6, r0, #20
 800f57c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f580:	4633      	mov	r3, r6
 800f582:	2200      	movs	r2, #0
 800f584:	4543      	cmp	r3, r8
 800f586:	d31e      	bcc.n	800f5c6 <__multiply+0x92>
 800f588:	f105 0c14 	add.w	ip, r5, #20
 800f58c:	f104 0314 	add.w	r3, r4, #20
 800f590:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f594:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f598:	9202      	str	r2, [sp, #8]
 800f59a:	ebac 0205 	sub.w	r2, ip, r5
 800f59e:	3a15      	subs	r2, #21
 800f5a0:	f022 0203 	bic.w	r2, r2, #3
 800f5a4:	3204      	adds	r2, #4
 800f5a6:	f105 0115 	add.w	r1, r5, #21
 800f5aa:	458c      	cmp	ip, r1
 800f5ac:	bf38      	it	cc
 800f5ae:	2204      	movcc	r2, #4
 800f5b0:	9201      	str	r2, [sp, #4]
 800f5b2:	9a02      	ldr	r2, [sp, #8]
 800f5b4:	9303      	str	r3, [sp, #12]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d808      	bhi.n	800f5cc <__multiply+0x98>
 800f5ba:	2f00      	cmp	r7, #0
 800f5bc:	dc55      	bgt.n	800f66a <__multiply+0x136>
 800f5be:	6107      	str	r7, [r0, #16]
 800f5c0:	b005      	add	sp, #20
 800f5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c6:	f843 2b04 	str.w	r2, [r3], #4
 800f5ca:	e7db      	b.n	800f584 <__multiply+0x50>
 800f5cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5d0:	f1ba 0f00 	cmp.w	sl, #0
 800f5d4:	d020      	beq.n	800f618 <__multiply+0xe4>
 800f5d6:	f105 0e14 	add.w	lr, r5, #20
 800f5da:	46b1      	mov	r9, r6
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f5e2:	f8d9 b000 	ldr.w	fp, [r9]
 800f5e6:	b2a1      	uxth	r1, r4
 800f5e8:	fa1f fb8b 	uxth.w	fp, fp
 800f5ec:	fb0a b101 	mla	r1, sl, r1, fp
 800f5f0:	4411      	add	r1, r2
 800f5f2:	f8d9 2000 	ldr.w	r2, [r9]
 800f5f6:	0c24      	lsrs	r4, r4, #16
 800f5f8:	0c12      	lsrs	r2, r2, #16
 800f5fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800f5fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f602:	b289      	uxth	r1, r1
 800f604:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f608:	45f4      	cmp	ip, lr
 800f60a:	f849 1b04 	str.w	r1, [r9], #4
 800f60e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f612:	d8e4      	bhi.n	800f5de <__multiply+0xaa>
 800f614:	9901      	ldr	r1, [sp, #4]
 800f616:	5072      	str	r2, [r6, r1]
 800f618:	9a03      	ldr	r2, [sp, #12]
 800f61a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f61e:	3304      	adds	r3, #4
 800f620:	f1b9 0f00 	cmp.w	r9, #0
 800f624:	d01f      	beq.n	800f666 <__multiply+0x132>
 800f626:	6834      	ldr	r4, [r6, #0]
 800f628:	f105 0114 	add.w	r1, r5, #20
 800f62c:	46b6      	mov	lr, r6
 800f62e:	f04f 0a00 	mov.w	sl, #0
 800f632:	880a      	ldrh	r2, [r1, #0]
 800f634:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f638:	fb09 b202 	mla	r2, r9, r2, fp
 800f63c:	4492      	add	sl, r2
 800f63e:	b2a4      	uxth	r4, r4
 800f640:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f644:	f84e 4b04 	str.w	r4, [lr], #4
 800f648:	f851 4b04 	ldr.w	r4, [r1], #4
 800f64c:	f8be 2000 	ldrh.w	r2, [lr]
 800f650:	0c24      	lsrs	r4, r4, #16
 800f652:	fb09 2404 	mla	r4, r9, r4, r2
 800f656:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f65a:	458c      	cmp	ip, r1
 800f65c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f660:	d8e7      	bhi.n	800f632 <__multiply+0xfe>
 800f662:	9a01      	ldr	r2, [sp, #4]
 800f664:	50b4      	str	r4, [r6, r2]
 800f666:	3604      	adds	r6, #4
 800f668:	e7a3      	b.n	800f5b2 <__multiply+0x7e>
 800f66a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1a5      	bne.n	800f5be <__multiply+0x8a>
 800f672:	3f01      	subs	r7, #1
 800f674:	e7a1      	b.n	800f5ba <__multiply+0x86>
 800f676:	bf00      	nop
 800f678:	08010aa3 	.word	0x08010aa3
 800f67c:	08010b14 	.word	0x08010b14

0800f680 <__pow5mult>:
 800f680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f684:	4615      	mov	r5, r2
 800f686:	f012 0203 	ands.w	r2, r2, #3
 800f68a:	4606      	mov	r6, r0
 800f68c:	460f      	mov	r7, r1
 800f68e:	d007      	beq.n	800f6a0 <__pow5mult+0x20>
 800f690:	4c25      	ldr	r4, [pc, #148]	; (800f728 <__pow5mult+0xa8>)
 800f692:	3a01      	subs	r2, #1
 800f694:	2300      	movs	r3, #0
 800f696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f69a:	f7ff fe9b 	bl	800f3d4 <__multadd>
 800f69e:	4607      	mov	r7, r0
 800f6a0:	10ad      	asrs	r5, r5, #2
 800f6a2:	d03d      	beq.n	800f720 <__pow5mult+0xa0>
 800f6a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f6a6:	b97c      	cbnz	r4, 800f6c8 <__pow5mult+0x48>
 800f6a8:	2010      	movs	r0, #16
 800f6aa:	f7fd ff73 	bl	800d594 <malloc>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	6270      	str	r0, [r6, #36]	; 0x24
 800f6b2:	b928      	cbnz	r0, 800f6c0 <__pow5mult+0x40>
 800f6b4:	4b1d      	ldr	r3, [pc, #116]	; (800f72c <__pow5mult+0xac>)
 800f6b6:	481e      	ldr	r0, [pc, #120]	; (800f730 <__pow5mult+0xb0>)
 800f6b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6bc:	f000 fb56 	bl	800fd6c <__assert_func>
 800f6c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6c4:	6004      	str	r4, [r0, #0]
 800f6c6:	60c4      	str	r4, [r0, #12]
 800f6c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6d0:	b94c      	cbnz	r4, 800f6e6 <__pow5mult+0x66>
 800f6d2:	f240 2171 	movw	r1, #625	; 0x271
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f7ff ff16 	bl	800f508 <__i2b>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	f8c8 0008 	str.w	r0, [r8, #8]
 800f6e2:	4604      	mov	r4, r0
 800f6e4:	6003      	str	r3, [r0, #0]
 800f6e6:	f04f 0900 	mov.w	r9, #0
 800f6ea:	07eb      	lsls	r3, r5, #31
 800f6ec:	d50a      	bpl.n	800f704 <__pow5mult+0x84>
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	4622      	mov	r2, r4
 800f6f2:	4630      	mov	r0, r6
 800f6f4:	f7ff ff1e 	bl	800f534 <__multiply>
 800f6f8:	4639      	mov	r1, r7
 800f6fa:	4680      	mov	r8, r0
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f7ff fe47 	bl	800f390 <_Bfree>
 800f702:	4647      	mov	r7, r8
 800f704:	106d      	asrs	r5, r5, #1
 800f706:	d00b      	beq.n	800f720 <__pow5mult+0xa0>
 800f708:	6820      	ldr	r0, [r4, #0]
 800f70a:	b938      	cbnz	r0, 800f71c <__pow5mult+0x9c>
 800f70c:	4622      	mov	r2, r4
 800f70e:	4621      	mov	r1, r4
 800f710:	4630      	mov	r0, r6
 800f712:	f7ff ff0f 	bl	800f534 <__multiply>
 800f716:	6020      	str	r0, [r4, #0]
 800f718:	f8c0 9000 	str.w	r9, [r0]
 800f71c:	4604      	mov	r4, r0
 800f71e:	e7e4      	b.n	800f6ea <__pow5mult+0x6a>
 800f720:	4638      	mov	r0, r7
 800f722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f726:	bf00      	nop
 800f728:	08010c68 	.word	0x08010c68
 800f72c:	08010a2d 	.word	0x08010a2d
 800f730:	08010b14 	.word	0x08010b14

0800f734 <__lshift>:
 800f734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f738:	460c      	mov	r4, r1
 800f73a:	6849      	ldr	r1, [r1, #4]
 800f73c:	6923      	ldr	r3, [r4, #16]
 800f73e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	4607      	mov	r7, r0
 800f746:	4691      	mov	r9, r2
 800f748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f74c:	f108 0601 	add.w	r6, r8, #1
 800f750:	42b3      	cmp	r3, r6
 800f752:	db0b      	blt.n	800f76c <__lshift+0x38>
 800f754:	4638      	mov	r0, r7
 800f756:	f7ff fddb 	bl	800f310 <_Balloc>
 800f75a:	4605      	mov	r5, r0
 800f75c:	b948      	cbnz	r0, 800f772 <__lshift+0x3e>
 800f75e:	4602      	mov	r2, r0
 800f760:	4b28      	ldr	r3, [pc, #160]	; (800f804 <__lshift+0xd0>)
 800f762:	4829      	ldr	r0, [pc, #164]	; (800f808 <__lshift+0xd4>)
 800f764:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f768:	f000 fb00 	bl	800fd6c <__assert_func>
 800f76c:	3101      	adds	r1, #1
 800f76e:	005b      	lsls	r3, r3, #1
 800f770:	e7ee      	b.n	800f750 <__lshift+0x1c>
 800f772:	2300      	movs	r3, #0
 800f774:	f100 0114 	add.w	r1, r0, #20
 800f778:	f100 0210 	add.w	r2, r0, #16
 800f77c:	4618      	mov	r0, r3
 800f77e:	4553      	cmp	r3, sl
 800f780:	db33      	blt.n	800f7ea <__lshift+0xb6>
 800f782:	6920      	ldr	r0, [r4, #16]
 800f784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f788:	f104 0314 	add.w	r3, r4, #20
 800f78c:	f019 091f 	ands.w	r9, r9, #31
 800f790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f794:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f798:	d02b      	beq.n	800f7f2 <__lshift+0xbe>
 800f79a:	f1c9 0e20 	rsb	lr, r9, #32
 800f79e:	468a      	mov	sl, r1
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	fa00 f009 	lsl.w	r0, r0, r9
 800f7a8:	4302      	orrs	r2, r0
 800f7aa:	f84a 2b04 	str.w	r2, [sl], #4
 800f7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7b2:	459c      	cmp	ip, r3
 800f7b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7b8:	d8f3      	bhi.n	800f7a2 <__lshift+0x6e>
 800f7ba:	ebac 0304 	sub.w	r3, ip, r4
 800f7be:	3b15      	subs	r3, #21
 800f7c0:	f023 0303 	bic.w	r3, r3, #3
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	f104 0015 	add.w	r0, r4, #21
 800f7ca:	4584      	cmp	ip, r0
 800f7cc:	bf38      	it	cc
 800f7ce:	2304      	movcc	r3, #4
 800f7d0:	50ca      	str	r2, [r1, r3]
 800f7d2:	b10a      	cbz	r2, 800f7d8 <__lshift+0xa4>
 800f7d4:	f108 0602 	add.w	r6, r8, #2
 800f7d8:	3e01      	subs	r6, #1
 800f7da:	4638      	mov	r0, r7
 800f7dc:	612e      	str	r6, [r5, #16]
 800f7de:	4621      	mov	r1, r4
 800f7e0:	f7ff fdd6 	bl	800f390 <_Bfree>
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	e7c5      	b.n	800f77e <__lshift+0x4a>
 800f7f2:	3904      	subs	r1, #4
 800f7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7fc:	459c      	cmp	ip, r3
 800f7fe:	d8f9      	bhi.n	800f7f4 <__lshift+0xc0>
 800f800:	e7ea      	b.n	800f7d8 <__lshift+0xa4>
 800f802:	bf00      	nop
 800f804:	08010aa3 	.word	0x08010aa3
 800f808:	08010b14 	.word	0x08010b14

0800f80c <__mcmp>:
 800f80c:	b530      	push	{r4, r5, lr}
 800f80e:	6902      	ldr	r2, [r0, #16]
 800f810:	690c      	ldr	r4, [r1, #16]
 800f812:	1b12      	subs	r2, r2, r4
 800f814:	d10e      	bne.n	800f834 <__mcmp+0x28>
 800f816:	f100 0314 	add.w	r3, r0, #20
 800f81a:	3114      	adds	r1, #20
 800f81c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f820:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f824:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f828:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f82c:	42a5      	cmp	r5, r4
 800f82e:	d003      	beq.n	800f838 <__mcmp+0x2c>
 800f830:	d305      	bcc.n	800f83e <__mcmp+0x32>
 800f832:	2201      	movs	r2, #1
 800f834:	4610      	mov	r0, r2
 800f836:	bd30      	pop	{r4, r5, pc}
 800f838:	4283      	cmp	r3, r0
 800f83a:	d3f3      	bcc.n	800f824 <__mcmp+0x18>
 800f83c:	e7fa      	b.n	800f834 <__mcmp+0x28>
 800f83e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f842:	e7f7      	b.n	800f834 <__mcmp+0x28>

0800f844 <__mdiff>:
 800f844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f848:	460c      	mov	r4, r1
 800f84a:	4606      	mov	r6, r0
 800f84c:	4611      	mov	r1, r2
 800f84e:	4620      	mov	r0, r4
 800f850:	4617      	mov	r7, r2
 800f852:	f7ff ffdb 	bl	800f80c <__mcmp>
 800f856:	1e05      	subs	r5, r0, #0
 800f858:	d110      	bne.n	800f87c <__mdiff+0x38>
 800f85a:	4629      	mov	r1, r5
 800f85c:	4630      	mov	r0, r6
 800f85e:	f7ff fd57 	bl	800f310 <_Balloc>
 800f862:	b930      	cbnz	r0, 800f872 <__mdiff+0x2e>
 800f864:	4b39      	ldr	r3, [pc, #228]	; (800f94c <__mdiff+0x108>)
 800f866:	4602      	mov	r2, r0
 800f868:	f240 2132 	movw	r1, #562	; 0x232
 800f86c:	4838      	ldr	r0, [pc, #224]	; (800f950 <__mdiff+0x10c>)
 800f86e:	f000 fa7d 	bl	800fd6c <__assert_func>
 800f872:	2301      	movs	r3, #1
 800f874:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f878:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f87c:	bfa4      	itt	ge
 800f87e:	463b      	movge	r3, r7
 800f880:	4627      	movge	r7, r4
 800f882:	4630      	mov	r0, r6
 800f884:	6879      	ldr	r1, [r7, #4]
 800f886:	bfa6      	itte	ge
 800f888:	461c      	movge	r4, r3
 800f88a:	2500      	movge	r5, #0
 800f88c:	2501      	movlt	r5, #1
 800f88e:	f7ff fd3f 	bl	800f310 <_Balloc>
 800f892:	b920      	cbnz	r0, 800f89e <__mdiff+0x5a>
 800f894:	4b2d      	ldr	r3, [pc, #180]	; (800f94c <__mdiff+0x108>)
 800f896:	4602      	mov	r2, r0
 800f898:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f89c:	e7e6      	b.n	800f86c <__mdiff+0x28>
 800f89e:	693e      	ldr	r6, [r7, #16]
 800f8a0:	60c5      	str	r5, [r0, #12]
 800f8a2:	6925      	ldr	r5, [r4, #16]
 800f8a4:	f107 0114 	add.w	r1, r7, #20
 800f8a8:	f104 0914 	add.w	r9, r4, #20
 800f8ac:	f100 0e14 	add.w	lr, r0, #20
 800f8b0:	f107 0210 	add.w	r2, r7, #16
 800f8b4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f8b8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f8bc:	46f2      	mov	sl, lr
 800f8be:	2700      	movs	r7, #0
 800f8c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f8c8:	fa1f f883 	uxth.w	r8, r3
 800f8cc:	fa17 f78b 	uxtah	r7, r7, fp
 800f8d0:	0c1b      	lsrs	r3, r3, #16
 800f8d2:	eba7 0808 	sub.w	r8, r7, r8
 800f8d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f8da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f8de:	fa1f f888 	uxth.w	r8, r8
 800f8e2:	141f      	asrs	r7, r3, #16
 800f8e4:	454d      	cmp	r5, r9
 800f8e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f8ea:	f84a 3b04 	str.w	r3, [sl], #4
 800f8ee:	d8e7      	bhi.n	800f8c0 <__mdiff+0x7c>
 800f8f0:	1b2b      	subs	r3, r5, r4
 800f8f2:	3b15      	subs	r3, #21
 800f8f4:	f023 0303 	bic.w	r3, r3, #3
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	3415      	adds	r4, #21
 800f8fc:	42a5      	cmp	r5, r4
 800f8fe:	bf38      	it	cc
 800f900:	2304      	movcc	r3, #4
 800f902:	4419      	add	r1, r3
 800f904:	4473      	add	r3, lr
 800f906:	469e      	mov	lr, r3
 800f908:	460d      	mov	r5, r1
 800f90a:	4565      	cmp	r5, ip
 800f90c:	d30e      	bcc.n	800f92c <__mdiff+0xe8>
 800f90e:	f10c 0203 	add.w	r2, ip, #3
 800f912:	1a52      	subs	r2, r2, r1
 800f914:	f022 0203 	bic.w	r2, r2, #3
 800f918:	3903      	subs	r1, #3
 800f91a:	458c      	cmp	ip, r1
 800f91c:	bf38      	it	cc
 800f91e:	2200      	movcc	r2, #0
 800f920:	441a      	add	r2, r3
 800f922:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f926:	b17b      	cbz	r3, 800f948 <__mdiff+0x104>
 800f928:	6106      	str	r6, [r0, #16]
 800f92a:	e7a5      	b.n	800f878 <__mdiff+0x34>
 800f92c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f930:	fa17 f488 	uxtah	r4, r7, r8
 800f934:	1422      	asrs	r2, r4, #16
 800f936:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f93a:	b2a4      	uxth	r4, r4
 800f93c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f940:	f84e 4b04 	str.w	r4, [lr], #4
 800f944:	1417      	asrs	r7, r2, #16
 800f946:	e7e0      	b.n	800f90a <__mdiff+0xc6>
 800f948:	3e01      	subs	r6, #1
 800f94a:	e7ea      	b.n	800f922 <__mdiff+0xde>
 800f94c:	08010aa3 	.word	0x08010aa3
 800f950:	08010b14 	.word	0x08010b14

0800f954 <__d2b>:
 800f954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f958:	4689      	mov	r9, r1
 800f95a:	2101      	movs	r1, #1
 800f95c:	ec57 6b10 	vmov	r6, r7, d0
 800f960:	4690      	mov	r8, r2
 800f962:	f7ff fcd5 	bl	800f310 <_Balloc>
 800f966:	4604      	mov	r4, r0
 800f968:	b930      	cbnz	r0, 800f978 <__d2b+0x24>
 800f96a:	4602      	mov	r2, r0
 800f96c:	4b25      	ldr	r3, [pc, #148]	; (800fa04 <__d2b+0xb0>)
 800f96e:	4826      	ldr	r0, [pc, #152]	; (800fa08 <__d2b+0xb4>)
 800f970:	f240 310a 	movw	r1, #778	; 0x30a
 800f974:	f000 f9fa 	bl	800fd6c <__assert_func>
 800f978:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f97c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f980:	bb35      	cbnz	r5, 800f9d0 <__d2b+0x7c>
 800f982:	2e00      	cmp	r6, #0
 800f984:	9301      	str	r3, [sp, #4]
 800f986:	d028      	beq.n	800f9da <__d2b+0x86>
 800f988:	4668      	mov	r0, sp
 800f98a:	9600      	str	r6, [sp, #0]
 800f98c:	f7ff fd8c 	bl	800f4a8 <__lo0bits>
 800f990:	9900      	ldr	r1, [sp, #0]
 800f992:	b300      	cbz	r0, 800f9d6 <__d2b+0x82>
 800f994:	9a01      	ldr	r2, [sp, #4]
 800f996:	f1c0 0320 	rsb	r3, r0, #32
 800f99a:	fa02 f303 	lsl.w	r3, r2, r3
 800f99e:	430b      	orrs	r3, r1
 800f9a0:	40c2      	lsrs	r2, r0
 800f9a2:	6163      	str	r3, [r4, #20]
 800f9a4:	9201      	str	r2, [sp, #4]
 800f9a6:	9b01      	ldr	r3, [sp, #4]
 800f9a8:	61a3      	str	r3, [r4, #24]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	bf14      	ite	ne
 800f9ae:	2202      	movne	r2, #2
 800f9b0:	2201      	moveq	r2, #1
 800f9b2:	6122      	str	r2, [r4, #16]
 800f9b4:	b1d5      	cbz	r5, 800f9ec <__d2b+0x98>
 800f9b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9ba:	4405      	add	r5, r0
 800f9bc:	f8c9 5000 	str.w	r5, [r9]
 800f9c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9c4:	f8c8 0000 	str.w	r0, [r8]
 800f9c8:	4620      	mov	r0, r4
 800f9ca:	b003      	add	sp, #12
 800f9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f9d4:	e7d5      	b.n	800f982 <__d2b+0x2e>
 800f9d6:	6161      	str	r1, [r4, #20]
 800f9d8:	e7e5      	b.n	800f9a6 <__d2b+0x52>
 800f9da:	a801      	add	r0, sp, #4
 800f9dc:	f7ff fd64 	bl	800f4a8 <__lo0bits>
 800f9e0:	9b01      	ldr	r3, [sp, #4]
 800f9e2:	6163      	str	r3, [r4, #20]
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	6122      	str	r2, [r4, #16]
 800f9e8:	3020      	adds	r0, #32
 800f9ea:	e7e3      	b.n	800f9b4 <__d2b+0x60>
 800f9ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f9f4:	f8c9 0000 	str.w	r0, [r9]
 800f9f8:	6918      	ldr	r0, [r3, #16]
 800f9fa:	f7ff fd35 	bl	800f468 <__hi0bits>
 800f9fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa02:	e7df      	b.n	800f9c4 <__d2b+0x70>
 800fa04:	08010aa3 	.word	0x08010aa3
 800fa08:	08010b14 	.word	0x08010b14

0800fa0c <__sfputc_r>:
 800fa0c:	6893      	ldr	r3, [r2, #8]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	b410      	push	{r4}
 800fa14:	6093      	str	r3, [r2, #8]
 800fa16:	da08      	bge.n	800fa2a <__sfputc_r+0x1e>
 800fa18:	6994      	ldr	r4, [r2, #24]
 800fa1a:	42a3      	cmp	r3, r4
 800fa1c:	db01      	blt.n	800fa22 <__sfputc_r+0x16>
 800fa1e:	290a      	cmp	r1, #10
 800fa20:	d103      	bne.n	800fa2a <__sfputc_r+0x1e>
 800fa22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa26:	f7fe bb67 	b.w	800e0f8 <__swbuf_r>
 800fa2a:	6813      	ldr	r3, [r2, #0]
 800fa2c:	1c58      	adds	r0, r3, #1
 800fa2e:	6010      	str	r0, [r2, #0]
 800fa30:	7019      	strb	r1, [r3, #0]
 800fa32:	4608      	mov	r0, r1
 800fa34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <__sfputs_r>:
 800fa3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3c:	4606      	mov	r6, r0
 800fa3e:	460f      	mov	r7, r1
 800fa40:	4614      	mov	r4, r2
 800fa42:	18d5      	adds	r5, r2, r3
 800fa44:	42ac      	cmp	r4, r5
 800fa46:	d101      	bne.n	800fa4c <__sfputs_r+0x12>
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e007      	b.n	800fa5c <__sfputs_r+0x22>
 800fa4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa50:	463a      	mov	r2, r7
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7ff ffda 	bl	800fa0c <__sfputc_r>
 800fa58:	1c43      	adds	r3, r0, #1
 800fa5a:	d1f3      	bne.n	800fa44 <__sfputs_r+0xa>
 800fa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa60 <_vfiprintf_r>:
 800fa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa64:	460d      	mov	r5, r1
 800fa66:	b09d      	sub	sp, #116	; 0x74
 800fa68:	4614      	mov	r4, r2
 800fa6a:	4698      	mov	r8, r3
 800fa6c:	4606      	mov	r6, r0
 800fa6e:	b118      	cbz	r0, 800fa78 <_vfiprintf_r+0x18>
 800fa70:	6983      	ldr	r3, [r0, #24]
 800fa72:	b90b      	cbnz	r3, 800fa78 <_vfiprintf_r+0x18>
 800fa74:	f7ff fb28 	bl	800f0c8 <__sinit>
 800fa78:	4b89      	ldr	r3, [pc, #548]	; (800fca0 <_vfiprintf_r+0x240>)
 800fa7a:	429d      	cmp	r5, r3
 800fa7c:	d11b      	bne.n	800fab6 <_vfiprintf_r+0x56>
 800fa7e:	6875      	ldr	r5, [r6, #4]
 800fa80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa82:	07d9      	lsls	r1, r3, #31
 800fa84:	d405      	bmi.n	800fa92 <_vfiprintf_r+0x32>
 800fa86:	89ab      	ldrh	r3, [r5, #12]
 800fa88:	059a      	lsls	r2, r3, #22
 800fa8a:	d402      	bmi.n	800fa92 <_vfiprintf_r+0x32>
 800fa8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa8e:	f7ff fbbe 	bl	800f20e <__retarget_lock_acquire_recursive>
 800fa92:	89ab      	ldrh	r3, [r5, #12]
 800fa94:	071b      	lsls	r3, r3, #28
 800fa96:	d501      	bpl.n	800fa9c <_vfiprintf_r+0x3c>
 800fa98:	692b      	ldr	r3, [r5, #16]
 800fa9a:	b9eb      	cbnz	r3, 800fad8 <_vfiprintf_r+0x78>
 800fa9c:	4629      	mov	r1, r5
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f7fe fb7c 	bl	800e19c <__swsetup_r>
 800faa4:	b1c0      	cbz	r0, 800fad8 <_vfiprintf_r+0x78>
 800faa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800faa8:	07dc      	lsls	r4, r3, #31
 800faaa:	d50e      	bpl.n	800faca <_vfiprintf_r+0x6a>
 800faac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fab0:	b01d      	add	sp, #116	; 0x74
 800fab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab6:	4b7b      	ldr	r3, [pc, #492]	; (800fca4 <_vfiprintf_r+0x244>)
 800fab8:	429d      	cmp	r5, r3
 800faba:	d101      	bne.n	800fac0 <_vfiprintf_r+0x60>
 800fabc:	68b5      	ldr	r5, [r6, #8]
 800fabe:	e7df      	b.n	800fa80 <_vfiprintf_r+0x20>
 800fac0:	4b79      	ldr	r3, [pc, #484]	; (800fca8 <_vfiprintf_r+0x248>)
 800fac2:	429d      	cmp	r5, r3
 800fac4:	bf08      	it	eq
 800fac6:	68f5      	ldreq	r5, [r6, #12]
 800fac8:	e7da      	b.n	800fa80 <_vfiprintf_r+0x20>
 800faca:	89ab      	ldrh	r3, [r5, #12]
 800facc:	0598      	lsls	r0, r3, #22
 800face:	d4ed      	bmi.n	800faac <_vfiprintf_r+0x4c>
 800fad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fad2:	f7ff fb9d 	bl	800f210 <__retarget_lock_release_recursive>
 800fad6:	e7e9      	b.n	800faac <_vfiprintf_r+0x4c>
 800fad8:	2300      	movs	r3, #0
 800fada:	9309      	str	r3, [sp, #36]	; 0x24
 800fadc:	2320      	movs	r3, #32
 800fade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fae6:	2330      	movs	r3, #48	; 0x30
 800fae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fcac <_vfiprintf_r+0x24c>
 800faec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800faf0:	f04f 0901 	mov.w	r9, #1
 800faf4:	4623      	mov	r3, r4
 800faf6:	469a      	mov	sl, r3
 800faf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fafc:	b10a      	cbz	r2, 800fb02 <_vfiprintf_r+0xa2>
 800fafe:	2a25      	cmp	r2, #37	; 0x25
 800fb00:	d1f9      	bne.n	800faf6 <_vfiprintf_r+0x96>
 800fb02:	ebba 0b04 	subs.w	fp, sl, r4
 800fb06:	d00b      	beq.n	800fb20 <_vfiprintf_r+0xc0>
 800fb08:	465b      	mov	r3, fp
 800fb0a:	4622      	mov	r2, r4
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	4630      	mov	r0, r6
 800fb10:	f7ff ff93 	bl	800fa3a <__sfputs_r>
 800fb14:	3001      	adds	r0, #1
 800fb16:	f000 80aa 	beq.w	800fc6e <_vfiprintf_r+0x20e>
 800fb1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb1c:	445a      	add	r2, fp
 800fb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800fb20:	f89a 3000 	ldrb.w	r3, [sl]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f000 80a2 	beq.w	800fc6e <_vfiprintf_r+0x20e>
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb34:	f10a 0a01 	add.w	sl, sl, #1
 800fb38:	9304      	str	r3, [sp, #16]
 800fb3a:	9307      	str	r3, [sp, #28]
 800fb3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb40:	931a      	str	r3, [sp, #104]	; 0x68
 800fb42:	4654      	mov	r4, sl
 800fb44:	2205      	movs	r2, #5
 800fb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb4a:	4858      	ldr	r0, [pc, #352]	; (800fcac <_vfiprintf_r+0x24c>)
 800fb4c:	f7f0 fbe8 	bl	8000320 <memchr>
 800fb50:	9a04      	ldr	r2, [sp, #16]
 800fb52:	b9d8      	cbnz	r0, 800fb8c <_vfiprintf_r+0x12c>
 800fb54:	06d1      	lsls	r1, r2, #27
 800fb56:	bf44      	itt	mi
 800fb58:	2320      	movmi	r3, #32
 800fb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb5e:	0713      	lsls	r3, r2, #28
 800fb60:	bf44      	itt	mi
 800fb62:	232b      	movmi	r3, #43	; 0x2b
 800fb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb68:	f89a 3000 	ldrb.w	r3, [sl]
 800fb6c:	2b2a      	cmp	r3, #42	; 0x2a
 800fb6e:	d015      	beq.n	800fb9c <_vfiprintf_r+0x13c>
 800fb70:	9a07      	ldr	r2, [sp, #28]
 800fb72:	4654      	mov	r4, sl
 800fb74:	2000      	movs	r0, #0
 800fb76:	f04f 0c0a 	mov.w	ip, #10
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb80:	3b30      	subs	r3, #48	; 0x30
 800fb82:	2b09      	cmp	r3, #9
 800fb84:	d94e      	bls.n	800fc24 <_vfiprintf_r+0x1c4>
 800fb86:	b1b0      	cbz	r0, 800fbb6 <_vfiprintf_r+0x156>
 800fb88:	9207      	str	r2, [sp, #28]
 800fb8a:	e014      	b.n	800fbb6 <_vfiprintf_r+0x156>
 800fb8c:	eba0 0308 	sub.w	r3, r0, r8
 800fb90:	fa09 f303 	lsl.w	r3, r9, r3
 800fb94:	4313      	orrs	r3, r2
 800fb96:	9304      	str	r3, [sp, #16]
 800fb98:	46a2      	mov	sl, r4
 800fb9a:	e7d2      	b.n	800fb42 <_vfiprintf_r+0xe2>
 800fb9c:	9b03      	ldr	r3, [sp, #12]
 800fb9e:	1d19      	adds	r1, r3, #4
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	9103      	str	r1, [sp, #12]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	bfbb      	ittet	lt
 800fba8:	425b      	neglt	r3, r3
 800fbaa:	f042 0202 	orrlt.w	r2, r2, #2
 800fbae:	9307      	strge	r3, [sp, #28]
 800fbb0:	9307      	strlt	r3, [sp, #28]
 800fbb2:	bfb8      	it	lt
 800fbb4:	9204      	strlt	r2, [sp, #16]
 800fbb6:	7823      	ldrb	r3, [r4, #0]
 800fbb8:	2b2e      	cmp	r3, #46	; 0x2e
 800fbba:	d10c      	bne.n	800fbd6 <_vfiprintf_r+0x176>
 800fbbc:	7863      	ldrb	r3, [r4, #1]
 800fbbe:	2b2a      	cmp	r3, #42	; 0x2a
 800fbc0:	d135      	bne.n	800fc2e <_vfiprintf_r+0x1ce>
 800fbc2:	9b03      	ldr	r3, [sp, #12]
 800fbc4:	1d1a      	adds	r2, r3, #4
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	9203      	str	r2, [sp, #12]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	bfb8      	it	lt
 800fbce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fbd2:	3402      	adds	r4, #2
 800fbd4:	9305      	str	r3, [sp, #20]
 800fbd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fcbc <_vfiprintf_r+0x25c>
 800fbda:	7821      	ldrb	r1, [r4, #0]
 800fbdc:	2203      	movs	r2, #3
 800fbde:	4650      	mov	r0, sl
 800fbe0:	f7f0 fb9e 	bl	8000320 <memchr>
 800fbe4:	b140      	cbz	r0, 800fbf8 <_vfiprintf_r+0x198>
 800fbe6:	2340      	movs	r3, #64	; 0x40
 800fbe8:	eba0 000a 	sub.w	r0, r0, sl
 800fbec:	fa03 f000 	lsl.w	r0, r3, r0
 800fbf0:	9b04      	ldr	r3, [sp, #16]
 800fbf2:	4303      	orrs	r3, r0
 800fbf4:	3401      	adds	r4, #1
 800fbf6:	9304      	str	r3, [sp, #16]
 800fbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbfc:	482c      	ldr	r0, [pc, #176]	; (800fcb0 <_vfiprintf_r+0x250>)
 800fbfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc02:	2206      	movs	r2, #6
 800fc04:	f7f0 fb8c 	bl	8000320 <memchr>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d03f      	beq.n	800fc8c <_vfiprintf_r+0x22c>
 800fc0c:	4b29      	ldr	r3, [pc, #164]	; (800fcb4 <_vfiprintf_r+0x254>)
 800fc0e:	bb1b      	cbnz	r3, 800fc58 <_vfiprintf_r+0x1f8>
 800fc10:	9b03      	ldr	r3, [sp, #12]
 800fc12:	3307      	adds	r3, #7
 800fc14:	f023 0307 	bic.w	r3, r3, #7
 800fc18:	3308      	adds	r3, #8
 800fc1a:	9303      	str	r3, [sp, #12]
 800fc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc1e:	443b      	add	r3, r7
 800fc20:	9309      	str	r3, [sp, #36]	; 0x24
 800fc22:	e767      	b.n	800faf4 <_vfiprintf_r+0x94>
 800fc24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fc28:	460c      	mov	r4, r1
 800fc2a:	2001      	movs	r0, #1
 800fc2c:	e7a5      	b.n	800fb7a <_vfiprintf_r+0x11a>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	3401      	adds	r4, #1
 800fc32:	9305      	str	r3, [sp, #20]
 800fc34:	4619      	mov	r1, r3
 800fc36:	f04f 0c0a 	mov.w	ip, #10
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc40:	3a30      	subs	r2, #48	; 0x30
 800fc42:	2a09      	cmp	r2, #9
 800fc44:	d903      	bls.n	800fc4e <_vfiprintf_r+0x1ee>
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d0c5      	beq.n	800fbd6 <_vfiprintf_r+0x176>
 800fc4a:	9105      	str	r1, [sp, #20]
 800fc4c:	e7c3      	b.n	800fbd6 <_vfiprintf_r+0x176>
 800fc4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc52:	4604      	mov	r4, r0
 800fc54:	2301      	movs	r3, #1
 800fc56:	e7f0      	b.n	800fc3a <_vfiprintf_r+0x1da>
 800fc58:	ab03      	add	r3, sp, #12
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	462a      	mov	r2, r5
 800fc5e:	4b16      	ldr	r3, [pc, #88]	; (800fcb8 <_vfiprintf_r+0x258>)
 800fc60:	a904      	add	r1, sp, #16
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7fd fdf8 	bl	800d858 <_printf_float>
 800fc68:	4607      	mov	r7, r0
 800fc6a:	1c78      	adds	r0, r7, #1
 800fc6c:	d1d6      	bne.n	800fc1c <_vfiprintf_r+0x1bc>
 800fc6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc70:	07d9      	lsls	r1, r3, #31
 800fc72:	d405      	bmi.n	800fc80 <_vfiprintf_r+0x220>
 800fc74:	89ab      	ldrh	r3, [r5, #12]
 800fc76:	059a      	lsls	r2, r3, #22
 800fc78:	d402      	bmi.n	800fc80 <_vfiprintf_r+0x220>
 800fc7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc7c:	f7ff fac8 	bl	800f210 <__retarget_lock_release_recursive>
 800fc80:	89ab      	ldrh	r3, [r5, #12]
 800fc82:	065b      	lsls	r3, r3, #25
 800fc84:	f53f af12 	bmi.w	800faac <_vfiprintf_r+0x4c>
 800fc88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc8a:	e711      	b.n	800fab0 <_vfiprintf_r+0x50>
 800fc8c:	ab03      	add	r3, sp, #12
 800fc8e:	9300      	str	r3, [sp, #0]
 800fc90:	462a      	mov	r2, r5
 800fc92:	4b09      	ldr	r3, [pc, #36]	; (800fcb8 <_vfiprintf_r+0x258>)
 800fc94:	a904      	add	r1, sp, #16
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7fe f86a 	bl	800dd70 <_printf_i>
 800fc9c:	e7e4      	b.n	800fc68 <_vfiprintf_r+0x208>
 800fc9e:	bf00      	nop
 800fca0:	08010ad4 	.word	0x08010ad4
 800fca4:	08010af4 	.word	0x08010af4
 800fca8:	08010ab4 	.word	0x08010ab4
 800fcac:	08010c74 	.word	0x08010c74
 800fcb0:	08010c7e 	.word	0x08010c7e
 800fcb4:	0800d859 	.word	0x0800d859
 800fcb8:	0800fa3b 	.word	0x0800fa3b
 800fcbc:	08010c7a 	.word	0x08010c7a

0800fcc0 <__sread>:
 800fcc0:	b510      	push	{r4, lr}
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcc8:	f000 f8d6 	bl	800fe78 <_read_r>
 800fccc:	2800      	cmp	r0, #0
 800fcce:	bfab      	itete	ge
 800fcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800fcd4:	181b      	addge	r3, r3, r0
 800fcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fcda:	bfac      	ite	ge
 800fcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800fcde:	81a3      	strhlt	r3, [r4, #12]
 800fce0:	bd10      	pop	{r4, pc}

0800fce2 <__swrite>:
 800fce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce6:	461f      	mov	r7, r3
 800fce8:	898b      	ldrh	r3, [r1, #12]
 800fcea:	05db      	lsls	r3, r3, #23
 800fcec:	4605      	mov	r5, r0
 800fcee:	460c      	mov	r4, r1
 800fcf0:	4616      	mov	r6, r2
 800fcf2:	d505      	bpl.n	800fd00 <__swrite+0x1e>
 800fcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcf8:	2302      	movs	r3, #2
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f000 f898 	bl	800fe30 <_lseek_r>
 800fd00:	89a3      	ldrh	r3, [r4, #12]
 800fd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fd0a:	81a3      	strh	r3, [r4, #12]
 800fd0c:	4632      	mov	r2, r6
 800fd0e:	463b      	mov	r3, r7
 800fd10:	4628      	mov	r0, r5
 800fd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd16:	f000 b817 	b.w	800fd48 <_write_r>

0800fd1a <__sseek>:
 800fd1a:	b510      	push	{r4, lr}
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd22:	f000 f885 	bl	800fe30 <_lseek_r>
 800fd26:	1c43      	adds	r3, r0, #1
 800fd28:	89a3      	ldrh	r3, [r4, #12]
 800fd2a:	bf15      	itete	ne
 800fd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fd36:	81a3      	strheq	r3, [r4, #12]
 800fd38:	bf18      	it	ne
 800fd3a:	81a3      	strhne	r3, [r4, #12]
 800fd3c:	bd10      	pop	{r4, pc}

0800fd3e <__sclose>:
 800fd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd42:	f000 b831 	b.w	800fda8 <_close_r>
	...

0800fd48 <_write_r>:
 800fd48:	b538      	push	{r3, r4, r5, lr}
 800fd4a:	4d07      	ldr	r5, [pc, #28]	; (800fd68 <_write_r+0x20>)
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	4608      	mov	r0, r1
 800fd50:	4611      	mov	r1, r2
 800fd52:	2200      	movs	r2, #0
 800fd54:	602a      	str	r2, [r5, #0]
 800fd56:	461a      	mov	r2, r3
 800fd58:	f7f2 fe51 	bl	80029fe <_write>
 800fd5c:	1c43      	adds	r3, r0, #1
 800fd5e:	d102      	bne.n	800fd66 <_write_r+0x1e>
 800fd60:	682b      	ldr	r3, [r5, #0]
 800fd62:	b103      	cbz	r3, 800fd66 <_write_r+0x1e>
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	bd38      	pop	{r3, r4, r5, pc}
 800fd68:	240011b0 	.word	0x240011b0

0800fd6c <__assert_func>:
 800fd6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd6e:	4614      	mov	r4, r2
 800fd70:	461a      	mov	r2, r3
 800fd72:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <__assert_func+0x2c>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	4605      	mov	r5, r0
 800fd78:	68d8      	ldr	r0, [r3, #12]
 800fd7a:	b14c      	cbz	r4, 800fd90 <__assert_func+0x24>
 800fd7c:	4b07      	ldr	r3, [pc, #28]	; (800fd9c <__assert_func+0x30>)
 800fd7e:	9100      	str	r1, [sp, #0]
 800fd80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd84:	4906      	ldr	r1, [pc, #24]	; (800fda0 <__assert_func+0x34>)
 800fd86:	462b      	mov	r3, r5
 800fd88:	f000 f81e 	bl	800fdc8 <fiprintf>
 800fd8c:	f000 f893 	bl	800feb6 <abort>
 800fd90:	4b04      	ldr	r3, [pc, #16]	; (800fda4 <__assert_func+0x38>)
 800fd92:	461c      	mov	r4, r3
 800fd94:	e7f3      	b.n	800fd7e <__assert_func+0x12>
 800fd96:	bf00      	nop
 800fd98:	24000af4 	.word	0x24000af4
 800fd9c:	08010c85 	.word	0x08010c85
 800fda0:	08010c92 	.word	0x08010c92
 800fda4:	08010cc0 	.word	0x08010cc0

0800fda8 <_close_r>:
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4d06      	ldr	r5, [pc, #24]	; (800fdc4 <_close_r+0x1c>)
 800fdac:	2300      	movs	r3, #0
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4608      	mov	r0, r1
 800fdb2:	602b      	str	r3, [r5, #0]
 800fdb4:	f7f2 fe3f 	bl	8002a36 <_close>
 800fdb8:	1c43      	adds	r3, r0, #1
 800fdba:	d102      	bne.n	800fdc2 <_close_r+0x1a>
 800fdbc:	682b      	ldr	r3, [r5, #0]
 800fdbe:	b103      	cbz	r3, 800fdc2 <_close_r+0x1a>
 800fdc0:	6023      	str	r3, [r4, #0]
 800fdc2:	bd38      	pop	{r3, r4, r5, pc}
 800fdc4:	240011b0 	.word	0x240011b0

0800fdc8 <fiprintf>:
 800fdc8:	b40e      	push	{r1, r2, r3}
 800fdca:	b503      	push	{r0, r1, lr}
 800fdcc:	4601      	mov	r1, r0
 800fdce:	ab03      	add	r3, sp, #12
 800fdd0:	4805      	ldr	r0, [pc, #20]	; (800fde8 <fiprintf+0x20>)
 800fdd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdd6:	6800      	ldr	r0, [r0, #0]
 800fdd8:	9301      	str	r3, [sp, #4]
 800fdda:	f7ff fe41 	bl	800fa60 <_vfiprintf_r>
 800fdde:	b002      	add	sp, #8
 800fde0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fde4:	b003      	add	sp, #12
 800fde6:	4770      	bx	lr
 800fde8:	24000af4 	.word	0x24000af4

0800fdec <_fstat_r>:
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4d07      	ldr	r5, [pc, #28]	; (800fe0c <_fstat_r+0x20>)
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	4604      	mov	r4, r0
 800fdf4:	4608      	mov	r0, r1
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	602b      	str	r3, [r5, #0]
 800fdfa:	f7f2 fe28 	bl	8002a4e <_fstat>
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	d102      	bne.n	800fe08 <_fstat_r+0x1c>
 800fe02:	682b      	ldr	r3, [r5, #0]
 800fe04:	b103      	cbz	r3, 800fe08 <_fstat_r+0x1c>
 800fe06:	6023      	str	r3, [r4, #0]
 800fe08:	bd38      	pop	{r3, r4, r5, pc}
 800fe0a:	bf00      	nop
 800fe0c:	240011b0 	.word	0x240011b0

0800fe10 <_isatty_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	4d06      	ldr	r5, [pc, #24]	; (800fe2c <_isatty_r+0x1c>)
 800fe14:	2300      	movs	r3, #0
 800fe16:	4604      	mov	r4, r0
 800fe18:	4608      	mov	r0, r1
 800fe1a:	602b      	str	r3, [r5, #0]
 800fe1c:	f7f2 fe27 	bl	8002a6e <_isatty>
 800fe20:	1c43      	adds	r3, r0, #1
 800fe22:	d102      	bne.n	800fe2a <_isatty_r+0x1a>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	b103      	cbz	r3, 800fe2a <_isatty_r+0x1a>
 800fe28:	6023      	str	r3, [r4, #0]
 800fe2a:	bd38      	pop	{r3, r4, r5, pc}
 800fe2c:	240011b0 	.word	0x240011b0

0800fe30 <_lseek_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	4d07      	ldr	r5, [pc, #28]	; (800fe50 <_lseek_r+0x20>)
 800fe34:	4604      	mov	r4, r0
 800fe36:	4608      	mov	r0, r1
 800fe38:	4611      	mov	r1, r2
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	602a      	str	r2, [r5, #0]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	f7f2 fe20 	bl	8002a84 <_lseek>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	d102      	bne.n	800fe4e <_lseek_r+0x1e>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	b103      	cbz	r3, 800fe4e <_lseek_r+0x1e>
 800fe4c:	6023      	str	r3, [r4, #0]
 800fe4e:	bd38      	pop	{r3, r4, r5, pc}
 800fe50:	240011b0 	.word	0x240011b0

0800fe54 <__ascii_mbtowc>:
 800fe54:	b082      	sub	sp, #8
 800fe56:	b901      	cbnz	r1, 800fe5a <__ascii_mbtowc+0x6>
 800fe58:	a901      	add	r1, sp, #4
 800fe5a:	b142      	cbz	r2, 800fe6e <__ascii_mbtowc+0x1a>
 800fe5c:	b14b      	cbz	r3, 800fe72 <__ascii_mbtowc+0x1e>
 800fe5e:	7813      	ldrb	r3, [r2, #0]
 800fe60:	600b      	str	r3, [r1, #0]
 800fe62:	7812      	ldrb	r2, [r2, #0]
 800fe64:	1e10      	subs	r0, r2, #0
 800fe66:	bf18      	it	ne
 800fe68:	2001      	movne	r0, #1
 800fe6a:	b002      	add	sp, #8
 800fe6c:	4770      	bx	lr
 800fe6e:	4610      	mov	r0, r2
 800fe70:	e7fb      	b.n	800fe6a <__ascii_mbtowc+0x16>
 800fe72:	f06f 0001 	mvn.w	r0, #1
 800fe76:	e7f8      	b.n	800fe6a <__ascii_mbtowc+0x16>

0800fe78 <_read_r>:
 800fe78:	b538      	push	{r3, r4, r5, lr}
 800fe7a:	4d07      	ldr	r5, [pc, #28]	; (800fe98 <_read_r+0x20>)
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4611      	mov	r1, r2
 800fe82:	2200      	movs	r2, #0
 800fe84:	602a      	str	r2, [r5, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	f7f2 fd9c 	bl	80029c4 <_read>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d102      	bne.n	800fe96 <_read_r+0x1e>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	b103      	cbz	r3, 800fe96 <_read_r+0x1e>
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	bd38      	pop	{r3, r4, r5, pc}
 800fe98:	240011b0 	.word	0x240011b0

0800fe9c <__ascii_wctomb>:
 800fe9c:	b149      	cbz	r1, 800feb2 <__ascii_wctomb+0x16>
 800fe9e:	2aff      	cmp	r2, #255	; 0xff
 800fea0:	bf85      	ittet	hi
 800fea2:	238a      	movhi	r3, #138	; 0x8a
 800fea4:	6003      	strhi	r3, [r0, #0]
 800fea6:	700a      	strbls	r2, [r1, #0]
 800fea8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800feac:	bf98      	it	ls
 800feae:	2001      	movls	r0, #1
 800feb0:	4770      	bx	lr
 800feb2:	4608      	mov	r0, r1
 800feb4:	4770      	bx	lr

0800feb6 <abort>:
 800feb6:	b508      	push	{r3, lr}
 800feb8:	2006      	movs	r0, #6
 800feba:	f000 f82b 	bl	800ff14 <raise>
 800febe:	2001      	movs	r0, #1
 800fec0:	f7f2 fd76 	bl	80029b0 <_exit>

0800fec4 <_raise_r>:
 800fec4:	291f      	cmp	r1, #31
 800fec6:	b538      	push	{r3, r4, r5, lr}
 800fec8:	4604      	mov	r4, r0
 800feca:	460d      	mov	r5, r1
 800fecc:	d904      	bls.n	800fed8 <_raise_r+0x14>
 800fece:	2316      	movs	r3, #22
 800fed0:	6003      	str	r3, [r0, #0]
 800fed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fed6:	bd38      	pop	{r3, r4, r5, pc}
 800fed8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800feda:	b112      	cbz	r2, 800fee2 <_raise_r+0x1e>
 800fedc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fee0:	b94b      	cbnz	r3, 800fef6 <_raise_r+0x32>
 800fee2:	4620      	mov	r0, r4
 800fee4:	f000 f830 	bl	800ff48 <_getpid_r>
 800fee8:	462a      	mov	r2, r5
 800feea:	4601      	mov	r1, r0
 800feec:	4620      	mov	r0, r4
 800feee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fef2:	f000 b817 	b.w	800ff24 <_kill_r>
 800fef6:	2b01      	cmp	r3, #1
 800fef8:	d00a      	beq.n	800ff10 <_raise_r+0x4c>
 800fefa:	1c59      	adds	r1, r3, #1
 800fefc:	d103      	bne.n	800ff06 <_raise_r+0x42>
 800fefe:	2316      	movs	r3, #22
 800ff00:	6003      	str	r3, [r0, #0]
 800ff02:	2001      	movs	r0, #1
 800ff04:	e7e7      	b.n	800fed6 <_raise_r+0x12>
 800ff06:	2400      	movs	r4, #0
 800ff08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	4798      	blx	r3
 800ff10:	2000      	movs	r0, #0
 800ff12:	e7e0      	b.n	800fed6 <_raise_r+0x12>

0800ff14 <raise>:
 800ff14:	4b02      	ldr	r3, [pc, #8]	; (800ff20 <raise+0xc>)
 800ff16:	4601      	mov	r1, r0
 800ff18:	6818      	ldr	r0, [r3, #0]
 800ff1a:	f7ff bfd3 	b.w	800fec4 <_raise_r>
 800ff1e:	bf00      	nop
 800ff20:	24000af4 	.word	0x24000af4

0800ff24 <_kill_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4d07      	ldr	r5, [pc, #28]	; (800ff44 <_kill_r+0x20>)
 800ff28:	2300      	movs	r3, #0
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	4608      	mov	r0, r1
 800ff2e:	4611      	mov	r1, r2
 800ff30:	602b      	str	r3, [r5, #0]
 800ff32:	f7f2 fd2d 	bl	8002990 <_kill>
 800ff36:	1c43      	adds	r3, r0, #1
 800ff38:	d102      	bne.n	800ff40 <_kill_r+0x1c>
 800ff3a:	682b      	ldr	r3, [r5, #0]
 800ff3c:	b103      	cbz	r3, 800ff40 <_kill_r+0x1c>
 800ff3e:	6023      	str	r3, [r4, #0]
 800ff40:	bd38      	pop	{r3, r4, r5, pc}
 800ff42:	bf00      	nop
 800ff44:	240011b0 	.word	0x240011b0

0800ff48 <_getpid_r>:
 800ff48:	f7f2 bd1a 	b.w	8002980 <_getpid>

0800ff4c <_init>:
 800ff4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff4e:	bf00      	nop
 800ff50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff52:	bc08      	pop	{r3}
 800ff54:	469e      	mov	lr, r3
 800ff56:	4770      	bx	lr

0800ff58 <_fini>:
 800ff58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff5a:	bf00      	nop
 800ff5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff5e:	bc08      	pop	{r3}
 800ff60:	469e      	mov	lr, r3
 800ff62:	4770      	bx	lr
